const generateRandomCode = () => {
    const snippets = [
        `namespace Haryanamedicalcouncil.Controllers
    {
    public class homeController : Controller
    {
        // GET: home
        DAL dal = new DAL();
        MRPLookup lk = new MRPLookup();
        MailFormat mf = new MailFormat();

        private string RetrieveContent(string webPage)
        {
            HttpWebResponse response = null; // used to get response
            StreamReader respStream = null; // used to read response into string
            try
            {
                // create a request object using the url passed in
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(webPage);
                request.Timeout = 10000;

                // go get a response from the page
                response = (HttpWebResponse)request.GetResponse();

                // create a streamreader object from the response
                respStream = new StreamReader(response.GetResponseStream());

                // get the contents of the page as a string and return it
                return respStream.ReadToEnd();
            }
            catch (Exception ex) // houston we have a problem!
            {
                throw ex;
            }
            finally
            {
                // close it down, we’re going home!
                response.Close();
                respStream.Close();
            }
        }

        // using a regular expression, find all of the href or urls
        // in the content of the page
        private void GetAllUrls(string content)
        {
            // regular expression
            string pattern = @"(?:href\\s*=)(?:[\\s\\\"']*)(?.*?)(?:[\\s>\\\"'])";

            // Set up regex object
            Regex RegExpr = new Regex(pattern, RegexOptions.IgnoreCase);

            // get the first match
            Match match = RegExpr.Match(content);

            // loop through matches
            while (match.Success)
            {
                // output the match info
                Console.WriteLine("href match: " + match.Groups[0].Value);
                // WriteToLog(@"C:\\matchlog.txt", "href match: " + match.Groups[0].Value + "\\r\\n");

                Console.WriteLine("Url match: " + match.Groups[1].Value);
                // WriteToLog(@"C:\\matchlog.txt", "Url | Location | mailto match: " + match.Groups[1].Value + "\\r\\n");

                // get next match
                match = match.NextMatch();
            }
        }

        // Write to a log file
        // private void WriteToLog(string file, string message)
        // {
        // using (StreamWriter w = File.AppendText(file))
        // {
        // w.WriteLine(DateTime.Now.ToString() + ": " + message);
        // w.Close();
        // }
        using System;

{
public class homeController : Controller
{
    // GET: home
    DAL dal = new DAL();
    MRPLookup lk = new MRPLookup();
    MailFormat mf = new MailFormat();


    private string RetrieveContent(string webPage)
    {
        HttpWebResponse response = null;//used to get response
        StreamReader respStream = null;//used to read response into string
        try
        {
            //create a request object using the url passed in
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(webPage);
            request.Timeout = 10000;

            //go get a response from the page
            response = (HttpWebResponse)request.GetResponse();

            //create a streamreader object from the response
            respStream = new StreamReader(response.GetResponseStream());

            //get the contents of the page as a string and return it
            return respStream.ReadToEnd();
        }
        catch (Exception ex)//houston we have a problem!
        {
            throw ex;
        }
        finally
        {
            //close it down, we’re going home!
            response.Close();
            respStream.Close();
        }
    }

    //using a regular expression, find all of the href or urls
    //in the content of the page
    private void GetAllUrls(string content)
    {
        //regular expression
        string pattern = @"(?:href\s*=)(?:[\s""']*)(?.*?)(?:[\s>""'])";

        //Set up regex object
        Regex RegExpr = new Regex(pattern, RegexOptions.IgnoreCase);

        //get the first match
        Match match = RegExpr.Match(content);

        //loop through matches
        while (match.Success)
        {

            //output the match info
            Console.WriteLine("href match: " + match.Groups[0].Value);
            //WriteToLog(@"C:\matchlog.txt", "href match: " + match.Groups[0].Value + "\r\n");

            Console.WriteLine("Url match: " + match.Groups[1].Value);
            //WriteToLog(@"C:\matchlog.txt", "Url | Location | mailto match: " + match.Groups[1].Value + "\r\n");

            //get next match
            match = match.NextMatch();
        }
    }

    //Write to a log file
    //private void WriteToLog(string file, string message)
    //{
    //using (StreamWriter w = File.AppendText(file))
    //{
    //w.WriteLine(DateTime.Now.ToString() + ": " + message); w.Close();
    //}
    //}




    /// <summary>
    /// ////////////////////////
    /// </summary>
    /// <returns></returns>
    /// 

    public ActionResult Index()
    {




        return View();
    }
    //Start Login//
    public ActionResult login()
    {
        // Session["CAPTCHA"] = "111111";// GetRandomText();
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }

    
    public string Login_Form(string EmailId, string password, string ip, string captcha)
    
    {



        var dateTime = DateTime.Now;
        var tt = dateTime.Hour;


        var dayOfWeek = dateTime.DayOfWeek;
        var day = dayOfWeek.ToString();

        //Decrypt("","");
        //70789
        //554e981f4946f37a4818f1cea3928fe3
        //drtushargupta90@gmail.com
        string message = string.Empty;
        string clientCaptcha = captcha;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            ViewBag.CaptchaError = "Sorry, please write exact text as written above.";
            message = "11,11";
            return message;
        }
        else
            if (Session["checkSession"] == null)
        {
            ip = Request.ServerVariables["REMOTE_ADDR"].ToString();

            string pass = Encrypt(password);
            // string decoded = MRPLookup.Decrypt1(HttpUtility.UrlDecode(pass));
            string cond = "email='" + EmailId + "' and password='" + pass + "' and active!=3 ";//and active=1
            DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
            if (dtLogin.Rows.Count > 0)
            {
                if (Convert.ToString(dtLogin.Rows[0]["Regd_Type"]) == "PROV" && dtLogin.Rows.Count == 1)
                {
                    DataTable dt_temp_D = dal.GetList("pisl_temp_registrations", "Regd_ID,Regd_Type,Final_Status,Approved_By,date_approved,type", "email='" + EmailId.Trim() + "' order by ID desc");
                    for (int i = 0; i < dt_temp_D.Rows.Count; i++)
                    {
                        if (Convert.ToString(dt_temp_D.Rows[i]["Regd_Type"]) != "PROV" && Convert.ToString(dt_temp_D.Rows[i]["Final_Status"]) == "Approved" && Convert.ToString(dt_temp_D.Rows[i]["Approved_By"]) != null && Convert.ToString(dt_temp_D.Rows[i]["date_approved"]) != null && Convert.ToString(dt_temp_D.Rows[i]["type"]) != "service")
                        {



                            string colnameWithValue = "Regd_ID=" + Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]) + ",Regd_Type='" + dt_temp_D.Rows[i]["Regd_Type"].ToString() + "'";
                            string conditions = "S_No=" + Convert.ToInt32(dtLogin.Rows[0]["S_No"]) + "";
                            var Update_paymentUpdate = dal.Updation("pisl_users", colnameWithValue, conditions);
                            if (Update_paymentUpdate == 0)
                            {
                                dtLogin.Rows[0]["Regd_ID"] = Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]);
                                dtLogin.Rows[0]["Regd_Type"] = dt_temp_D.Rows[i]["Regd_Type"].ToString();

                            }
                            break;
                        }
                    }
                }


                for (int i = 0; i < dtLogin.Rows.Count; i++)
                {
                    string hash = Convert.ToString(dtLogin.Rows[i]["hash"]);
                    string decryptedstring = Decrypt(pass, hash);

                    string gid = Convert.ToString(dtLogin.Rows[i]["GID"]);
                    //string active = Convert.ToString(dtLogin.Rows[0]["active"]);
                    if (gid == "0")//Login for doctor
                    {
                        //DataTable dt_lastloginRecord = dal.GetList("pisl_users where email='" + EmailId + "' order by S_No desc", "TOP 1 *", "");
                        if (dtLogin != null && dtLogin.Rows.Count > 0)
                        {

                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[i]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[i]["Regd_Type"]);
                            }
                            else
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                            }
                            if (dtLogin.Rows[i]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[i]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }

                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                        }
                        else
                        {
                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[0]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            }
                            if (dtLogin.Rows[0]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }
                        }


                        message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 2;
                    }
                    else if (gid == "1")//Login for internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["isno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 1;
                            }
                            else
                            {
                                message = "0,6";
                            }
                        }

                        else
                        {
                            message = "0,5";
                        }
                    }
                    else if (gid == "2")//Login for admin and internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["asno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 3;
                            }
                            else
                            {
                                message = "0,6";
                            }

                        }
                        else
                        {
                            message = "0,5";
                        }
                    }
                }
            }
            else
            {
                message = "0,0";
            }
        }
        else
        {
            message = "10,10";
        }
        return message;
    }

    public string Encrypt(string password)
    {
        // Decrypt("", "");
        //string password = @"1234abcd";

        // byte array representation of that string
        byte[] encodedPassword = new UTF8Encoding().GetBytes(password);

        // need MD5 to calculate the hash
        byte[] hash = ((HashAlgorithm)CryptoConfig.CreateFromName("MD5")).ComputeHash(encodedPassword);

        // string representation (similar to UNIX format)
        string encoded = BitConverter.ToString(hash)
           // without dashes
           .Replace("-", string.Empty)
           // make lowercase
           .ToLower();
        return encoded;
    }
    public string Decrypt(string password, string hash1)
    {//https://md5decrypt.net/#answer
        string ss = "";
        string source = "zdNot3oAz5I%3DjRspJg78a%2FY%3D";// "Hello World!";
        MD5 md5 = System.Security.Cryptography.MD5.Create();
        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(password);
        byte[] hash = md5.ComputeHash(inputBytes);

        // step 2, convert byte array to hex string
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < hash.Length; i++)
        {
            sb.Append(hash[i].ToString("X2"));
        }
        return sb.ToString();
    }
    static string GetMd5Hash(MD5 md5Hash, string input)
    {

        // Convert the input string to a byte array and compute the hash.
        byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));

        // Create a new Stringbuilder to collect the bytes
        // and create a string.
        StringBuilder sBuilder = new StringBuilder();

        // Loop through each byte of the hashed data 
        // and format each one as a hexadecimal string.
        for (int i = 0; i < data.Length; i++)
        {
            sBuilder.Append(data[i].ToString("x2"));
        }

        // Return the hexadecimal string.
        return sBuilder.ToString();
    }
    public FileResult GetCaptchaImage()
    {
        MemoryStream ms = new MemoryStream();
        if (Session["CAPTCHA"] != null)
        {
            string text = Session["CAPTCHA"].ToString();

            //first, create a dummy bitmap just to get a graphics object
            Image img = new Bitmap(1, 1);
            Graphics drawing = Graphics.FromImage(img);

            Font font = new Font("Jokerman", 15);
            //measure the string to see how big the image needs to be
            SizeF textSize = drawing.MeasureString(text, font);

            //free up the dummy image and old graphics object
            img.Dispose();
            drawing.Dispose();

            //create a new image of the right size
            img = new Bitmap((int)textSize.Width + 40, (int)textSize.Height + 20);
            drawing = Graphics.FromImage(img);

            Color backColor = Color.SeaShell;
            Color textColor = Color.Red;
            //paint the background
            drawing.Clear(backColor);

            //create a brush for the text
            Brush textBrush = new SolidBrush(textColor);

            drawing.DrawString(text, font, textBrush, 20, 10);

            drawing.Save();

            font.Dispose();
            textBrush.Dispose();
            drawing.Dispose();


            img.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
            img.Dispose();

            return File(ms.ToArray(), "image/png");
        }
        else
        {
            return File(ms.ToArray(), "image/png");
        }
    }
    private string GetRandomText()
    {
        StringBuilder randomText = new StringBuilder();
        string alphabets = "12345679ABCEFGHKLMNPRSTUVWXZ";
        Random r = new Random();
        for (int j = 0; j <= 5; j++)
        {
            randomText.Append(alphabets[r.Next(alphabets.Length)]);
        }
        return randomText.ToString();
    }
    //End Login//
    public ActionResult signup()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    [HttpPost]
    public string sendotpsignup(string txt_Email, string txt_ContactNo)
    {
        string msg = "";
        try
        {
            var CheckEmail = IsEmailandMobileExists(txt_Email, "");
            var checkMobile = IsEmailandMobileExists("", txt_ContactNo);
            if (CheckEmail == false && checkMobile == false)
            {

                Session["otp"] = GetRandomText();
                string OTP = Session["otp"].ToString();
                //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
                string mailBody = "Your OTP is: " + OTP + ". DMC";
                MRPLookup.sendMail(txt_Email.Trim(), "DMC | OTP Verification", mailBody, "", "");

                //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
              

                MRPLookup.SendSMS("otp", txt_ContactNo.Trim(), "", "", OTP, "", "", "", "", "", "", "");
                msg = "0";
            }
            else if (CheckEmail == true && checkMobile == true)
            {
                msg = "Email and Mobile no. are already exists!!";
            }
            else
            {
                if (checkMobile == true && CheckEmail == false)
                {
                    msg = "Mobile No. is Already Exists!!";
                }
                else if (CheckEmail == true && checkMobile == false)
                {
                    msg = "Email Address is Already Exists!!";
                }


            }
        }
        catch (Exception ex)
        {
            msg = "1";
        }
        return msg;
    }
    public bool IsEmailandMobileExists(string email, string mobile)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        try
        {
            tableName = "pisl_users";
            colname = "*";
            if (!string.IsNullOrEmpty(email))
            {
                cond = "email='" + email + "'";
            }
            if (!string.IsNullOrEmpty(mobile))
            {
                cond = "mobile='" + mobile + "'";
            }
            //cond=
            DataTable dt_datacheck = dal.GetList(tableName, colname, cond);
            if (dt_datacheck != null && dt_datacheck.Rows.Count > 0)
            {
                IsExists = true;
            }

        }
        catch (Exception ex)
        {
            IsExists = false;
            throw;
        }
        return IsExists;
    }

    public ActionResult IsDocDataExists(string regd_type, string regd_no, string DOB, string PassingYear)
    {
        //List<dynamic> list = new List<dynamic>();
        string message = "";
        try
        {
            var tbl_name = "";

            var userExists = IsRegd_Exists(regd_type, regd_no, DOB, PassingYear, out tbl_name);
            if (userExists == true && tbl_name == "pisl_users")
            {

                message = "Already Registered With us. Please Login With Your Credential";
            }
            else
                if (userExists == true && tbl_name == "pisl_fresh_registration_mst")
            {
                message = "Your Registration No. is Expired. Please SignUp Again.";
            }
            else
            {
                message = "NotExists";
                //message = "Your Registration No. is Not Exists!";
            }
        }
        catch (Exception ex)
        {

        }
        return Json(message, JsonRequestBehavior.AllowGet);
    }
    public bool IsRegd_Exists(string regd_type, string regd_no, string DOB, string PassingYear, out string Tbl_Name)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        Tbl_Name = "";
        DataTable dt_UserCheck = null;
        try
        {
            tableName = "pisl_users";
            colname = "*";
            cond = "Regd_Type='" + regd_type + "' and Regd_ID='" + regd_no.Trim() + "'";
            dt_UserCheck = dal.GetList(tableName, colname, cond);
            if (dt_UserCheck == null || dt_UserCheck.Rows.Count == 0)
            {
                tableName = "pisl_fresh_regi_qual_mst";
                colname = "*";
                cond = "quali_type='Basic Qualification' AND Regd_ID='" + regd_no + "' "
                    + "AND Regd_Type='" + regd_type + "' AND passing_date =  '" + PassingYear.Trim() + "'";
                dt_UserCheck = dal.GetList(tableName, colname, cond);
                if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                {
                    Tbl_Name = "pisl_fresh_regi_qual_mst";

                    tableName = "pisl_fresh_registration_mst";
                    colname = "*";
                    cond = "Regd_ID='" + regd_no + "' AND Regd_Type='" + regd_type + "'";
                    dt_UserCheck = dal.GetList(tableName, colname, cond);
                    if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                    {
                        Tbl_Name = "pisl_fresh_registration_mst";
                        IsExists = true;
                    }
                    else
                    {
                        IsExists = false;
                    }
                }
                else
                {

                    IsExists = false;
                }
            }
            else
            {
                Tbl_Name = "pisl_users";
                IsExists = true;
            }
        }
        catch (Exception ex)
        {


            throw;
        }
        return IsExists;
    }

    [HttpPost]
    public string createsignup(string txt_Email, string txt_ContactNo, string txt_FirstName, string txt_MiddleName,
        string txt_LastName, string txt_Password, string txt_ConfirmPassword, string txt_DOB, bool chk_TermCondition,
        string Captcha, string Regd_ID, string txtOTP, string ddl_regType, string txt_oldData, string passingYear)
    {
        string message = "";
        string dob = lk.convertdate1(txt_DOB);
        string Tbl_Name = "";
        try
        {
            if (!IsEmailandMobileExists(txt_Email, ""))
            {
                if (!IsEmailandMobileExists("", txt_ContactNo))
                {
                    if (ddl_regType == "FRS" || ddl_regType == "RRE")
                    {
                        if (IsRegd_Exists(ddl_regType, Regd_ID, dob, passingYear, out Tbl_Name))
                        {
                            Tbl_Name = Tbl_Name;
                            if (Tbl_Name == "pisl_users")
                            {
                                //if Pisl_user Table Record Exists but no Email and Mobile No exists
                                //in this case update the Email and Mobile No.
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        DataTable dt_Email_Mobile_Check = dal.GetList("pisl_users",
                                                        "top 1*", " Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                        if (dt_Email_Mobile_Check != null)
                                                        {
                                                            if (dt_Email_Mobile_Check.Rows.Count > 0)
                                                            {
                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_Email_Mobile_Check.Rows[0]["email"])))
                                                                {
                                                                    string pass = Encrypt(txt_Password.Trim());
                                                                    string hash = Encrypt(MRPLookup.RandamStringGenerator1());
                                                                    var updateDt = dal.Updation("pisl_users",
                                                                        "email='" + txt_Email.Trim() + "',mobile='" + txt_ContactNo.Trim() + "',password='" + pass + "',hash='" + hash + "'",
                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                    if (updateDt == 0)
                                                                    {
                                                                        DataTable dt_fresh_Check = dal.GetList("pisl_fresh_registration_mst",
                                                                            "top 1 * ",
                                                                            "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                        if (dt_fresh_Check != null)
                                                                        {
                                                                            if (dt_fresh_Check.Rows.Count > 0)
                                                                            {
                                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_fresh_Check.Rows[0]["Email"])))
                                                                                {
                                                                                    var updateDt_fresh = dal.Updation("pisl_fresh_registration_mst",
                                                                                        "Email='" + txt_Email.Trim() + "',Mobile='" + txt_ContactNo.Trim() + "'",
                                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");

                                                                                    if (updateDt_fresh != 0)
                                                                                    {
                                                                                        message = "Error!!";
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                                        MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                                        message = "Please, Check Your Mail For Login Details";
                                                                        //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                                        MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                                    }
                                                                    else
                                                                    {
                                                                        message = "Error!!";
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    message = "Your record are already Exists with us!!";
                                                                }
                                                            }
                                                        } //End Updation
                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }
                            else if (Tbl_Name == "pisl_fresh_regi_qual_mst" || Tbl_Name == "pisl_fresh_registration_mst")
                            {
                                //Insert Login Record in Pisl_Users
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        string pass = Encrypt(txt_Password.Trim());
                                                        string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                        if (string.IsNullOrEmpty(Regd_ID))
                                                        {
                                                            Regd_ID = "0";
                                                        }
                                                        //if (txt_oldData != "")
                                                        //{
                                                        //    string colnamemst = "*";
                                                        //    string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        //    DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        //    if (dtrmst.Rows.Count > 0)
                                                        //    {
                                                        //        string oldtype = "";
                                                        //        if (ddl_regType == "FRS")
                                                        //        {
                                                        //            oldtype = "service";
                                                        //        }
                                                        //        else if (ddl_regType == "RRE")
                                                        //        {
                                                        //            oldtype = "reregi";
                                                        //        }
                                                        //        var corrAddress1 = dtrmst.Rows[0]["Corr_Add_Line_1"].ToString();
                                                        //        var corrAddress2 = dtrmst.Rows[0]["Corr_Add_Line_2"].ToString();
                                                        //        var perAddress1 = dtrmst.Rows[0]["Per_Add_Line_1"].ToString();
                                                        //        var perAddress2 = dtrmst.Rows[0]["Per_Add_Line_2"].ToString();

                                                        //        string colNameold = "Regd_ID,Regd_Type,type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,date_entered,Father_Name,POB,Gender,Nationality,Corr_Add_Line_1,Corr_Add_Line_2,Corr_Add_State,Corr_Add_Pincode,Corr_Add_Country,Per_Add_Line_1,Per_Add_Line_2,Per_Add_Line_State,Per_Add_Line_Pincode,Per_Add_Line_Country";

                                                        //        string colValueold = "'" + Regd_ID + "','" + ddl_regType + "','" + oldtype + "','" + txt_FirstName + "','" + txt_MiddleName + "','"  + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "', '"+ lk.GetDateTime()+ "' ,'"+ dtrmst.Rows[0]["Father_Name"] + "','" + dtrmst.Rows[0]["POB"] + "','" + dtrmst.Rows[0]["Gender"] + "','" + dtrmst.Rows[0]["Nationality"] + "','" + corrAddress1 + "','" + corrAddress2 + "','" + dtrmst.Rows[0]["Corr_Add_State"] + "','" + dtrmst.Rows[0]["Corr_Add_Pincode"] + "','" + dtrmst.Rows[0]["Corr_Add_Country"] + "','" + perAddress1 + "','" + perAddress2 + "','" + dtrmst.Rows[0]["Per_Add_Line_State"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Pincode"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Country"] + "'";
                                                        //        int insold = dal.insertion("pisl_temp_registrations", colNameold, colValueold);
                                                        //    }
                                                        //}
                                                        Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                        string colnamemst = "*";
                                                        string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        DateTime txtdob1 = Convert.ToDateTime(dtrmst.Rows[0]["DOB"]);
                                                        string txtdob = txtdob1.ToShortDateString();

                                                        string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                            + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                        string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + dtrmst.Rows[0]["First_Name"].ToString() + "','" + dtrmst.Rows[0]["Middle_Name"].ToString() + "',"
                                                            + "'" + dtrmst.Rows[0]["Last_Name"].ToString() + "','" + txtdob + "','" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                            + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                        int ins = dal.insertion("pisl_users", colName, colValue);
                                                        if (ins == 0)
                                                        {
                                                            string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                            MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                            message = "Please, Check Your Mail For Login Details";
                                                            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                            MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                        }
                                                        else
                                                        {
                                                            message = "Try after some time";
                                                        }

                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }

                        }
                        else
                        {
                            message = "Your Registration No and Passing Year is Not Exist with Us";
                        }
                    }
                    else
                    {
                        //Insert Login Record in Pisl_Users
                        if (chk_TermCondition == true)
                        {
                            if (txtOTP == Session["otp"].ToString())
                            {
                                if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                {
                                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                    Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                    if (foundMatch == true)
                                    {
                                        if (txt_Password == txt_ConfirmPassword)
                                        {
                                            if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                            {
                                                //if (Tbl_Name== "pisl_users") { }
                                                string pass = Encrypt(txt_Password.Trim());
                                                string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                if (string.IsNullOrEmpty(Regd_ID))
                                                {
                                                    Regd_ID = "0";
                                                }
                                                Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                if (ddl_regType == "-1")
                                                {
                                                    ddl_regType = "";
                                                }


                                                string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                    + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                int ins = dal.insertion("pisl_users", colName, colValue);
                                                if (ins == 0)
                                                {
                                                    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                    message = "Please, Check Your Mail";
                                                    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                }
                                                else
                                                {
                                                    message = "Try after some time";
                                                }

                                                //string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                //    + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                //string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                //    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                //    + "1,0,0,'"+ lk.GetDateTime()+ "','','" + Regd_ID1 + "'";
                                                //int ins = dal.insertion("pisl_users", colName, colValue);
                                                //if (ins == 0)
                                                //{
                                                //    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                //    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                //    message = "Please, Check Your Mail";
                                                //    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                //    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                //}
                                                //else
                                                //{
                                                //    message = "Try after some time";
                                                //}
                                            }
                                            else
                                            {
                                                message = "Enter A Valid Email";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password and Confrim Password is Not Same";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                    }
                                }
                                else
                                {
                                    message = "Password Length must between 8 to 18 letters";
                                }
                            }
                            else
                            {
                                message = "Enter the Valid OTP";
                            }
                        }
                        else
                        {
                            message = "Please check the Terms and Conditions";
                        }

                        //}
                    }
                }
                else
                {
                    message = "Mobile No. is Already Exists";
                }
            }
            else
            {
                message = "Email Already exists!!";
            }
            //
            //Cut the Code From There

        }
        catch
        {

        }
        return message;
    }

    public ActionResult SignupVerification()
    {
        string message = "";
        try
        {
            if (Request.QueryString["email"] != null && Request.QueryString["hash"] != null)
            {
                string email = Request.QueryString["email"];
                string hash = Request.QueryString["hash"];
                string cond = "Email='" + email.Trim() + "' and Hash='" + hash.Trim() + "' and Active=0";
                DataTable dt = dal.GetList("pisl_users", "*", cond);
                if (dt.Rows.Count > 0)
                {
                    int upd = dal.Updation("pisl_users", "Active=1", cond);
                    if (upd == 0)
                    {
                        message = "Your account has been activated, you can now login";
                    }
                    else
                    {
                        message = "Try after some time";
                    }
                }
                else
                {
                    message = "The url is either invalid or you already have activated your account.";
                }
            }
            else
            {
                message = "Invalid approach, please use the link that has been send to your email.";
            }
        }
        catch
        { }
        ViewBag.lbl_status = message;
        return View();
    }
    public ActionResult contact()
    {
        return View();
    }

    public ActionResult about()
    {
        return View();
    }
    public ActionResult faqs()
    {
        return View();
    }
    // Start forgot password
    public ActionResult forgotpassword()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public string sendCode(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        string message = string.Empty;
        try
        {
            string clientCaptcha = CaptchaCaseID;
            string serverCaptcha = Session["CAPTCHA"].ToString();
            if (!clientCaptcha.Equals(serverCaptcha))
            {
                ViewBag.ShowCAPTCHA = serverCaptcha;
                message = "Sorry, please write exact text as written below.";
            }
            else
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' ";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string name = Convert.ToString(dt.Rows[0]["First_Name"]);
                                        string Mobile = Convert.ToString(dt.Rows[0]["Mobile"]);

                                        MailFormat mf = new MailFormat();
                                        string code = MRPLookup.RandamStringGenerator1();
                                        string mailBody = mf.SendCodeOnMail(name, code);
                                        MRPLookup.SendSMS("otp", Mobile, "", "", code, "", "", "", "", "", "", "");
                                        string colValue = "Code='" + code.Trim() + "'";
                                        int updCode = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "'");
                                        if (updCode == 0)
                                        {
                                            string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(), "Reset Password Code " + System.DateTime.Now + "", mailBody, "", "");
                                            if (sendmailStatus != "Technical issue! Please try agiain")
                                            {
                                                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

                                            }
                                            else
                                            {
                                                message = sendmailStatus;
                                            }
                                        }
                                        else
                                        {
                                            message = "Please try after some time.";
                                        }

                                    }
                                    else
                                    {
                                        message = "Enter a New Password.";
                                    }
                                }
                                else
                                {
                                    message = "Your Email And Mobile Number Do not Match with DMC Registered Users.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
        }
        catch (Exception ex)
        {

        }
        return message;
    }
    public string forgotpasswordCaseID(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact text as written below.";
            // return message;
        }
        else
        {
            if (txtCode != "0")
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string mobile = Convert.ToString(dt.Rows[0]["Mobile"]);
                                    string firstName = Convert.ToString(dt.Rows[0]["First_Name"]);
                                    string lastName = Convert.ToString(dt.Rows[0]["Last_Name"]);
                                    //string new_password = Encrypt(MRPLookup.RandamStringGenerator1());
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string colValue = "password='" + new_PasswordMD5.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                                        updPassword = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                        if (updPassword == 0)
                                        {
                                            updPassword = dal.Updation("pisl_users", "Code='0'", "Email='" + txtEmail.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                            string hostName = Dns.GetHostName();
                                            string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                            string colName = "activity,email,password,ip,system,description,date";
                                            colValue = "'Change Passs','" + txtEmail + "','" + txtPassword + "','" + IP + "','" + mobile + "','" + new_PasswordMD5 + "',getdate()";
                                            int ins = dal.insertion("tbl_activity", colName, colValue);
                                            message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                            MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                                            // Send SMS and mail for password reset.
                                            

                                        }
                                        else
                                        {
                                            message = "Please try after some time";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please try another password.";
                                    }

                                }
                                else
                                {
                                    message = "Your Details Dont Match or You have NOT registered with DMC.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
            else
            {
                message = "Code not match";
            }
        }
        return message;
    }

    public ActionResult introduction()
    {
        return View();
    }

    public ActionResult powers()
    {
        return View();
    }

    public ActionResult thecouncil()
    {
        return View();
    }

    //public ActionResult gallery()
    //{
    //    return View();
    //}
    public ActionResult Gallery()
    {
        return View();
    }

    public ActionResult accomplishments()
    {
        return View();
    }

    public ActionResult registration()
    {
        return View();
    }
    public ActionResult cmeperforma()
    {
        return View();
    }
    public ActionResult cmeonline()
    {
        return View();
    }
    public ActionResult cmerequirements()
    {
        return View();
    }
    public ActionResult cmepassbook()
    {
        return View();
    }
    public ActionResult duties()
    {
        return View();
    }
    public ActionResult inst_general()
    {
        return View();
    }

    public ActionResult inst_fees()
    {
        return View();
    }
    public ActionResult inst_docupload()
    {
        return View();
    }
    public ActionResult disclaimer()
    {
        return View();
    }
    public ActionResult feestructure()
    {
        return View();
    }
    public ActionResult privacypolicy()
    {
        return View();
    }
    public ActionResult termofuse()
    {
        return View();
    }

    public ActionResult litigations()
    {
        return View();
    }


    public ActionResult council_meeting()
    {
        return View();
    }
    public ActionResult Cme_workshop_Conference()
    {
        return View();
    }

    public ActionResult Media_room()
    {
        return View();
    }
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    public ActionResult LogOut()
    {
        Session.Abandon();
        return RedirectToAction("Index", "Home");
    }
    public ActionResult SearchElectrolData(string regid)
    {
        string msg = "";
        DataTable dtSearch = dal.GetList("tbl_electrolData", "*", "RegNo='" + regid.Trim() + "'");
        if (dtSearch.Rows.Count > 0)
        {
            return Json(MRPLookup.DataTableToJSONWithJSONNet(dtSearch), JsonRequestBehavior.AllowGet);
        }
        else
        {
            msg = "Data not found";
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
    }
    public ActionResult SearchElectrolDataUpdate(string regid)
    {
        int upd = 1;
        upd = dal.Updation("tbl_electrolData", "Status='Completed',Date='" + lk.GetDateTime() + "'", "ID='" + regid.Trim() + "'");
        if (upd == 0)
        {

            return Json(upd, JsonRequestBehavior.AllowGet);
        }
        else
        {
            return Json(upd, JsonRequestBehavior.AllowGet);
        }
    }

    public ActionResult TotalCount()
    {
        DataTable dtcntCompleted = dal.GetList("tbl_electrolData", "count(*) as cntCompleted", "status='Completed'");
        DataTable dtcntNotCompleted = dal.GetList("tbl_electrolData", "count(*) as cntNotCompleted", "status ='Valid'");
        string totalCmpleteStatus = "Completed: " + Convert.ToString(dtcntCompleted.Rows[0]["cntCompleted"]) + "  Not Completed: " + Convert.ToString(dtcntNotCompleted.Rows[0]["cntNotCompleted"]);
        return Json(totalCmpleteStatus, JsonRequestBehavior.AllowGet);
    }
    public ActionResult Renewal_Reminder(string key)
    {
        string msg = "";
        try
        {

            key = "1111";
            string validKey = "1111";
            // MRPLookup.SendSMS("Renewal_expired_tdy", "9899849487", "Dinesh", "", "", "", "", "", "", "", "", "");
            if (key == validKey)
            {
                string expiry_frtyfive = Convert.ToDateTime(DateTime.Now.AddDays(30)).ToString("yyyy-MM-dd");//date(('Y-m-d'), strtotime('+30 days'));
                string expiry_tdy = Convert.ToDateTime(DateTime.Now).ToString("yyyy-MM-dd");//date('Y-m-d');
                string expiry_pastfifty = Convert.ToDateTime(DateTime.Now.AddDays(-50)).ToString("yyyy-MM-dd");// date(('Y-m-d'), strtotime('-50 days'));
                string cond = "(Expiry_Date = '" + expiry_frtyfive + "' OR  Expiry_Date = '" + expiry_tdy + "' OR Expiry_Date = '" + expiry_pastfifty + " ') AND (Mobile !='' OR  Email !='')";
                //DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", cond);
                string strConnString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                SqlConnection con = new SqlConnection(strConnString);
                //SqlConnection con = new SqlConnection(@"Data Source=103.20.212.254,1232;Initial Catalog=dmcaws_New;User Id=sa;Password=bD$x89K3$@K9UaQsKQ");
                //SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-PKTADCN;Initial Catalog=dmcaws1;integrated security=true");
                con.Open();
                SqlCommand cmd = new SqlCommand("select * from pisl_fresh_registration_mst where " + cond + "", con);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                con.Close();
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string First_Name = Convert.ToString(dt.Rows[i]["First_Name"]);
                        string Last_Name = Convert.ToString(dt.Rows[i]["Last_Name"]);
                        string Regd_ID = Convert.ToString(dt.Rows[i]["Regd_ID"]);
                        string Regd_Type = Convert.ToString(dt.Rows[i]["Regd_Type"]);
                        string Mobile = Convert.ToString(dt.Rows[i]["Mobile"]);
                        string Expiry_Date = Convert.ToDateTime(dt.Rows[i]["Expiry_Date"]).ToString("yyyy-MM-dd");
                        string date_approved = Convert.ToDateTime(dt.Rows[i]["date_approved"]).ToString("yyyy-MM-dd");
                        string tdydate = Convert.ToDateTime(System.DateTime.Now).ToString("yyyy-MM-dd");
                        string to = Convert.ToString(dt.Rows[i]["Email"]);

                        string subject1 = "Renewal of Registration with Delhi Medical Council"; //// Give the email a subject
                        string subject2 = "Expiry of Registration with Delhi Pharmacy Council";
                        string subject3 = "Deletion of Regd Number with Delhi Pharmacy Council";
                        string message1 = "";
                        message1 += "Dear Dr " + First_Name + " " + Last_Name + ",";
                        message1 += "Greetings from Delhi Medical Council!!";

                        message1 += "   This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council is due for renewal.";
                        message1 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting ";
                        message1 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message1 += "For inclusion of any additional qualification, please produce the original degree at the office of Delhi Medical Council, so that your additional ";
                        message1 += "qualification certificate can be verified with the original document. The original degree / diploma Certificate will be returned immediately after verification. ";

                        message1 += "<b>This is a system generated email and we request you not to reply to this email. Please ignore if already applied.</b>";

                        message1 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message1 += "Warm Regards,";

                        message1 += "Delhi Medical Council.";
                        message1 += "Ground Floor, B Wing, B Block-1";
                        message1 += "DMCR IT Park, Shastri Park";
                        message1 += "New Delhi-110053";
                        message1 += "Tel: +91-011-46621000";
                        message1 += "Website - www.delhimedicalcouncil.org	 ";

                        string message2 = "";
                        message2 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message2 += "Greetings from Haryana Medical Council!!";

                        message2 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council expired on " + Expiry_Date + " and  is due for renewal. ";

                        message2 += "We request you to kindly renew your registration within thirty days and keep your registration in force. You can renew your registration online by visiting ";
                        message2 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message2 += "Please take note that in case you do not apply for renewal of registration within the stipulated period, your name shall be removed from the State Medical ";
                        message2 += "Register maintained by the Delhi Medical Council in accordance with the provisions of Section 22 of the Delhi Medical Council Act, 1997 which will debar";
                        message2 += "you from practicing Allopathic in the state of Delhi.";

                        message2 += "<b>Kindly ignore this email, in case you have already applied for renewal of registration</b>";

                        message2 += "This is a system generated email and we request you not to reply to this email.";

                        message2 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message2 += "Warm Regards,";

                        message2 += "Delhi Medical Council.";
                        message2 += "Ground Floor, B Wing, B Block-1";
                        message2 += "DMCR IT Park, Shastri Park";
                        message2 += "New Delhi-110053";
                        message2 += "Tel: +91-011-46621000";
                        message2 += "Website - www.delhimedicalcouncil.org";

                        string message3 = "";
                        message3 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message3 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council has expired on " + Expiry_Date + ". You ";
                        message3 += "failed to renew the registration with Delhi Medical Council, in spite of notices/Emails (public / individual) issued for renewal. Hence, in accordance with the ";
                        message3 += "provisions of section 22(3) of Delhi Medical Council Act, 1997; your name under Registration number " + Regd_ID + "-" + Regd_Type + "  has been removed from the State ";
                        message3 += "Medical Register of Delhi Medical Council.";

                        message3 += "Please note that if you wish to have your name re-entered in the State Medical Register of Delhi Medical Council, you may do so, by paying fees as detailed herein below,";
                        message3 += "in addition to fee for renewal of registration (Rs. 2000/-)";

                        message3 += "Late fees for non-renewal of registration:-";
                        message3 += "(a) upto six months from the date from 		Rs. 1000/- (Rupees One Thousand only)";
                        message3 += "    which registration is due for renewal";
                        message3 += "(b) for period more than six months 	    Rs. 2000/- (Rupees One Thousand only)";
                        message3 += "     but upto one year";
                        message3 += "(c) for period more than one year 			Rs. 1000/- (Rupees One Thousand per year and Part thereof)";

                        message3 += "Please also note that any person servicing or practicing modern scientific system of medicine (allopathy) in Delhi without holding valid registration with Delhi Medical Council is liable for action under the provisions of Delhi Medical Council Act, 1997.";
                        message3 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting www.delhimedicalcouncil.org and apply under Online Renewal & Services.";

                        message3 += "<b>Kindly ignore this letter, in case you have already applied for renewal of registration</b>";

                        message3 += "This is a system generated email and we request you not to reply to this email.";

                        message3 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message3 += "Warm Regards,";

                        message3 += "Delhi Medical Council.";
                        message3 += "Ground Floor, B Wing, B Block-1";
                        message3 += "DMCR IT Park, Shastri Park";
                        message3 += "New Delhi-110053";
                        message3 += "Tel: +91-011-46621000";
                        message3 += "Website - www.delhimedicalcouncil.org,";

                        string headers = "From: DMC Registration System <registration@delhimedicalcouncil.org>' . '\r\n'"; // Set from headers

                        string message = "";
                        string subject = "";
                        string trigger = "";
                        string msgtxt = "";
                        if (Convert.ToDateTime(Expiry_Date) > Convert.ToDateTime(tdydate))
                        {
                            message = message1;
                            subject = subject1;
                            trigger = "Renewal_due_reminder";
                            msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Renewal of your DMC Regd No " + Regd_ID + " - " + Regd_Type + " is due. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }

                        }
                        else if (Convert.ToDateTime(Expiry_Date) == Convert.ToDateTime(tdydate))
                        {
                            message = message2;
                            subject = subject2;
                            trigger = "Renewal_expired_tdy";
                            // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Registration of DMC Regd No " + Regd_ID + " - " + Regd_Type + " expired today. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }
                        }
                        //else if (Convert.ToDateTime(Expiry_Date) < Convert.ToDateTime(tdydate))
                        //{
                        //    message = message2;
                        //    subject = subject2;
                        //    trigger = "Renewal_expired_fifty";
                        //   // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Your  ID " + Regd_ID + " - " + Regd_Type + " has been removed from the State Medical Register of DMC . Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                        //    if (!string.IsNullOrEmpty(to))
                        //    {
                        //       // MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //    if (!string.IsNullOrEmpty(Mobile))
                        //    {
                        //       // MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(to))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(Mobile))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}

                    }
                }

            }
            else
            {
                msg = "Key not match";
                string path = "C:\\TestService\\ServiceLog.txt";
                using (StreamWriter writer = new StreamWriter(path, true))
                {
                    writer.WriteLine(string.Format(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt"), DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt")));
                    writer.Close();
                }
            }
        }
        catch
        {

        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult certverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["cert"];
            string Regd_type = "";
            string regd_id = "";

            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["cert"]);
            var splitedString = decodedstr.Split('-');
            Regd_type = splitedString[0];
            regd_id = splitedString[1];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            switch (Regd_type)
            {
                case "RRE":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "FRS":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "PROV":
                    db = "pisl_prov_registration_mst";
                    qual_db = "pisl_prov_regi_qual_mst";
                    break;

                default:
                    Message = "This certificate cannnot be verified";
                    break;

            }

            var check_namechange = dal.GetList("tbl_NameChangeHistory_New", "CaseID,Name=(case when (New_MiddleName is null or  New_MiddleName='') then New_FirstName+' '+New_LastName when (New_MiddleName is null or  New_MiddleName='') and (New_LastName is null or New_LastName='') then New_FirstName else New_FirstName+' '+New_MiddleName+' '+New_LastName end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_namechange.Rows.Count > 0)
            {
                string CaseID = check_namechange.Rows[0]["CaseID"].ToString();
                ViewBag.Name = check_namechange.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                if (check_Doctordata.Rows.Count > 0)
                {
                    string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
                    ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                    DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                    DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                    DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                    ViewBag.qual = dt_qual;
                    ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                    ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                    Message = "success";
                }
                else
                {
                    Message = "This Entry Cannot be Verified";
                }
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;

        return View();
    }
    public ActionResult VeryfyCertificate(string value)
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        var qstring = value;
        var decodedStr = MRPLookup.Decrypt1(qstring);
        var splitedString = decodedStr.Split('-');
        var Regd_type = splitedString[0];
        var regd_id = splitedString[1];
        var db = "";
        var qual_db = "";
        //string regdtype=
        switch (Regd_type)
        {
            case "RRE":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "FRS":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "PROV":
                db = "pisl_prov_registration_mst";
                qual_db = "pisl_prov_regi_qual_mst";
                break;

            default:
                Message = "This certificate cannnot be verified";
                break;

        }
        var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
        if (check_Doctordata.Rows.Count > 0)
        {
            string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
            DataTable dt_Documents = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
            DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign' ");

        }
        else
        {
            Message = "This Entry Cannot be Verified";
        }
        return Json("", JsonRequestBehavior.AllowGet);
    }
    public ActionResult letterverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["letter"];
            string Regd_type = "";
            string regd_id = "";
            string ID = "";
            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["letter"]);
            var splitedString = decodedstr.Split('-');
            ID = splitedString[0];
            Regd_type = splitedString[1];
            regd_id = splitedString[2];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            //switch ()
            //{
            //    case "RRE":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "FRS":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "PROV":
            //        db = "pisl_prov_registration_mst";
            //        qual_db = "pisl_prov_regi_qual_mst";
            //        break;

            //    default:
            //        Message = "This certificate cannnot be verified";
            //        break;

            //}
            var letter_type = "";
            var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,date_approved,drg_from,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "ID='" + ID + "' and Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_Doctordata.Rows.Count > 0)
            {
                switch (check_Doctordata.Rows[0]["drg_from"].ToString())
                {
                    case "noc":
                        letter_type = "No Objection Certificate";
                        break;

                    case "gdst":
                        letter_type = "Good Standing Certificate";
                        break;
                }
                ViewBag.lettertype = letter_type;
                ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("pisl_fresh_regi_qual_mst", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='Sign'");
                if (!string.IsNullOrEmpty(check_Doctordata.Rows[0]["date_approved"].ToString()))
                {
                    ViewBag.DateApproved = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).ToString("dd MMMM,yyyy");
                    ViewBag.expiry = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).AddDays(-1).AddMonths(6).ToString("dd MMMM, yyyy");
                }
                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(ID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                Message = "This Entry Cannot be Verified";
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;
        return View();
    }
    public ActionResult Regi_search()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public ActionResult search_ur_dr()
    {

        return View();
    }
    public ActionResult regi_search_submit(string Regid, string Types)
    {
        try
        {


            string regid = Request.QueryString["Regd_ID"];
            string type = Request.QueryString["Type"]; ;
            //string type = frm["type"].Trim();
            //string regid = frm["regid"].Trim();
            string colname = "*";
            string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "' ORDER BY S_No DESC";
            DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
            if (dt.Rows.Count > 0)
            {
                DateTime ddob = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                DateTime dapproved = Convert.ToDateTime(dt.Rows[0]["date_approved"].ToString());
                DateTime dexpiry = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                ViewBag.dateapproved = dapproved.ToShortDateString();
                ViewBag.expirydate = dexpiry.ToShortDateString();
                ViewBag.dob = ddob.ToShortDateString();
                ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


                DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
                if (result_remarks.Rows.Count > 0)
                {
                    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    {
                        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    }
                }
                DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
                if (qualificationdt.Rows.Count > 0)
                {
                    ViewBag.qualdata = qualificationdt;
                }

            }
            return View();
        }
        catch (Exception ex)
        {
            return View();
        }
    }
    public ActionResult regi_search_submits(FormCollection frm)
    {

        string clientCaptcha = frm["CL_CAPCHA"].ToString();
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;

            return Json("-1");
        }
        string msg = "";
        //string type = Regd_ID;
        //string regid = Type;
        string type = frm["type"].Trim();
        string regid = frm["regid"].Trim();
        string colname = "*";
        string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
        if (dt.Rows.Count > 0)
        {
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
            if (result_remarks.Rows.Count > 0)
            {
                for (int i = 0; i < result_remarks.Rows.Count; i++)
                {
                    ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                }
            }
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult search_ur_dr_submit(FormCollection frm)
    {
        try
        {



            string First_Name = Request.QueryString["First_Name"];
            string Last_Name = frm["Last_Name"];
            string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
            string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
            string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
            string Mobile = Request.QueryString["Mobile"];
            string Email = Request.QueryString["Email"];

            if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Last_Name) && !string.IsNullOrEmpty(Corr_Add_Line_1) && !string.IsNullOrEmpty(Corr_Add_Line_2) && !string.IsNullOrEmpty(Corr_Add_Pincode) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Mobile='" + Mobile + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}

                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "Email='" + Email + "' and Mobile='" + Mobile + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }


            return View();
        }
        catch (Exception ex)
        {
            return View();

        }
    }


    public ActionResult search_ur_dr_submit2(FormCollection frm)
    {
        string msg = "";
        string First_Name = frm["First_Name"];
        string Last_Name = frm["Last_Name"];
        string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
        string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
        string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
        string Mobile = frm["Mobile"];
        string Email = frm["Email"];

        string condtions = "First_Name='" + First_Name.Trim() + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
        if (dt.Rows.Count > 0)
        {
            //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
            //if (result_remarks.Rows.Count > 0)
            //{
            //    for (int i = 0; i < result_remarks.Rows.Count; i++)
            //    {
            //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
            //    }
            //}
            string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", condtions2);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        else
        {
            msg = "Not Data Found";
        }


        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult cme()
    {
        return View();
    }
    public ActionResult status_comp2021()
    {
        return View();
    }

    public ActionResult ForgetEmailPasswordProv()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public dynamic getForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB)
    {
        //select pu.First_Name,pu.Last_Name,pu.email,pu.Mobile from pisl_users as pu inner join pisl_prov_regi_qual_mst as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type where pu.Regd_ID = 18430 and pu.DOB = '1991-10-26' and pfq.passing_date = 2016 and pfq.quali_course = 'M.B.B.S.'
        List<dynamic> OBJ = new List<dynamic>();
        string dob = lk.convertdate1(txt_DOB);
        try
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else {
                db = "pisl_fresh_regi_qual_mst";
            }

            DataTable dt1 = dal.GetList("pisl_users as pu inner join "+db+" as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType.ToUpper() + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                OBJ.Add(MRPLookup.Convert_DatatableToList(dt1).ToList());
                return Json(OBJ, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        catch (Exception)
        {

            return null;
        }
        
    }

    public string otpForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail)
    {
        string message = string.Empty;
        string dob = lk.convertdate1(txt_DOB);
        string db = "";
        if (txtRegType.ToUpper() == "PROV")
        {
            db = "pisl_prov_regi_qual_mst";
        }
        else
        {
            db = "pisl_fresh_regi_qual_mst";
        }
        DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
        if (dt1.Rows.Count > 0)
        {
            MailFormat mf = new MailFormat();
            string code = MRPLookup.RandamStringGenerator1();
            Session["provotp"] = code;
            string mailBody = "Your OTP is: " + code + ". DMC";
            string sendmailStatus= MRPLookup.sendMail(txtEmail.Trim(), "DMC | OTP Verification", mailBody, "", "");


            //string mailBody = mf.SendCodeOnMail(dt1.Rows[0]["First_Name"].ToString(), code);
            //string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(),"Reset Password Code" + System.DateTime.Now + "", mailBody, "", "");
            if (sendmailStatus != "Technical issue! Please try agiain")
            {
                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

            }
            else
            {
                message = sendmailStatus;
            }


            return message;
        }
        return "Some thing went wrong...!";
    }

    public string submitForgetEmailPasswordProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail, string txtMobileNo,string CaptchaCaseID,string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (Session["provotp"].ToString()!=txtCode)
        {
            return "Otp incorrect";
        }

        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact Captcha as written below.";
            // return message;
        }
        else
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else
            {
                db = "pisl_fresh_regi_qual_mst";
            }
            string dob = lk.convertdate1(txt_DOB);
            DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile,pu.Regd_ID,pu.Regd_Type", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                if (Convert.ToString(dt1.Rows[0]["Regd_ID"]) != "" && Convert.ToString(dt1.Rows[0]["Regd_Type"]) != "")
                {
                      string colValue = "Email='" + txtEmail.Trim() + "',Mobile='" + txtMobileNo.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                      updPassword = dal.Updation("pisl_users", colValue, "Regd_ID='"+dt1.Rows[0]["Regd_ID"].ToString()+ "' and Regd_Type='"+ dt1.Rows[0]["Regd_Type"].ToString() + "'");
               
                   
                     var tblCurrentStatuscolomns = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                     var Currentupdatestatuss = dal.Updation("pisl_temp_registrations", tblCurrentStatuscolomns, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");

                    var tblCurrentStatuscolomns1 = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                    var Currentupdatestatuss1 = dal.Updation("pisl_fresh_registration_mst", tblCurrentStatuscolomns1, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");



                    message = "Your Email and Mobile Changed successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                    //MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                   // Send SMS and mail for password reset.
                }
                else
                {
                    message = "Please try after some time";
                }
            }
            else
            {
                message = "Data Not found..!";
            }
        }
        return message;
    }
    public string sendOTP(string EmailId)
    {
        string message = "";
        string cond = "email='" + EmailId + "'";
        DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
        if (dtLogin.Rows.Count > 0)
        {
            string mobile = dtLogin.Rows[0]["Mobile"].ToString();
            Session["otp"] = GetRandomText();
            string OTP = Session["otp"].ToString();
            //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
            string mailBody = "Your OTP is: " + OTP + ". DMC";
            MRPLookup.sendMail(EmailId.Trim(), "DMC | OTP Verification", mailBody, "", "");
            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
            MRPLookup.SendSMS("otp", mobile.Trim(), "", "", OTP, "", "", "", "", "", "", "");
            message = "Please check your email or Mobile for OTP";
        }
        else
        {
            message = "Email not found, Please enter a valid email";
        }
        return message;
    }

    public ActionResult ChangePassward(FormCollection frm)
    {
        string Result = "";
        if (frm["txtOTP"].ToString() == Session["OTP"].ToString())
        {
            if (frm["txt_password"].Length >= 8 && frm["txt_password"].Length <= 18)
            {
                Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                Boolean foundMatch = regexObj.IsMatch(frm["txt_password"]);
                if (foundMatch == true)
                {
                    string where = "email='" + frm["txt_email"] + "'";// and Mobile='"+ frm["txt_contactno"] + "'";
                    DataTable dt_dr_details = dal.GetList("pisl_users", "*", where);
                    if (dt_dr_details != null)
                    {
                        if (dt_dr_details.Rows.Count > 0)
                        {
                            string pass = Encrypt(frm["txt_password"].Trim());
                            string col = " password='" + pass + "'";
                            var update = dal.Updation("pisl_users", col, "email='" + dt_dr_details.Rows[0]["email"].ToString() + "'");
                            if (update == 0)
                            {
                                string hostName = Dns.GetHostName();
                                string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                string colName = "activity,email,password,ip,system,description,date";
                                string colValue = "'Change Passs','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + frm["txt_password"].ToString().Trim() + "','" + IP + "','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + pass + "',getdate()";
                                int ins = dal.insertion("tbl_activity", colName, colValue);
                                string message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                MRPLookup.SendSMS("forgot_pwd", dt_dr_details.Rows[0]["Mobile"].ToString(), dt_dr_details.Rows[0]["First_Name"].ToString(), dt_dr_details.Rows[0]["Last_Name"].ToString(), "", "", dt_dr_details.Rows[0]["email"].ToString(), frm["txt_password"].ToString().Trim(), "", "", "", "");
                                Result = "0";
                            }
                            else
                            {
                                Result = "Somthing wrong Error !";
                            }
                        }
                        else
                        {
                            Result = "This is not registered email please check.";
                        }
                    }
                }
                else
                {
                    Result = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                }
            }
            else
            {
                Result = "Password Length must between 8 to 18 letters";
            }
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
    public ActionResult verifyOTP(string otp)
    {
        string Result = "";
        if (otp == Session["otp"].ToString())
        {
            Result = "DONE";
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
}
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using DelhimedicalcouncilORG;
using System.Data;
using System.Security.Cryptography;
using System.Text;
using System.IO;
using System.Drawing;
using System.Net;
using System.Net.Mail;

using System.Text.RegularExpressions;
using System.Data.SqlClient;
using System.Configuration;

namespace DelhimedicalcouncilORG.Controllers
{
public class homeController : Controller
{
    // GET: home
    DAL dal = new DAL();
    MRPLookup lk = new MRPLookup();
    MailFormat mf = new MailFormat();


    private string RetrieveContent(string webPage)
    {
        HttpWebResponse response = null;//used to get response
        StreamReader respStream = null;//used to read response into string
        try
        {
            //create a request object using the url passed in
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(webPage);
            request.Timeout = 10000;

            //go get a response from the page
            response = (HttpWebResponse)request.GetResponse();

            //create a streamreader object from the response
            respStream = new StreamReader(response.GetResponseStream());

            //get the contents of the page as a string and return it
            return respStream.ReadToEnd();
        }
        catch (Exception ex)//houston we have a problem!
        {
            throw ex;
        }
        finally
        {
            //close it down, we’re going home!
            response.Close();
            respStream.Close();
        }
    }

    //using a regular expression, find all of the href or urls
    //in the content of the page
    private void GetAllUrls(string content)
    {
        //regular expression
        string pattern = @"(?:href\s*=)(?:[\s""']*)(?.*?)(?:[\s>""'])";

        //Set up regex object
        Regex RegExpr = new Regex(pattern, RegexOptions.IgnoreCase);

        //get the first match
        Match match = RegExpr.Match(content);

        //loop through matches
        while (match.Success)
        {

            //output the match info
            Console.WriteLine("href match: " + match.Groups[0].Value);
            //WriteToLog(@"C:\matchlog.txt", "href match: " + match.Groups[0].Value + "\r\n");

            Console.WriteLine("Url match: " + match.Groups[1].Value);
            //WriteToLog(@"C:\matchlog.txt", "Url | Location | mailto match: " + match.Groups[1].Value + "\r\n");

            //get next match
            match = match.NextMatch();
        }
    }

    //Write to a log file
    //private void WriteToLog(string file, string message)
    //{
    //using (StreamWriter w = File.AppendText(file))
    //{
    //w.WriteLine(DateTime.Now.ToString() + ": " + message); w.Close();
    //}
    //}




    /// <summary>
    /// ////////////////////////
    /// </summary>
    /// <returns></returns>
    /// 

    public ActionResult Index()
    {




        return View();
    }
    //Start Login//
    public ActionResult login()
    {
        // Session["CAPTCHA"] = "111111";// GetRandomText();
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }

    
    public string Login_Form(string EmailId, string password, string ip, string captcha)
    
    {



        var dateTime = DateTime.Now;
        var tt = dateTime.Hour;


        var dayOfWeek = dateTime.DayOfWeek;
        var day = dayOfWeek.ToString();

        //Decrypt("","");
        //70789
        //554e981f4946f37a4818f1cea3928fe3
        //drtushargupta90@gmail.com
        string message = string.Empty;
        string clientCaptcha = captcha;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            ViewBag.CaptchaError = "Sorry, please write exact text as written above.";
            message = "11,11";
            return message;
        }
        else
            if (Session["checkSession"] == null)
        {
            ip = Request.ServerVariables["REMOTE_ADDR"].ToString();

            string pass = Encrypt(password);
            // string decoded = MRPLookup.Decrypt1(HttpUtility.UrlDecode(pass));
            string cond = "email='" + EmailId + "' and password='" + pass + "' and active!=3 ";//and active=1
            DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
            if (dtLogin.Rows.Count > 0)
            {
                if (Convert.ToString(dtLogin.Rows[0]["Regd_Type"]) == "PROV" && dtLogin.Rows.Count == 1)
                {
                    DataTable dt_temp_D = dal.GetList("pisl_temp_registrations", "Regd_ID,Regd_Type,Final_Status,Approved_By,date_approved,type", "email='" + EmailId.Trim() + "' order by ID desc");
                    for (int i = 0; i < dt_temp_D.Rows.Count; i++)
                    {
                        if (Convert.ToString(dt_temp_D.Rows[i]["Regd_Type"]) != "PROV" && Convert.ToString(dt_temp_D.Rows[i]["Final_Status"]) == "Approved" && Convert.ToString(dt_temp_D.Rows[i]["Approved_By"]) != null && Convert.ToString(dt_temp_D.Rows[i]["date_approved"]) != null && Convert.ToString(dt_temp_D.Rows[i]["type"]) != "service")
                        {



                            string colnameWithValue = "Regd_ID=" + Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]) + ",Regd_Type='" + dt_temp_D.Rows[i]["Regd_Type"].ToString() + "'";
                            string conditions = "S_No=" + Convert.ToInt32(dtLogin.Rows[0]["S_No"]) + "";
                            var Update_paymentUpdate = dal.Updation("pisl_users", colnameWithValue, conditions);
                            if (Update_paymentUpdate == 0)
                            {
                                dtLogin.Rows[0]["Regd_ID"] = Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]);
                                dtLogin.Rows[0]["Regd_Type"] = dt_temp_D.Rows[i]["Regd_Type"].ToString();

                            }
                            break;
                        }
                    }
                }


                for (int i = 0; i < dtLogin.Rows.Count; i++)
                {
                    string hash = Convert.ToString(dtLogin.Rows[i]["hash"]);
                    string decryptedstring = Decrypt(pass, hash);

                    string gid = Convert.ToString(dtLogin.Rows[i]["GID"]);
                    //string active = Convert.ToString(dtLogin.Rows[0]["active"]);
                    if (gid == "0")//Login for doctor
                    {
                        //DataTable dt_lastloginRecord = dal.GetList("pisl_users where email='" + EmailId + "' order by S_No desc", "TOP 1 *", "");
                        if (dtLogin != null && dtLogin.Rows.Count > 0)
                        {

                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[i]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[i]["Regd_Type"]);
                            }
                            else
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                            }
                            if (dtLogin.Rows[i]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[i]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }

                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                        }
                        else
                        {
                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[0]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            }
                            if (dtLogin.Rows[0]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }
                        }


                        message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 2;
                    }
                    else if (gid == "1")//Login for internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["isno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 1;
                            }
                            else
                            {
                                message = "0,6";
                            }
                        }

                        else
                        {
                            message = "0,5";
                        }
                    }
                    else if (gid == "2")//Login for admin and internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["asno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 3;
                            }
                            else
                            {
                                message = "0,6";
                            }

                        }
                        else
                        {
                            message = "0,5";
                        }
                    }
                }
            }
            else
            {
                message = "0,0";
            }
        }
        else
        {
            message = "10,10";
        }
        return message;
    }

    public string Encrypt(string password)
    {
        // Decrypt("", "");
        //string password = @"1234abcd";

        // byte array representation of that string
        byte[] encodedPassword = new UTF8Encoding().GetBytes(password);

        // need MD5 to calculate the hash
        byte[] hash = ((HashAlgorithm)CryptoConfig.CreateFromName("MD5")).ComputeHash(encodedPassword);

        // string representation (similar to UNIX format)
        string encoded = BitConverter.ToString(hash)
           // without dashes
           .Replace("-", string.Empty)
           // make lowercase
           .ToLower();
        return encoded;
    }
    public string Decrypt(string password, string hash1)
    {//https://md5decrypt.net/#answer
        string ss = "";
        string source = "zdNot3oAz5I%3DjRspJg78a%2FY%3D";// "Hello World!";
        MD5 md5 = System.Security.Cryptography.MD5.Create();
        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(password);
        byte[] hash = md5.ComputeHash(inputBytes);

        // step 2, convert byte array to hex string
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < hash.Length; i++)
        {
            sb.Append(hash[i].ToString("X2"));
        }
        return sb.ToString();
    }
    static string GetMd5Hash(MD5 md5Hash, string input)
    {

        // Convert the input string to a byte array and compute the hash.
        byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));

        // Create a new Stringbuilder to collect the bytes
        // and create a string.
        StringBuilder sBuilder = new StringBuilder();

        // Loop through each byte of the hashed data 
        // and format each one as a hexadecimal string.
        for (int i = 0; i < data.Length; i++)
        {
            sBuilder.Append(data[i].ToString("x2"));
        }

        // Return the hexadecimal string.
        return sBuilder.ToString();
    }
    public FileResult GetCaptchaImage()
    {
        MemoryStream ms = new MemoryStream();
        if (Session["CAPTCHA"] != null)
        {
            string text = Session["CAPTCHA"].ToString();

            //first, create a dummy bitmap just to get a graphics object
            Image img = new Bitmap(1, 1);
            Graphics drawing = Graphics.FromImage(img);

            Font font = new Font("Jokerman", 15);
            //measure the string to see how big the image needs to be
            SizeF textSize = drawing.MeasureString(text, font);

            //free up the dummy image and old graphics object
            img.Dispose();
            drawing.Dispose();

            //create a new image of the right size
            img = new Bitmap((int)textSize.Width + 40, (int)textSize.Height + 20);
            drawing = Graphics.FromImage(img);

            Color backColor = Color.SeaShell;
            Color textColor = Color.Red;
            //paint the background
            drawing.Clear(backColor);

            //create a brush for the text
            Brush textBrush = new SolidBrush(textColor);

            drawing.DrawString(text, font, textBrush, 20, 10);

            drawing.Save();

            font.Dispose();
            textBrush.Dispose();
            drawing.Dispose();


            img.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
            img.Dispose();

            return File(ms.ToArray(), "image/png");
        }
        else
        {
            return File(ms.ToArray(), "image/png");
        }
    }
    private string GetRandomText()
    {
        StringBuilder randomText = new StringBuilder();
        string alphabets = "12345679ABCEFGHKLMNPRSTUVWXZ";
        Random r = new Random();
        for (int j = 0; j <= 5; j++)
        {
            randomText.Append(alphabets[r.Next(alphabets.Length)]);
        }
        return randomText.ToString();
    }
    //End Login//
    public ActionResult signup()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    [HttpPost]
    public string sendotpsignup(string txt_Email, string txt_ContactNo)
    {
        string msg = "";
        try
        {
            var CheckEmail = IsEmailandMobileExists(txt_Email, "");
            var checkMobile = IsEmailandMobileExists("", txt_ContactNo);
            if (CheckEmail == false && checkMobile == false)
            {

                Session["otp"] = GetRandomText();
                string OTP = Session["otp"].ToString();
                //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
                string mailBody = "Your OTP is: " + OTP + ". DMC";
                MRPLookup.sendMail(txt_Email.Trim(), "DMC | OTP Verification", mailBody, "", "");

                //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
              

                MRPLookup.SendSMS("otp", txt_ContactNo.Trim(), "", "", OTP, "", "", "", "", "", "", "");
                msg = "0";
            }
            else if (CheckEmail == true && checkMobile == true)
            {
                msg = "Email and Mobile no. are already exists!!";
            }
            else
            {
                if (checkMobile == true && CheckEmail == false)
                {
                    msg = "Mobile No. is Already Exists!!";
                }
                else if (CheckEmail == true && checkMobile == false)
                {
                    msg = "Email Address is Already Exists!!";
                }


            }
        }
        catch (Exception ex)
        {
            msg = "1";
        }
        return msg;
    }
    public bool IsEmailandMobileExists(string email, string mobile)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        try
        {
            tableName = "pisl_users";
            colname = "*";
            if (!string.IsNullOrEmpty(email))
            {
                cond = "email='" + email + "'";
            }
            if (!string.IsNullOrEmpty(mobile))
            {
                cond = "mobile='" + mobile + "'";
            }
            //cond=
            DataTable dt_datacheck = dal.GetList(tableName, colname, cond);
            if (dt_datacheck != null && dt_datacheck.Rows.Count > 0)
            {
                IsExists = true;
            }

        }
        catch (Exception ex)
        {
            IsExists = false;
            throw;
        }
        return IsExists;
    }

    public ActionResult IsDocDataExists(string regd_type, string regd_no, string DOB, string PassingYear)
    {
        //List<dynamic> list = new List<dynamic>();
        string message = "";
        try
        {
            var tbl_name = "";

            var userExists = IsRegd_Exists(regd_type, regd_no, DOB, PassingYear, out tbl_name);
            if (userExists == true && tbl_name == "pisl_users")
            {

                message = "Already Registered With us. Please Login With Your Credential";
            }
            else
                if (userExists == true && tbl_name == "pisl_fresh_registration_mst")
            {
                message = "Your Registration No. is Expired. Please SignUp Again.";
            }
            else
            {
                message = "NotExists";
                //message = "Your Registration No. is Not Exists!";
            }
        }
        catch (Exception ex)
        {

        }
        return Json(message, JsonRequestBehavior.AllowGet);
    }
    public bool IsRegd_Exists(string regd_type, string regd_no, string DOB, string PassingYear, out string Tbl_Name)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        Tbl_Name = "";
        DataTable dt_UserCheck = null;
        try
        {
            tableName = "pisl_users";
            colname = "*";
            cond = "Regd_Type='" + regd_type + "' and Regd_ID='" + regd_no.Trim() + "'";
            dt_UserCheck = dal.GetList(tableName, colname, cond);
            if (dt_UserCheck == null || dt_UserCheck.Rows.Count == 0)
            {
                tableName = "pisl_fresh_regi_qual_mst";
                colname = "*";
                cond = "quali_type='Basic Qualification' AND Regd_ID='" + regd_no + "' "
                    + "AND Regd_Type='" + regd_type + "' AND passing_date =  '" + PassingYear.Trim() + "'";
                dt_UserCheck = dal.GetList(tableName, colname, cond);
                if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                {
                    Tbl_Name = "pisl_fresh_regi_qual_mst";

                    tableName = "pisl_fresh_registration_mst";
                    colname = "*";
                    cond = "Regd_ID='" + regd_no + "' AND Regd_Type='" + regd_type + "'";
                    dt_UserCheck = dal.GetList(tableName, colname, cond);
                    if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                    {
                        Tbl_Name = "pisl_fresh_registration_mst";
                        IsExists = true;
                    }
                    else
                    {
                        IsExists = false;
                    }
                }
                else
                {

                    IsExists = false;
                }
            }
            else
            {
                Tbl_Name = "pisl_users";
                IsExists = true;
            }
        }
        catch (Exception ex)
        {


            throw;
        }
        return IsExists;
    }

    [HttpPost]
    public string createsignup(string txt_Email, string txt_ContactNo, string txt_FirstName, string txt_MiddleName,
        string txt_LastName, string txt_Password, string txt_ConfirmPassword, string txt_DOB, bool chk_TermCondition,
        string Captcha, string Regd_ID, string txtOTP, string ddl_regType, string txt_oldData, string passingYear)
    {
        string message = "";
        string dob = lk.convertdate1(txt_DOB);
        string Tbl_Name = "";
        try
        {
            if (!IsEmailandMobileExists(txt_Email, ""))
            {
                if (!IsEmailandMobileExists("", txt_ContactNo))
                {
                    if (ddl_regType == "FRS" || ddl_regType == "RRE")
                    {
                        if (IsRegd_Exists(ddl_regType, Regd_ID, dob, passingYear, out Tbl_Name))
                        {
                            Tbl_Name = Tbl_Name;
                            if (Tbl_Name == "pisl_users")
                            {
                                //if Pisl_user Table Record Exists but no Email and Mobile No exists
                                //in this case update the Email and Mobile No.
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        DataTable dt_Email_Mobile_Check = dal.GetList("pisl_users",
                                                        "top 1*", " Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                        if (dt_Email_Mobile_Check != null)
                                                        {
                                                            if (dt_Email_Mobile_Check.Rows.Count > 0)
                                                            {
                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_Email_Mobile_Check.Rows[0]["email"])))
                                                                {
                                                                    string pass = Encrypt(txt_Password.Trim());
                                                                    string hash = Encrypt(MRPLookup.RandamStringGenerator1());
                                                                    var updateDt = dal.Updation("pisl_users",
                                                                        "email='" + txt_Email.Trim() + "',mobile='" + txt_ContactNo.Trim() + "',password='" + pass + "',hash='" + hash + "'",
                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                    if (updateDt == 0)
                                                                    {
                                                                        DataTable dt_fresh_Check = dal.GetList("pisl_fresh_registration_mst",
                                                                            "top 1 * ",
                                                                            "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                        if (dt_fresh_Check != null)
                                                                        {
                                                                            if (dt_fresh_Check.Rows.Count > 0)
                                                                            {
                                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_fresh_Check.Rows[0]["Email"])))
                                                                                {
                                                                                    var updateDt_fresh = dal.Updation("pisl_fresh_registration_mst",
                                                                                        "Email='" + txt_Email.Trim() + "',Mobile='" + txt_ContactNo.Trim() + "'",
                                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");

                                                                                    if (updateDt_fresh != 0)
                                                                                    {
                                                                                        message = "Error!!";
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                                        MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                                        message = "Please, Check Your Mail For Login Details";
                                                                        //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                                        MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                                    }
                                                                    else
                                                                    {
                                                                        message = "Error!!";
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    message = "Your record are already Exists with us!!";
                                                                }
                                                            }
                                                        } //End Updation
                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }
                            else if (Tbl_Name == "pisl_fresh_regi_qual_mst" || Tbl_Name == "pisl_fresh_registration_mst")
                            {
                                //Insert Login Record in Pisl_Users
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        string pass = Encrypt(txt_Password.Trim());
                                                        string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                        if (string.IsNullOrEmpty(Regd_ID))
                                                        {
                                                            Regd_ID = "0";
                                                        }
                                                        //if (txt_oldData != "")
                                                        //{
                                                        //    string colnamemst = "*";
                                                        //    string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        //    DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        //    if (dtrmst.Rows.Count > 0)
                                                        //    {
                                                        //        string oldtype = "";
                                                        //        if (ddl_regType == "FRS")
                                                        //        {
                                                        //            oldtype = "service";
                                                        //        }
                                                        //        else if (ddl_regType == "RRE")
                                                        //        {
                                                        //            oldtype = "reregi";
                                                        //        }
                                                        //        var corrAddress1 = dtrmst.Rows[0]["Corr_Add_Line_1"].ToString();
                                                        //        var corrAddress2 = dtrmst.Rows[0]["Corr_Add_Line_2"].ToString();
                                                        //        var perAddress1 = dtrmst.Rows[0]["Per_Add_Line_1"].ToString();
                                                        //        var perAddress2 = dtrmst.Rows[0]["Per_Add_Line_2"].ToString();

                                                        //        string colNameold = "Regd_ID,Regd_Type,type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,date_entered,Father_Name,POB,Gender,Nationality,Corr_Add_Line_1,Corr_Add_Line_2,Corr_Add_State,Corr_Add_Pincode,Corr_Add_Country,Per_Add_Line_1,Per_Add_Line_2,Per_Add_Line_State,Per_Add_Line_Pincode,Per_Add_Line_Country";

                                                        //        string colValueold = "'" + Regd_ID + "','" + ddl_regType + "','" + oldtype + "','" + txt_FirstName + "','" + txt_MiddleName + "','"  + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "', '"+ lk.GetDateTime()+ "' ,'"+ dtrmst.Rows[0]["Father_Name"] + "','" + dtrmst.Rows[0]["POB"] + "','" + dtrmst.Rows[0]["Gender"] + "','" + dtrmst.Rows[0]["Nationality"] + "','" + corrAddress1 + "','" + corrAddress2 + "','" + dtrmst.Rows[0]["Corr_Add_State"] + "','" + dtrmst.Rows[0]["Corr_Add_Pincode"] + "','" + dtrmst.Rows[0]["Corr_Add_Country"] + "','" + perAddress1 + "','" + perAddress2 + "','" + dtrmst.Rows[0]["Per_Add_Line_State"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Pincode"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Country"] + "'";
                                                        //        int insold = dal.insertion("pisl_temp_registrations", colNameold, colValueold);
                                                        //    }
                                                        //}
                                                        Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                        string colnamemst = "*";
                                                        string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        DateTime txtdob1 = Convert.ToDateTime(dtrmst.Rows[0]["DOB"]);
                                                        string txtdob = txtdob1.ToShortDateString();

                                                        string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                            + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                        string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + dtrmst.Rows[0]["First_Name"].ToString() + "','" + dtrmst.Rows[0]["Middle_Name"].ToString() + "',"
                                                            + "'" + dtrmst.Rows[0]["Last_Name"].ToString() + "','" + txtdob + "','" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                            + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                        int ins = dal.insertion("pisl_users", colName, colValue);
                                                        if (ins == 0)
                                                        {
                                                            string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                            MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                            message = "Please, Check Your Mail For Login Details";
                                                            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                            MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                        }
                                                        else
                                                        {
                                                            message = "Try after some time";
                                                        }

                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }

                        }
                        else
                        {
                            message = "Your Registration No and Passing Year is Not Exist with Us";
                        }
                    }
                    else
                    {
                        //Insert Login Record in Pisl_Users
                        if (chk_TermCondition == true)
                        {
                            if (txtOTP == Session["otp"].ToString())
                            {
                                if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                {
                                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                    Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                    if (foundMatch == true)
                                    {
                                        if (txt_Password == txt_ConfirmPassword)
                                        {
                                            if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                            {
                                                //if (Tbl_Name== "pisl_users") { }
                                                string pass = Encrypt(txt_Password.Trim());
                                                string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                if (string.IsNullOrEmpty(Regd_ID))
                                                {
                                                    Regd_ID = "0";
                                                }
                                                Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                if (ddl_regType == "-1")
                                                {
                                                    ddl_regType = "";
                                                }


                                                string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                    + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                int ins = dal.insertion("pisl_users", colName, colValue);
                                                if (ins == 0)
                                                {
                                                    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                    message = "Please, Check Your Mail";
                                                    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                }
                                                else
                                                {
                                                    message = "Try after some time";
                                                }

                                                //string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                //    + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                //string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                //    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                //    + "1,0,0,'"+ lk.GetDateTime()+ "','','" + Regd_ID1 + "'";
                                                //int ins = dal.insertion("pisl_users", colName, colValue);
                                                //if (ins == 0)
                                                //{
                                                //    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                //    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                //    message = "Please, Check Your Mail";
                                                //    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                //    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                //}
                                                //else
                                                //{
                                                //    message = "Try after some time";
                                                //}
                                            }
                                            else
                                            {
                                                message = "Enter A Valid Email";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password and Confrim Password is Not Same";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                    }
                                }
                                else
                                {
                                    message = "Password Length must between 8 to 18 letters";
                                }
                            }
                            else
                            {
                                message = "Enter the Valid OTP";
                            }
                        }
                        else
                        {
                            message = "Please check the Terms and Conditions";
                        }

                        //}
                    }
                }
                else
                {
                    message = "Mobile No. is Already Exists";
                }
            }
            else
            {
                message = "Email Already exists!!";
            }
            //
            //Cut the Code From There

        }
        catch
        {

        }
        return message;
    }

    public ActionResult SignupVerification()
    {
        string message = "";
        try
        {
            if (Request.QueryString["email"] != null && Request.QueryString["hash"] != null)
            {
                string email = Request.QueryString["email"];
                string hash = Request.QueryString["hash"];
                string cond = "Email='" + email.Trim() + "' and Hash='" + hash.Trim() + "' and Active=0";
                DataTable dt = dal.GetList("pisl_users", "*", cond);
                if (dt.Rows.Count > 0)
                {
                    int upd = dal.Updation("pisl_users", "Active=1", cond);
                    if (upd == 0)
                    {
                        message = "Your account has been activated, you can now login";
                    }
                    else
                    {
                        message = "Try after some time";
                    }
                }
                else
                {
                    message = "The url is either invalid or you already have activated your account.";
                }
            }
            else
            {
                message = "Invalid approach, please use the link that has been send to your email.";
            }
        }
        catch
        { }
        ViewBag.lbl_status = message;
        return View();
    }
    public ActionResult contact()
    {
        return View();
    }

    public ActionResult about()
    {
        return View();
    }
    public ActionResult faqs()
    {
        return View();
    }
    // Start forgot password
    public ActionResult forgotpassword()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public string sendCode(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        string message = string.Empty;
        try
        {
            string clientCaptcha = CaptchaCaseID;
            string serverCaptcha = Session["CAPTCHA"].ToString();
            if (!clientCaptcha.Equals(serverCaptcha))
            {
                ViewBag.ShowCAPTCHA = serverCaptcha;
                message = "Sorry, please write exact text as written below.";
            }
            else
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' ";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string name = Convert.ToString(dt.Rows[0]["First_Name"]);
                                        string Mobile = Convert.ToString(dt.Rows[0]["Mobile"]);

                                        MailFormat mf = new MailFormat();
                                        string code = MRPLookup.RandamStringGenerator1();
                                        string mailBody = mf.SendCodeOnMail(name, code);
                                        MRPLookup.SendSMS("otp", Mobile, "", "", code, "", "", "", "", "", "", "");
                                        string colValue = "Code='" + code.Trim() + "'";
                                        int updCode = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "'");
                                        if (updCode == 0)
                                        {
                                            string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(), "Reset Password Code " + System.DateTime.Now + "", mailBody, "", "");
                                            if (sendmailStatus != "Technical issue! Please try agiain")
                                            {
                                                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

                                            }
                                            else
                                            {
                                                message = sendmailStatus;
                                            }
                                        }
                                        else
                                        {
                                            message = "Please try after some time.";
                                        }

                                    }
                                    else
                                    {
                                        message = "Enter a New Password.";
                                    }
                                }
                                else
                                {
                                    message = "Your Email And Mobile Number Do not Match with DMC Registered Users.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
        }
        catch (Exception ex)
        {

        }
        return message;
    }
    public string forgotpasswordCaseID(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact text as written below.";
            // return message;
        }
        else
        {
            if (txtCode != "0")
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string mobile = Convert.ToString(dt.Rows[0]["Mobile"]);
                                    string firstName = Convert.ToString(dt.Rows[0]["First_Name"]);
                                    string lastName = Convert.ToString(dt.Rows[0]["Last_Name"]);
                                    //string new_password = Encrypt(MRPLookup.RandamStringGenerator1());
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string colValue = "password='" + new_PasswordMD5.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                                        updPassword = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                        if (updPassword == 0)
                                        {
                                            updPassword = dal.Updation("pisl_users", "Code='0'", "Email='" + txtEmail.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                            string hostName = Dns.GetHostName();
                                            string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                            string colName = "activity,email,password,ip,system,description,date";
                                            colValue = "'Change Passs','" + txtEmail + "','" + txtPassword + "','" + IP + "','" + mobile + "','" + new_PasswordMD5 + "',getdate()";
                                            int ins = dal.insertion("tbl_activity", colName, colValue);
                                            message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                            MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                                            // Send SMS and mail for password reset.
                                            

                                        }
                                        else
                                        {
                                            message = "Please try after some time";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please try another password.";
                                    }

                                }
                                else
                                {
                                    message = "Your Details Dont Match or You have NOT registered with DMC.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
            else
            {
                message = "Code not match";
            }
        }
        return message;
    }

    public ActionResult introduction()
    {
        return View();
    }

    public ActionResult powers()
    {
        return View();
    }

    public ActionResult thecouncil()
    {
        return View();
    }

    //public ActionResult gallery()
    //{
    //    return View();
    //}
    public ActionResult Gallery()
    {
        return View();
    }

    public ActionResult accomplishments()
    {
        return View();
    }

    public ActionResult registration()
    {
        return View();
    }
    public ActionResult cmeperforma()
    {
        return View();
    }
    public ActionResult cmeonline()
    {
        return View();
    }
    public ActionResult cmerequirements()
    {
        return View();
    }
    public ActionResult cmepassbook()
    {
        return View();
    }
    public ActionResult duties()
    {
        return View();
    }
    public ActionResult inst_general()
    {
        return View();
    }

    public ActionResult inst_fees()
    {
        return View();
    }
    public ActionResult inst_docupload()
    {
        return View();
    }
    public ActionResult disclaimer()
    {
        return View();
    }
    public ActionResult feestructure()
    {
        return View();
    }
    public ActionResult privacypolicy()
    {
        return View();
    }
    public ActionResult termofuse()
    {
        return View();
    }

    public ActionResult litigations()
    {
        return View();
    }


    public ActionResult council_meeting()
    {
        return View();
    }
    public ActionResult Cme_workshop_Conference()
    {
        return View();
    }

    public ActionResult Media_room()
    {
        return View();
    }
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    public ActionResult LogOut()
    {
        Session.Abandon();
        return RedirectToAction("Index", "Home");
    }
    public ActionResult SearchElectrolData(string regid)
    {
        string msg = "";
        DataTable dtSearch = dal.GetList("tbl_electrolData", "*", "RegNo='" + regid.Trim() + "'");
        if (dtSearch.Rows.Count > 0)
        {
            return Json(MRPLookup.DataTableToJSONWithJSONNet(dtSearch), JsonRequestBehavior.AllowGet);
        }
        else
        {
            msg = "Data not found";
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
    }
    public ActionResult SearchElectrolDataUpdate(string regid)
    {
        int upd = 1;
        upd = dal.Updation("tbl_electrolData", "Status='Completed',Date='" + lk.GetDateTime() + "'", "ID='" + regid.Trim() + "'");
        if (upd == 0)
        {

            return Json(upd, JsonRequestBehavior.AllowGet);
        }
        else
        {
            return Json(upd, JsonRequestBehavior.AllowGet);
        }
    }

    public ActionResult TotalCount()
    {
        DataTable dtcntCompleted = dal.GetList("tbl_electrolData", "count(*) as cntCompleted", "status='Completed'");
        DataTable dtcntNotCompleted = dal.GetList("tbl_electrolData", "count(*) as cntNotCompleted", "status ='Valid'");
        string totalCmpleteStatus = "Completed: " + Convert.ToString(dtcntCompleted.Rows[0]["cntCompleted"]) + "  Not Completed: " + Convert.ToString(dtcntNotCompleted.Rows[0]["cntNotCompleted"]);
        return Json(totalCmpleteStatus, JsonRequestBehavior.AllowGet);
    }
    public ActionResult Renewal_Reminder(string key)
    {
        string msg = "";
        try
        {

            key = "1111";
            string validKey = "1111";
            // MRPLookup.SendSMS("Renewal_expired_tdy", "9899849487", "Dinesh", "", "", "", "", "", "", "", "", "");
            if (key == validKey)
            {
                string expiry_frtyfive = Convert.ToDateTime(DateTime.Now.AddDays(30)).ToString("yyyy-MM-dd");//date(('Y-m-d'), strtotime('+30 days'));
                string expiry_tdy = Convert.ToDateTime(DateTime.Now).ToString("yyyy-MM-dd");//date('Y-m-d');
                string expiry_pastfifty = Convert.ToDateTime(DateTime.Now.AddDays(-50)).ToString("yyyy-MM-dd");// date(('Y-m-d'), strtotime('-50 days'));
                string cond = "(Expiry_Date = '" + expiry_frtyfive + "' OR  Expiry_Date = '" + expiry_tdy + "' OR Expiry_Date = '" + expiry_pastfifty + " ') AND (Mobile !='' OR  Email !='')";
                //DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", cond);
                string strConnString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                SqlConnection con = new SqlConnection(strConnString);
                //SqlConnection con = new SqlConnection(@"Data Source=103.20.212.254,1232;Initial Catalog=dmcaws_New;User Id=sa;Password=bD$x89K3$@K9UaQsKQ");
                //SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-PKTADCN;Initial Catalog=dmcaws1;integrated security=true");
                con.Open();
                SqlCommand cmd = new SqlCommand("select * from pisl_fresh_registration_mst where " + cond + "", con);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                con.Close();
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string First_Name = Convert.ToString(dt.Rows[i]["First_Name"]);
                        string Last_Name = Convert.ToString(dt.Rows[i]["Last_Name"]);
                        string Regd_ID = Convert.ToString(dt.Rows[i]["Regd_ID"]);
                        string Regd_Type = Convert.ToString(dt.Rows[i]["Regd_Type"]);
                        string Mobile = Convert.ToString(dt.Rows[i]["Mobile"]);
                        string Expiry_Date = Convert.ToDateTime(dt.Rows[i]["Expiry_Date"]).ToString("yyyy-MM-dd");
                        string date_approved = Convert.ToDateTime(dt.Rows[i]["date_approved"]).ToString("yyyy-MM-dd");
                        string tdydate = Convert.ToDateTime(System.DateTime.Now).ToString("yyyy-MM-dd");
                        string to = Convert.ToString(dt.Rows[i]["Email"]);

                        string subject1 = "Renewal of Registration with Delhi Medical Council"; //// Give the email a subject
                        string subject2 = "Expiry of Registration with Delhi Medical Council";
                        string subject3 = "Deletion of Regd Number with Delhi Medical Council";
                        string message1 = "";
                        message1 += "Dear Dr " + First_Name + " " + Last_Name + ",";
                        message1 += "Greetings from Delhi Medical Council!!";

                        message1 += "   This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council is due for renewal.";
                        message1 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting ";
                        message1 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message1 += "For inclusion of any additional qualification, please produce the original degree at the office of Delhi Medical Council, so that your additional ";
                        message1 += "qualification certificate can be verified with the original document. The original degree / diploma Certificate will be returned immediately after verification. ";

                        message1 += "<b>This is a system generated email and we request you not to reply to this email. Please ignore if already applied.</b>";

                        message1 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message1 += "Warm Regards,";

                        message1 += "Delhi Medical Council.";
                        message1 += "Ground Floor, B Wing, B Block-1";
                        message1 += "DMCR IT Park, Shastri Park";
                        message1 += "New Delhi-110053";
                        message1 += "Tel: +91-011-46621000";
                        message1 += "Website - www.delhimedicalcouncil.org	 ";

                        string message2 = "";
                        message2 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message2 += "Greetings from Delhi Medical Council!!";

                        message2 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council expired on " + Expiry_Date + " and  is due for renewal. ";

                        message2 += "We request you to kindly renew your registration within thirty days and keep your registration in force. You can renew your registration online by visiting ";
                        message2 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message2 += "Please take note that in case you do not apply for renewal of registration within the stipulated period, your name shall be removed from the State Medical ";
                        message2 += "Register maintained by the Delhi Medical Council in accordance with the provisions of Section 22 of the Delhi Medical Council Act, 1997 which will debar";
                        message2 += "you from practicing Allopathic in the state of Delhi.";

                        message2 += "<b>Kindly ignore this email, in case you have already applied for renewal of registration</b>";

                        message2 += "This is a system generated email and we request you not to reply to this email.";

                        message2 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message2 += "Warm Regards,";

                        message2 += "Delhi Medical Council.";
                        message2 += "Ground Floor, B Wing, B Block-1";
                        message2 += "DMCR IT Park, Shastri Park";
                        message2 += "New Delhi-110053";
                        message2 += "Tel: +91-011-46621000";
                        message2 += "Website - www.delhimedicalcouncil.org";

                        string message3 = "";
                        message3 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message3 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council has expired on " + Expiry_Date + ". You ";
                        message3 += "failed to renew the registration with Delhi Medical Council, in spite of notices/Emails (public / individual) issued for renewal. Hence, in accordance with the ";
                        message3 += "provisions of section 22(3) of Delhi Medical Council Act, 1997; your name under Registration number " + Regd_ID + "-" + Regd_Type + "  has been removed from the State ";
                        message3 += "Medical Register of Delhi Medical Council.";

                        message3 += "Please note that if you wish to have your name re-entered in the State Medical Register of Delhi Medical Council, you may do so, by paying fees as detailed herein below,";
                        message3 += "in addition to fee for renewal of registration (Rs. 2000/-)";

                        message3 += "Late fees for non-renewal of registration:-";
                        message3 += "(a) upto six months from the date from 		Rs. 1000/- (Rupees One Thousand only)";
                        message3 += "    which registration is due for renewal";
                        message3 += "(b) for period more than six months 	    Rs. 2000/- (Rupees One Thousand only)";
                        message3 += "     but upto one year";
                        message3 += "(c) for period more than one year 			Rs. 1000/- (Rupees One Thousand per year and Part thereof)";

                        message3 += "Please also note that any person servicing or practicing modern scientific system of medicine (allopathy) in Delhi without holding valid registration with Delhi Medical Council is liable for action under the provisions of Delhi Medical Council Act, 1997.";
                        message3 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting www.delhimedicalcouncil.org and apply under Online Renewal & Services.";

                        message3 += "<b>Kindly ignore this letter, in case you have already applied for renewal of registration</b>";

                        message3 += "This is a system generated email and we request you not to reply to this email.";

                        message3 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message3 += "Warm Regards,";

                        message3 += "Delhi Medical Council.";
                        message3 += "Ground Floor, B Wing, B Block-1";
                        message3 += "DMCR IT Park, Shastri Park";
                        message3 += "New Delhi-110053";
                        message3 += "Tel: +91-011-46621000";
                        message3 += "Website - www.delhimedicalcouncil.org,";

                        string headers = "From: DMC Registration System <registration@delhimedicalcouncil.org>' . '\r\n'"; // Set from headers

                        string message = "";
                        string subject = "";
                        string trigger = "";
                        string msgtxt = "";
                        if (Convert.ToDateTime(Expiry_Date) > Convert.ToDateTime(tdydate))
                        {
                            message = message1;
                            subject = subject1;
                            trigger = "Renewal_due_reminder";
                            msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Renewal of your DMC Regd No " + Regd_ID + " - " + Regd_Type + " is due. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }

                        }
                        else if (Convert.ToDateTime(Expiry_Date) == Convert.ToDateTime(tdydate))
                        {
                            message = message2;
                            subject = subject2;
                            trigger = "Renewal_expired_tdy";
                            // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Registration of DMC Regd No " + Regd_ID + " - " + Regd_Type + " expired today. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }
                        }
                        //else if (Convert.ToDateTime(Expiry_Date) < Convert.ToDateTime(tdydate))
                        //{
                        //    message = message2;
                        //    subject = subject2;
                        //    trigger = "Renewal_expired_fifty";
                        //   // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Your  ID " + Regd_ID + " - " + Regd_Type + " has been removed from the State Medical Register of DMC . Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                        //    if (!string.IsNullOrEmpty(to))
                        //    {
                        //       // MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //    if (!string.IsNullOrEmpty(Mobile))
                        //    {
                        //       // MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(to))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(Mobile))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}

                    }
                }

            }
            else
            {
                msg = "Key not match";
                string path = "C:\\TestService\\ServiceLog.txt";
                using (StreamWriter writer = new StreamWriter(path, true))
                {
                    writer.WriteLine(string.Format(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt"), DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt")));
                    writer.Close();
                }
            }
        }
        catch
        {

        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult certverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["cert"];
            string Regd_type = "";
            string regd_id = "";

            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["cert"]);
            var splitedString = decodedstr.Split('-');
            Regd_type = splitedString[0];
            regd_id = splitedString[1];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            switch (Regd_type)
            {
                case "RRE":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "FRS":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "PROV":
                    db = "pisl_prov_registration_mst";
                    qual_db = "pisl_prov_regi_qual_mst";
                    break;

                default:
                    Message = "This certificate cannnot be verified";
                    break;

            }

            var check_namechange = dal.GetList("tbl_NameChangeHistory_New", "CaseID,Name=(case when (New_MiddleName is null or  New_MiddleName='') then New_FirstName+' '+New_LastName when (New_MiddleName is null or  New_MiddleName='') and (New_LastName is null or New_LastName='') then New_FirstName else New_FirstName+' '+New_MiddleName+' '+New_LastName end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_namechange.Rows.Count > 0)
            {
                string CaseID = check_namechange.Rows[0]["CaseID"].ToString();
                ViewBag.Name = check_namechange.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                if (check_Doctordata.Rows.Count > 0)
                {
                    string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
                    ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                    DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                    DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                    DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                    ViewBag.qual = dt_qual;
                    ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                    ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                    Message = "success";
                }
                else
                {
                    Message = "This Entry Cannot be Verified";
                }
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;

        return View();
    }
    public ActionResult VeryfyCertificate(string value)
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        var qstring = value;
        var decodedStr = MRPLookup.Decrypt1(qstring);
        var splitedString = decodedStr.Split('-');
        var Regd_type = splitedString[0];
        var regd_id = splitedString[1];
        var db = "";
        var qual_db = "";
        //string regdtype=
        switch (Regd_type)
        {
            case "RRE":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "FRS":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "PROV":
                db = "pisl_prov_registration_mst";
                qual_db = "pisl_prov_regi_qual_mst";
                break;

            default:
                Message = "This certificate cannnot be verified";
                break;

        }
        var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
        if (check_Doctordata.Rows.Count > 0)
        {
            string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
            DataTable dt_Documents = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
            DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign' ");

        }
        else
        {
            Message = "This Entry Cannot be Verified";
        }
        return Json("", JsonRequestBehavior.AllowGet);
    }
    public ActionResult letterverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["letter"];
            string Regd_type = "";
            string regd_id = "";
            string ID = "";
            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["letter"]);
            var splitedString = decodedstr.Split('-');
            ID = splitedString[0];
            Regd_type = splitedString[1];
            regd_id = splitedString[2];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            //switch ()
            //{
            //    case "RRE":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "FRS":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "PROV":
            //        db = "pisl_prov_registration_mst";
            //        qual_db = "pisl_prov_regi_qual_mst";
            //        break;

            //    default:
            //        Message = "This certificate cannnot be verified";
            //        break;

            //}
            var letter_type = "";
            var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,date_approved,drg_from,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "ID='" + ID + "' and Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_Doctordata.Rows.Count > 0)
            {
                switch (check_Doctordata.Rows[0]["drg_from"].ToString())
                {
                    case "noc":
                        letter_type = "No Objection Certificate";
                        break;

                    case "gdst":
                        letter_type = "Good Standing Certificate";
                        break;
                }
                ViewBag.lettertype = letter_type;
                ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("pisl_fresh_regi_qual_mst", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='Sign'");
                if (!string.IsNullOrEmpty(check_Doctordata.Rows[0]["date_approved"].ToString()))
                {
                    ViewBag.DateApproved = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).ToString("dd MMMM,yyyy");
                    ViewBag.expiry = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).AddDays(-1).AddMonths(6).ToString("dd MMMM, yyyy");
                }
                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(ID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                Message = "This Entry Cannot be Verified";
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;
        return View();
    }
    public ActionResult Regi_search()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public ActionResult search_ur_dr()
    {

        return View();
    }
    public ActionResult regi_search_submit(string Regid, string Types)
    {
        try
        {


            string regid = Request.QueryString["Regd_ID"];
            string type = Request.QueryString["Type"]; ;
            //string type = frm["type"].Trim();
            //string regid = frm["regid"].Trim();
            string colname = "*";
            string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "' ORDER BY S_No DESC";
            DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
            if (dt.Rows.Count > 0)
            {
                DateTime ddob = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                DateTime dapproved = Convert.ToDateTime(dt.Rows[0]["date_approved"].ToString());
                DateTime dexpiry = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                ViewBag.dateapproved = dapproved.ToShortDateString();
                ViewBag.expirydate = dexpiry.ToShortDateString();
                ViewBag.dob = ddob.ToShortDateString();
                ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


                DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
                if (result_remarks.Rows.Count > 0)
                {
                    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    {
                        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    }
                }
                DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
                if (qualificationdt.Rows.Count > 0)
                {
                    ViewBag.qualdata = qualificationdt;
                }

            }
            return View();
        }
        catch (Exception ex)
        {
            return View();
        }
    }
    public ActionResult regi_search_submits(FormCollection frm)
    {

        string clientCaptcha = frm["CL_CAPCHA"].ToString();
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;

            return Json("-1");
        }
        string msg = "";
        //string type = Regd_ID;
        //string regid = Type;
        string type = frm["type"].Trim();
        string regid = frm["regid"].Trim();
        string colname = "*";
        string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
        if (dt.Rows.Count > 0)
        {
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
            if (result_remarks.Rows.Count > 0)
            {
                for (int i = 0; i < result_remarks.Rows.Count; i++)
                {
                    ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                }
            }
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult search_ur_dr_submit(FormCollection frm)
    {
        try
        {



            string First_Name = Request.QueryString["First_Name"];
            string Last_Name = frm["Last_Name"];
            string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
            string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
            string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
            string Mobile = Request.QueryString["Mobile"];
            string Email = Request.QueryString["Email"];

            if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Last_Name) && !string.IsNullOrEmpty(Corr_Add_Line_1) && !string.IsNullOrEmpty(Corr_Add_Line_2) && !string.IsNullOrEmpty(Corr_Add_Pincode) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Mobile='" + Mobile + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}

                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "Email='" + Email + "' and Mobile='" + Mobile + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }


            return View();
        }
        catch (Exception ex)
        {
            return View();

        }
    }


    public ActionResult search_ur_dr_submit2(FormCollection frm)
    {
        string msg = "";
        string First_Name = frm["First_Name"];
        string Last_Name = frm["Last_Name"];
        string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
        string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
        string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
        string Mobile = frm["Mobile"];
        string Email = frm["Email"];

        string condtions = "First_Name='" + First_Name.Trim() + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
        if (dt.Rows.Count > 0)
        {
            //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
            //if (result_remarks.Rows.Count > 0)
            //{
            //    for (int i = 0; i < result_remarks.Rows.Count; i++)
            //    {
            //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
            //    }
            //}
            string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", condtions2);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        else
        {
            msg = "Not Data Found";
        }


        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult cme()
    {
        return View();
    }
    public ActionResult status_comp2021()
    {
        return View();
    }

    public ActionResult ForgetEmailPasswordProv()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public dynamic getForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB)
    {
        //select pu.First_Name,pu.Last_Name,pu.email,pu.Mobile from pisl_users as pu inner join pisl_prov_regi_qual_mst as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type where pu.Regd_ID = 18430 and pu.DOB = '1991-10-26' and pfq.passing_date = 2016 and pfq.quali_course = 'M.B.B.S.'
        List<dynamic> OBJ = new List<dynamic>();
        string dob = lk.convertdate1(txt_DOB);
        try
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else {
                db = "pisl_fresh_regi_qual_mst";
            }

            DataTable dt1 = dal.GetList("pisl_users as pu inner join "+db+" as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType.ToUpper() + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                OBJ.Add(MRPLookup.Convert_DatatableToList(dt1).ToList());
                return Json(OBJ, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        catch (Exception)
        {

            return null;
        }
        
    }

    public string otpForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail)
    {
        string message = string.Empty;
        string dob = lk.convertdate1(txt_DOB);
        string db = "";
        if (txtRegType.ToUpper() == "PROV")
        {
            db = "pisl_prov_regi_qual_mst";
        }
        else
        {
            db = "pisl_fresh_regi_qual_mst";
        }
        DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
        if (dt1.Rows.Count > 0)
        {
            MailFormat mf = new MailFormat();
            string code = MRPLookup.RandamStringGenerator1();
            Session["provotp"] = code;
            string mailBody = "Your OTP is: " + code + ". DMC";
            string sendmailStatus= MRPLookup.sendMail(txtEmail.Trim(), "DMC | OTP Verification", mailBody, "", "");


            //string mailBody = mf.SendCodeOnMail(dt1.Rows[0]["First_Name"].ToString(), code);
            //string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(),"Reset Password Code" + System.DateTime.Now + "", mailBody, "", "");
            if (sendmailStatus != "Technical issue! Please try agiain")
            {
                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

            }
            else
            {
                message = sendmailStatus;
            }


            return message;
        }
        return "Some thing went wrong...!";
    }

    public string submitForgetEmailPasswordProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail, string txtMobileNo,string CaptchaCaseID,string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (Session["provotp"].ToString()!=txtCode)
        {
            return "Otp incorrect";
        }

        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact Captcha as written below.";
            // return message;
        }
        else
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else
            {
                db = "pisl_fresh_regi_qual_mst";
            }
            string dob = lk.convertdate1(txt_DOB);
            DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile,pu.Regd_ID,pu.Regd_Type", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                if (Convert.ToString(dt1.Rows[0]["Regd_ID"]) != "" && Convert.ToString(dt1.Rows[0]["Regd_Type"]) != "")
                {
                      string colValue = "Email='" + txtEmail.Trim() + "',Mobile='" + txtMobileNo.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                      updPassword = dal.Updation("pisl_users", colValue, "Regd_ID='"+dt1.Rows[0]["Regd_ID"].ToString()+ "' and Regd_Type='"+ dt1.Rows[0]["Regd_Type"].ToString() + "'");
               
                   
                     var tblCurrentStatuscolomns = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                     var Currentupdatestatuss = dal.Updation("pisl_temp_registrations", tblCurrentStatuscolomns, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");

                    var tblCurrentStatuscolomns1 = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                    var Currentupdatestatuss1 = dal.Updation("pisl_fresh_registration_mst", tblCurrentStatuscolomns1, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");



                    message = "Your Email and Mobile Changed successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                    //MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                   // Send SMS and mail for password reset.
                }
                else
                {
                    message = "Please try after some time";
                }
            }
            else
            {
                message = "Data Not found..!";
            }
        }
        return message;
    }
    public string sendOTP(string EmailId)
    {
        string message = "";
        string cond = "email='" + EmailId + "'";
        DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
        if (dtLogin.Rows.Count > 0)
        {
            string mobile = dtLogin.Rows[0]["Mobile"].ToString();
            Session["otp"] = GetRandomText();
            string OTP = Session["otp"].ToString();
            //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
            string mailBody = "Your OTP is: " + OTP + ". DMC";
            MRPLookup.sendMail(EmailId.Trim(), "DMC | OTP Verification", mailBody, "", "");
            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
            MRPLookup.SendSMS("otp", mobile.Trim(), "", "", OTP, "", "", "", "", "", "", "");
            message = "Please check your email or Mobile for OTP";
        }
        else
        {
            message = "Email not found, Please enter a valid email";
        }
        return message;
    }

    public ActionResult ChangePassward(FormCollection frm)
    {
        string Result = "";
        if (frm["txtOTP"].ToString() == Session["OTP"].ToString())
        {
            if (frm["txt_password"].Length >= 8 && frm["txt_password"].Length <= 18)
            {
                Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                Boolean foundMatch = regexObj.IsMatch(frm["txt_password"]);
                if (foundMatch == true)
                {
                    string where = "email='" + frm["txt_email"] + "'";// and Mobile='"+ frm["txt_contactno"] + "'";
                    DataTable dt_dr_details = dal.GetList("pisl_users", "*", where);
                    if (dt_dr_details != null)
                    {
                        if (dt_dr_details.Rows.Count > 0)
                        {
                            string pass = Encrypt(frm["txt_password"].Trim());
                            string col = " password='" + pass + "'";
                            var update = dal.Updation("pisl_users", col, "email='" + dt_dr_details.Rows[0]["email"].ToString() + "'");
                            if (update == 0)
                            {
                                string hostName = Dns.GetHostName();
                                string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                string colName = "activity,email,password,ip,system,description,date";
                                string colValue = "'Change Passs','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + frm["txt_password"].ToString().Trim() + "','" + IP + "','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + pass + "',getdate()";
                                int ins = dal.insertion("tbl_activity", colName, colValue);
                                string message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                MRPLookup.SendSMS("forgot_pwd", dt_dr_details.Rows[0]["Mobile"].ToString(), dt_dr_details.Rows[0]["First_Name"].ToString(), dt_dr_details.Rows[0]["Last_Name"].ToString(), "", "", dt_dr_details.Rows[0]["email"].ToString(), frm["txt_password"].ToString().Trim(), "", "", "", "");
                                Result = "0";
                            }
                            else
                            {
                                Result = "Somthing wrong Error !";
                            }
                        }
                        else
                        {
                            Result = "This is not registered email please check.";
                        }
                    }
                }
                else
                {
                    Result = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                }
            }
            else
            {
                Result = "Password Length must between 8 to 18 letters";
            }
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
    public ActionResult verifyOTP(string otp)
    {
        string Result = "";
        if (otp == Session["otp"].ToString())
        {
            Result = "DONE";
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
}
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using DelhimedicalcouncilORG;
using System.Data;
using System.Security.Cryptography;
using System.Text;
using System.IO;
using System.Drawing;
using System.Net;
using System.Net.Mail;

using System.Text.RegularExpressions;
using System.Data.SqlClient;
using System.Configuration;

namespace DelhimedicalcouncilORG.Controllers
{
public class homeController : Controller
{
    // GET: home
    DAL dal = new DAL();
    MRPLookup lk = new MRPLookup();
    MailFormat mf = new MailFormat();


    private string RetrieveContent(string webPage)
    {
        HttpWebResponse response = null;//used to get response
        StreamReader respStream = null;//used to read response into string
        try
        {
            //create a request object using the url passed in
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(webPage);
            request.Timeout = 10000;

            //go get a response from the page
            response = (HttpWebResponse)request.GetResponse();

            //create a streamreader object from the response
            respStream = new StreamReader(response.GetResponseStream());

            //get the contents of the page as a string and return it
            return respStream.ReadToEnd();
        }
        catch (Exception ex)//houston we have a problem!
        {
            throw ex;
        }
        finally
        {
            //close it down, we’re going home!
            response.Close();
            respStream.Close();
        }
    }

    //using a regular expression, find all of the href or urls
    //in the content of the page
    private void GetAllUrls(string content)
    {
        //regular expression
        string pattern = @"(?:href\s*=)(?:[\s""']*)(?.*?)(?:[\s>""'])";

        //Set up regex object
        Regex RegExpr = new Regex(pattern, RegexOptions.IgnoreCase);

        //get the first match
        Match match = RegExpr.Match(content);

        //loop through matches
        while (match.Success)
        {

            //output the match info
            Console.WriteLine("href match: " + match.Groups[0].Value);
            //WriteToLog(@"C:\matchlog.txt", "href match: " + match.Groups[0].Value + "\r\n");

            Console.WriteLine("Url match: " + match.Groups[1].Value);
            //WriteToLog(@"C:\matchlog.txt", "Url | Location | mailto match: " + match.Groups[1].Value + "\r\n");

            //get next match
            match = match.NextMatch();
        }
    }

    //Write to a log file
    //private void WriteToLog(string file, string message)
    //{
    //using (StreamWriter w = File.AppendText(file))
    //{
    //w.WriteLine(DateTime.Now.ToString() + ": " + message); w.Close();
    //}
    //}




    /// <summary>
    /// ////////////////////////
    /// </summary>
    /// <returns></returns>
    /// 

    public ActionResult Index()
    {




        return View();
    }
    //Start Login//
    public ActionResult login()
    {
        // Session["CAPTCHA"] = "111111";// GetRandomText();
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }

    
    public string Login_Form(string EmailId, string password, string ip, string captcha)
    
    {



        var dateTime = DateTime.Now;
        var tt = dateTime.Hour;


        var dayOfWeek = dateTime.DayOfWeek;
        var day = dayOfWeek.ToString();

        //Decrypt("","");
        //70789
        //554e981f4946f37a4818f1cea3928fe3
        //drtushargupta90@gmail.com
        string message = string.Empty;
        string clientCaptcha = captcha;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            ViewBag.CaptchaError = "Sorry, please write exact text as written above.";
            message = "11,11";
            return message;
        }
        else
            if (Session["checkSession"] == null)
        {
            ip = Request.ServerVariables["REMOTE_ADDR"].ToString();

            string pass = Encrypt(password);
            // string decoded = MRPLookup.Decrypt1(HttpUtility.UrlDecode(pass));
            string cond = "email='" + EmailId + "' and password='" + pass + "' and active!=3 ";//and active=1
            DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
            if (dtLogin.Rows.Count > 0)
            {
                if (Convert.ToString(dtLogin.Rows[0]["Regd_Type"]) == "PROV" && dtLogin.Rows.Count == 1)
                {
                    DataTable dt_temp_D = dal.GetList("pisl_temp_registrations", "Regd_ID,Regd_Type,Final_Status,Approved_By,date_approved,type", "email='" + EmailId.Trim() + "' order by ID desc");
                    for (int i = 0; i < dt_temp_D.Rows.Count; i++)
                    {
                        if (Convert.ToString(dt_temp_D.Rows[i]["Regd_Type"]) != "PROV" && Convert.ToString(dt_temp_D.Rows[i]["Final_Status"]) == "Approved" && Convert.ToString(dt_temp_D.Rows[i]["Approved_By"]) != null && Convert.ToString(dt_temp_D.Rows[i]["date_approved"]) != null && Convert.ToString(dt_temp_D.Rows[i]["type"]) != "service")
                        {



                            string colnameWithValue = "Regd_ID=" + Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]) + ",Regd_Type='" + dt_temp_D.Rows[i]["Regd_Type"].ToString() + "'";
                            string conditions = "S_No=" + Convert.ToInt32(dtLogin.Rows[0]["S_No"]) + "";
                            var Update_paymentUpdate = dal.Updation("pisl_users", colnameWithValue, conditions);
                            if (Update_paymentUpdate == 0)
                            {
                                dtLogin.Rows[0]["Regd_ID"] = Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]);
                                dtLogin.Rows[0]["Regd_Type"] = dt_temp_D.Rows[i]["Regd_Type"].ToString();

                            }
                            break;
                        }
                    }
                }


                for (int i = 0; i < dtLogin.Rows.Count; i++)
                {
                    string hash = Convert.ToString(dtLogin.Rows[i]["hash"]);
                    string decryptedstring = Decrypt(pass, hash);

                    string gid = Convert.ToString(dtLogin.Rows[i]["GID"]);
                    //string active = Convert.ToString(dtLogin.Rows[0]["active"]);
                    if (gid == "0")//Login for doctor
                    {
                        //DataTable dt_lastloginRecord = dal.GetList("pisl_users where email='" + EmailId + "' order by S_No desc", "TOP 1 *", "");
                        if (dtLogin != null && dtLogin.Rows.Count > 0)
                        {

                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[i]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[i]["Regd_Type"]);
                            }
                            else
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                            }
                            if (dtLogin.Rows[i]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[i]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }

                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                        }
                        else
                        {
                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[0]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            }
                            if (dtLogin.Rows[0]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }
                        }


                        message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 2;
                    }
                    else if (gid == "1")//Login for internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["isno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 1;
                            }
                            else
                            {
                                message = "0,6";
                            }
                        }

                        else
                        {
                            message = "0,5";
                        }
                    }
                    else if (gid == "2")//Login for admin and internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["asno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 3;
                            }
                            else
                            {
                                message = "0,6";
                            }

                        }
                        else
                        {
                            message = "0,5";
                        }
                    }
                }
            }
            else
            {
                message = "0,0";
            }
        }
        else
        {
            message = "10,10";
        }
        return message;
    }

    public string Encrypt(string password)
    {
        // Decrypt("", "");
        //string password = @"1234abcd";

        // byte array representation of that string
        byte[] encodedPassword = new UTF8Encoding().GetBytes(password);

        // need MD5 to calculate the hash
        byte[] hash = ((HashAlgorithm)CryptoConfig.CreateFromName("MD5")).ComputeHash(encodedPassword);

        // string representation (similar to UNIX format)
        string encoded = BitConverter.ToString(hash)
           // without dashes
           .Replace("-", string.Empty)
           // make lowercase
           .ToLower();
        return encoded;
    }
    public string Decrypt(string password, string hash1)
    {//https://md5decrypt.net/#answer
        string ss = "";
        string source = "zdNot3oAz5I%3DjRspJg78a%2FY%3D";// "Hello World!";
        MD5 md5 = System.Security.Cryptography.MD5.Create();
        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(password);
        byte[] hash = md5.ComputeHash(inputBytes);

        // step 2, convert byte array to hex string
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < hash.Length; i++)
        {
            sb.Append(hash[i].ToString("X2"));
        }
        return sb.ToString();
    }
    static string GetMd5Hash(MD5 md5Hash, string input)
    {

        // Convert the input string to a byte array and compute the hash.
        byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));

        // Create a new Stringbuilder to collect the bytes
        // and create a string.
        StringBuilder sBuilder = new StringBuilder();

        // Loop through each byte of the hashed data 
        // and format each one as a hexadecimal string.
        for (int i = 0; i < data.Length; i++)
        {
            sBuilder.Append(data[i].ToString("x2"));
        }

        // Return the hexadecimal string.
        return sBuilder.ToString();
    }
    public FileResult GetCaptchaImage()
    {
        MemoryStream ms = new MemoryStream();
        if (Session["CAPTCHA"] != null)
        {
            string text = Session["CAPTCHA"].ToString();

            //first, create a dummy bitmap just to get a graphics object
            Image img = new Bitmap(1, 1);
            Graphics drawing = Graphics.FromImage(img);

            Font font = new Font("Jokerman", 15);
            //measure the string to see how big the image needs to be
            SizeF textSize = drawing.MeasureString(text, font);

            //free up the dummy image and old graphics object
            img.Dispose();
            drawing.Dispose();

            //create a new image of the right size
            img = new Bitmap((int)textSize.Width + 40, (int)textSize.Height + 20);
            drawing = Graphics.FromImage(img);

            Color backColor = Color.SeaShell;
            Color textColor = Color.Red;
            //paint the background
            drawing.Clear(backColor);

            //create a brush for the text
            Brush textBrush = new SolidBrush(textColor);

            drawing.DrawString(text, font, textBrush, 20, 10);

            drawing.Save();

            font.Dispose();
            textBrush.Dispose();
            drawing.Dispose();


            img.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
            img.Dispose();

            return File(ms.ToArray(), "image/png");
        }
        else
        {
            return File(ms.ToArray(), "image/png");
        }
    }
    private string GetRandomText()
    {
        StringBuilder randomText = new StringBuilder();
        string alphabets = "12345679ABCEFGHKLMNPRSTUVWXZ";
        Random r = new Random();
        for (int j = 0; j <= 5; j++)
        {
            randomText.Append(alphabets[r.Next(alphabets.Length)]);
        }
        return randomText.ToString();
    }
    //End Login//
    public ActionResult signup()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    [HttpPost]
    public string sendotpsignup(string txt_Email, string txt_ContactNo)
    {
        string msg = "";
        try
        {
            var CheckEmail = IsEmailandMobileExists(txt_Email, "");
            var checkMobile = IsEmailandMobileExists("", txt_ContactNo);
            if (CheckEmail == false && checkMobile == false)
            {

                Session["otp"] = GetRandomText();
                string OTP = Session["otp"].ToString();
                //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
                string mailBody = "Your OTP is: " + OTP + ". DMC";
                MRPLookup.sendMail(txt_Email.Trim(), "DMC | OTP Verification", mailBody, "", "");

                //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
              

                MRPLookup.SendSMS("otp", txt_ContactNo.Trim(), "", "", OTP, "", "", "", "", "", "", "");
                msg = "0";
            }
            else if (CheckEmail == true && checkMobile == true)
            {
                msg = "Email and Mobile no. are already exists!!";
            }
            else
            {
                if (checkMobile == true && CheckEmail == false)
                {
                    msg = "Mobile No. is Already Exists!!";
                }
                else if (CheckEmail == true && checkMobile == false)
                {
                    msg = "Email Address is Already Exists!!";
                }


            }
        }
        catch (Exception ex)
        {
            msg = "1";
        }
        return msg;
    }
    public bool IsEmailandMobileExists(string email, string mobile)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        try
        {
            tableName = "pisl_users";
            colname = "*";
            if (!string.IsNullOrEmpty(email))
            {
                cond = "email='" + email + "'";
            }
            if (!string.IsNullOrEmpty(mobile))
            {
                cond = "mobile='" + mobile + "'";
            }
            //cond=
            DataTable dt_datacheck = dal.GetList(tableName, colname, cond);
            if (dt_datacheck != null && dt_datacheck.Rows.Count > 0)
            {
                IsExists = true;
            }

        }
        catch (Exception ex)
        {
            IsExists = false;
            throw;
        }
        return IsExists;
    }

    public ActionResult IsDocDataExists(string regd_type, string regd_no, string DOB, string PassingYear)
    {
        //List<dynamic> list = new List<dynamic>();
        string message = "";
        try
        {
            var tbl_name = "";

            var userExists = IsRegd_Exists(regd_type, regd_no, DOB, PassingYear, out tbl_name);
            if (userExists == true && tbl_name == "pisl_users")
            {

                message = "Already Registered With us. Please Login With Your Credential";
            }
            else
                if (userExists == true && tbl_name == "pisl_fresh_registration_mst")
            {
                message = "Your Registration No. is Expired. Please SignUp Again.";
            }
            else
            {
                message = "NotExists";
                //message = "Your Registration No. is Not Exists!";
            }
        }
        catch (Exception ex)
        {

        }
        return Json(message, JsonRequestBehavior.AllowGet);
    }
    public bool IsRegd_Exists(string regd_type, string regd_no, string DOB, string PassingYear, out string Tbl_Name)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        Tbl_Name = "";
        DataTable dt_UserCheck = null;
        try
        {
            tableName = "pisl_users";
            colname = "*";
            cond = "Regd_Type='" + regd_type + "' and Regd_ID='" + regd_no.Trim() + "'";
            dt_UserCheck = dal.GetList(tableName, colname, cond);
            if (dt_UserCheck == null || dt_UserCheck.Rows.Count == 0)
            {
                tableName = "pisl_fresh_regi_qual_mst";
                colname = "*";
                cond = "quali_type='Basic Qualification' AND Regd_ID='" + regd_no + "' "
                    + "AND Regd_Type='" + regd_type + "' AND passing_date =  '" + PassingYear.Trim() + "'";
                dt_UserCheck = dal.GetList(tableName, colname, cond);
                if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                {
                    Tbl_Name = "pisl_fresh_regi_qual_mst";

                    tableName = "pisl_fresh_registration_mst";
                    colname = "*";
                    cond = "Regd_ID='" + regd_no + "' AND Regd_Type='" + regd_type + "'";
                    dt_UserCheck = dal.GetList(tableName, colname, cond);
                    if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                    {
                        Tbl_Name = "pisl_fresh_registration_mst";
                        IsExists = true;
                    }
                    else
                    {
                        IsExists = false;
                    }
                }
                else
                {

                    IsExists = false;
                }
            }
            else
            {
                Tbl_Name = "pisl_users";
                IsExists = true;
            }
        }
        catch (Exception ex)
        {


            throw;
        }
        return IsExists;
    }

    [HttpPost]
    public string createsignup(string txt_Email, string txt_ContactNo, string txt_FirstName, string txt_MiddleName,
        string txt_LastName, string txt_Password, string txt_ConfirmPassword, string txt_DOB, bool chk_TermCondition,
        string Captcha, string Regd_ID, string txtOTP, string ddl_regType, string txt_oldData, string passingYear)
    {
        string message = "";
        string dob = lk.convertdate1(txt_DOB);
        string Tbl_Name = "";
        try
        {
            if (!IsEmailandMobileExists(txt_Email, ""))
            {
                if (!IsEmailandMobileExists("", txt_ContactNo))
                {
                    if (ddl_regType == "FRS" || ddl_regType == "RRE")
                    {
                        if (IsRegd_Exists(ddl_regType, Regd_ID, dob, passingYear, out Tbl_Name))
                        {
                            Tbl_Name = Tbl_Name;
                            if (Tbl_Name == "pisl_users")
                            {
                                //if Pisl_user Table Record Exists but no Email and Mobile No exists
                                //in this case update the Email and Mobile No.
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        DataTable dt_Email_Mobile_Check = dal.GetList("pisl_users",
                                                        "top 1*", " Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                        if (dt_Email_Mobile_Check != null)
                                                        {
                                                            if (dt_Email_Mobile_Check.Rows.Count > 0)
                                                            {
                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_Email_Mobile_Check.Rows[0]["email"])))
                                                                {
                                                                    string pass = Encrypt(txt_Password.Trim());
                                                                    string hash = Encrypt(MRPLookup.RandamStringGenerator1());
                                                                    var updateDt = dal.Updation("pisl_users",
                                                                        "email='" + txt_Email.Trim() + "',mobile='" + txt_ContactNo.Trim() + "',password='" + pass + "',hash='" + hash + "'",
                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                    if (updateDt == 0)
                                                                    {
                                                                        DataTable dt_fresh_Check = dal.GetList("pisl_fresh_registration_mst",
                                                                            "top 1 * ",
                                                                            "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                        if (dt_fresh_Check != null)
                                                                        {
                                                                            if (dt_fresh_Check.Rows.Count > 0)
                                                                            {
                                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_fresh_Check.Rows[0]["Email"])))
                                                                                {
                                                                                    var updateDt_fresh = dal.Updation("pisl_fresh_registration_mst",
                                                                                        "Email='" + txt_Email.Trim() + "',Mobile='" + txt_ContactNo.Trim() + "'",
                                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");

                                                                                    if (updateDt_fresh != 0)
                                                                                    {
                                                                                        message = "Error!!";
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                                        MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                                        message = "Please, Check Your Mail For Login Details";
                                                                        //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                                        MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                                    }
                                                                    else
                                                                    {
                                                                        message = "Error!!";
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    message = "Your record are already Exists with us!!";
                                                                }
                                                            }
                                                        } //End Updation
                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }
                            else if (Tbl_Name == "pisl_fresh_regi_qual_mst" || Tbl_Name == "pisl_fresh_registration_mst")
                            {
                                //Insert Login Record in Pisl_Users
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        string pass = Encrypt(txt_Password.Trim());
                                                        string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                        if (string.IsNullOrEmpty(Regd_ID))
                                                        {
                                                            Regd_ID = "0";
                                                        }
                                                        //if (txt_oldData != "")
                                                        //{
                                                        //    string colnamemst = "*";
                                                        //    string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        //    DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        //    if (dtrmst.Rows.Count > 0)
                                                        //    {
                                                        //        string oldtype = "";
                                                        //        if (ddl_regType == "FRS")
                                                        //        {
                                                        //            oldtype = "service";
                                                        //        }
                                                        //        else if (ddl_regType == "RRE")
                                                        //        {
                                                        //            oldtype = "reregi";
                                                        //        }
                                                        //        var corrAddress1 = dtrmst.Rows[0]["Corr_Add_Line_1"].ToString();
                                                        //        var corrAddress2 = dtrmst.Rows[0]["Corr_Add_Line_2"].ToString();
                                                        //        var perAddress1 = dtrmst.Rows[0]["Per_Add_Line_1"].ToString();
                                                        //        var perAddress2 = dtrmst.Rows[0]["Per_Add_Line_2"].ToString();

                                                        //        string colNameold = "Regd_ID,Regd_Type,type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,date_entered,Father_Name,POB,Gender,Nationality,Corr_Add_Line_1,Corr_Add_Line_2,Corr_Add_State,Corr_Add_Pincode,Corr_Add_Country,Per_Add_Line_1,Per_Add_Line_2,Per_Add_Line_State,Per_Add_Line_Pincode,Per_Add_Line_Country";

                                                        //        string colValueold = "'" + Regd_ID + "','" + ddl_regType + "','" + oldtype + "','" + txt_FirstName + "','" + txt_MiddleName + "','"  + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "', '"+ lk.GetDateTime()+ "' ,'"+ dtrmst.Rows[0]["Father_Name"] + "','" + dtrmst.Rows[0]["POB"] + "','" + dtrmst.Rows[0]["Gender"] + "','" + dtrmst.Rows[0]["Nationality"] + "','" + corrAddress1 + "','" + corrAddress2 + "','" + dtrmst.Rows[0]["Corr_Add_State"] + "','" + dtrmst.Rows[0]["Corr_Add_Pincode"] + "','" + dtrmst.Rows[0]["Corr_Add_Country"] + "','" + perAddress1 + "','" + perAddress2 + "','" + dtrmst.Rows[0]["Per_Add_Line_State"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Pincode"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Country"] + "'";
                                                        //        int insold = dal.insertion("pisl_temp_registrations", colNameold, colValueold);
                                                        //    }
                                                        //}
                                                        Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                        string colnamemst = "*";
                                                        string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        DateTime txtdob1 = Convert.ToDateTime(dtrmst.Rows[0]["DOB"]);
                                                        string txtdob = txtdob1.ToShortDateString();

                                                        string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                            + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                        string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + dtrmst.Rows[0]["First_Name"].ToString() + "','" + dtrmst.Rows[0]["Middle_Name"].ToString() + "',"
                                                            + "'" + dtrmst.Rows[0]["Last_Name"].ToString() + "','" + txtdob + "','" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                            + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                        int ins = dal.insertion("pisl_users", colName, colValue);
                                                        if (ins == 0)
                                                        {
                                                            string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                            MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                            message = "Please, Check Your Mail For Login Details";
                                                            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                            MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                        }
                                                        else
                                                        {
                                                            message = "Try after some time";
                                                        }

                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }

                        }
                        else
                        {
                            message = "Your Registration No and Passing Year is Not Exist with Us";
                        }
                    }
                    else
                    {
                        //Insert Login Record in Pisl_Users
                        if (chk_TermCondition == true)
                        {
                            if (txtOTP == Session["otp"].ToString())
                            {
                                if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                {
                                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                    Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                    if (foundMatch == true)
                                    {
                                        if (txt_Password == txt_ConfirmPassword)
                                        {
                                            if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                            {
                                                //if (Tbl_Name== "pisl_users") { }
                                                string pass = Encrypt(txt_Password.Trim());
                                                string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                if (string.IsNullOrEmpty(Regd_ID))
                                                {
                                                    Regd_ID = "0";
                                                }
                                                Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                if (ddl_regType == "-1")
                                                {
                                                    ddl_regType = "";
                                                }


                                                string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                    + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                int ins = dal.insertion("pisl_users", colName, colValue);
                                                if (ins == 0)
                                                {
                                                    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                    message = "Please, Check Your Mail";
                                                    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                }
                                                else
                                                {
                                                    message = "Try after some time";
                                                }

                                                //string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                //    + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                //string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                //    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                //    + "1,0,0,'"+ lk.GetDateTime()+ "','','" + Regd_ID1 + "'";
                                                //int ins = dal.insertion("pisl_users", colName, colValue);
                                                //if (ins == 0)
                                                //{
                                                //    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                //    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                //    message = "Please, Check Your Mail";
                                                //    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                //    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                //}
                                                //else
                                                //{
                                                //    message = "Try after some time";
                                                //}
                                            }
                                            else
                                            {
                                                message = "Enter A Valid Email";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password and Confrim Password is Not Same";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                    }
                                }
                                else
                                {
                                    message = "Password Length must between 8 to 18 letters";
                                }
                            }
                            else
                            {
                                message = "Enter the Valid OTP";
                            }
                        }
                        else
                        {
                            message = "Please check the Terms and Conditions";
                        }

                        //}
                    }
                }
                else
                {
                    message = "Mobile No. is Already Exists";
                }
            }
            else
            {
                message = "Email Already exists!!";
            }
            //
            //Cut the Code From There

        }
        catch
        {

        }
        return message;
    }

    public ActionResult SignupVerification()
    {
        string message = "";
        try
        {
            if (Request.QueryString["email"] != null && Request.QueryString["hash"] != null)
            {
                string email = Request.QueryString["email"];
                string hash = Request.QueryString["hash"];
                string cond = "Email='" + email.Trim() + "' and Hash='" + hash.Trim() + "' and Active=0";
                DataTable dt = dal.GetList("pisl_users", "*", cond);
                if (dt.Rows.Count > 0)
                {
                    int upd = dal.Updation("pisl_users", "Active=1", cond);
                    if (upd == 0)
                    {
                        message = "Your account has been activated, you can now login";
                    }
                    else
                    {
                        message = "Try after some time";
                    }
                }
                else
                {
                    message = "The url is either invalid or you already have activated your account.";
                }
            }
            else
            {
                message = "Invalid approach, please use the link that has been send to your email.";
            }
        }
        catch
        { }
        ViewBag.lbl_status = message;
        return View();
    }
    public ActionResult contact()
    {
        return View();
    }

    public ActionResult about()
    {
        return View();
    }
    public ActionResult faqs()
    {
        return View();
    }
    // Start forgot password
    public ActionResult forgotpassword()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public string sendCode(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        string message = string.Empty;
        try
        {
            string clientCaptcha = CaptchaCaseID;
            string serverCaptcha = Session["CAPTCHA"].ToString();
            if (!clientCaptcha.Equals(serverCaptcha))
            {
                ViewBag.ShowCAPTCHA = serverCaptcha;
                message = "Sorry, please write exact text as written below.";
            }
            else
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' ";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string name = Convert.ToString(dt.Rows[0]["First_Name"]);
                                        string Mobile = Convert.ToString(dt.Rows[0]["Mobile"]);

                                        MailFormat mf = new MailFormat();
                                        string code = MRPLookup.RandamStringGenerator1();
                                        string mailBody = mf.SendCodeOnMail(name, code);
                                        MRPLookup.SendSMS("otp", Mobile, "", "", code, "", "", "", "", "", "", "");
                                        string colValue = "Code='" + code.Trim() + "'";
                                        int updCode = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "'");
                                        if (updCode == 0)
                                        {
                                            string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(), "Reset Password Code " + System.DateTime.Now + "", mailBody, "", "");
                                            if (sendmailStatus != "Technical issue! Please try agiain")
                                            {
                                                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

                                            }
                                            else
                                            {
                                                message = sendmailStatus;
                                            }
                                        }
                                        else
                                        {
                                            message = "Please try after some time.";
                                        }

                                    }
                                    else
                                    {
                                        message = "Enter a New Password.";
                                    }
                                }
                                else
                                {
                                    message = "Your Email And Mobile Number Do not Match with DMC Registered Users.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
        }
        catch (Exception ex)
        {

        }
        return message;
    }
    public string forgotpasswordCaseID(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact text as written below.";
            // return message;
        }
        else
        {
            if (txtCode != "0")
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string mobile = Convert.ToString(dt.Rows[0]["Mobile"]);
                                    string firstName = Convert.ToString(dt.Rows[0]["First_Name"]);
                                    string lastName = Convert.ToString(dt.Rows[0]["Last_Name"]);
                                    //string new_password = Encrypt(MRPLookup.RandamStringGenerator1());
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string colValue = "password='" + new_PasswordMD5.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                                        updPassword = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                        if (updPassword == 0)
                                        {
                                            updPassword = dal.Updation("pisl_users", "Code='0'", "Email='" + txtEmail.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                            string hostName = Dns.GetHostName();
                                            string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                            string colName = "activity,email,password,ip,system,description,date";
                                            colValue = "'Change Passs','" + txtEmail + "','" + txtPassword + "','" + IP + "','" + mobile + "','" + new_PasswordMD5 + "',getdate()";
                                            int ins = dal.insertion("tbl_activity", colName, colValue);
                                            message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                            MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                                            // Send SMS and mail for password reset.
                                            

                                        }
                                        else
                                        {
                                            message = "Please try after some time";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please try another password.";
                                    }

                                }
                                else
                                {
                                    message = "Your Details Dont Match or You have NOT registered with DMC.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
            else
            {
                message = "Code not match";
            }
        }
        return message;
    }

    public ActionResult introduction()
    {
        return View();
    }

    public ActionResult powers()
    {
        return View();
    }

    public ActionResult thecouncil()
    {
        return View();
    }

    //public ActionResult gallery()
    //{
    //    return View();
    //}
    public ActionResult Gallery()
    {
        return View();
    }

    public ActionResult accomplishments()
    {
        return View();
    }

    public ActionResult registration()
    {
        return View();
    }
    public ActionResult cmeperforma()
    {
        return View();
    }
    public ActionResult cmeonline()
    {
        return View();
    }
    public ActionResult cmerequirements()
    {
        return View();
    }
    public ActionResult cmepassbook()
    {
        return View();
    }
    public ActionResult duties()
    {
        return View();
    }
    public ActionResult inst_general()
    {
        return View();
    }

    public ActionResult inst_fees()
    {
        return View();
    }
    public ActionResult inst_docupload()
    {
        return View();
    }
    public ActionResult disclaimer()
    {
        return View();
    }
    public ActionResult feestructure()
    {
        return View();
    }
    public ActionResult privacypolicy()
    {
        return View();
    }
    public ActionResult termofuse()
    {
        return View();
    }

    public ActionResult litigations()
    {
        return View();
    }


    public ActionResult council_meeting()
    {
        return View();
    }
    public ActionResult Cme_workshop_Conference()
    {
        return View();
    }

    public ActionResult Media_room()
    {
        return View();
    }
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    public ActionResult LogOut()
    {
        Session.Abandon();
        return RedirectToAction("Index", "Home");
    }
    public ActionResult SearchElectrolData(string regid)
    {
        string msg = "";
        DataTable dtSearch = dal.GetList("tbl_electrolData", "*", "RegNo='" + regid.Trim() + "'");
        if (dtSearch.Rows.Count > 0)
        {
            return Json(MRPLookup.DataTableToJSONWithJSONNet(dtSearch), JsonRequestBehavior.AllowGet);
        }
        else
        {
            msg = "Data not found";
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
    }
    public ActionResult SearchElectrolDataUpdate(string regid)
    {
        int upd = 1;
        upd = dal.Updation("tbl_electrolData", "Status='Completed',Date='" + lk.GetDateTime() + "'", "ID='" + regid.Trim() + "'");
        if (upd == 0)
        {

            return Json(upd, JsonRequestBehavior.AllowGet);
        }
        else
        {
            return Json(upd, JsonRequestBehavior.AllowGet);
        }
    }

    public ActionResult TotalCount()
    {
        DataTable dtcntCompleted = dal.GetList("tbl_electrolData", "count(*) as cntCompleted", "status='Completed'");
        DataTable dtcntNotCompleted = dal.GetList("tbl_electrolData", "count(*) as cntNotCompleted", "status ='Valid'");
        string totalCmpleteStatus = "Completed: " + Convert.ToString(dtcntCompleted.Rows[0]["cntCompleted"]) + "  Not Completed: " + Convert.ToString(dtcntNotCompleted.Rows[0]["cntNotCompleted"]);
        return Json(totalCmpleteStatus, JsonRequestBehavior.AllowGet);
    }
    public ActionResult Renewal_Reminder(string key)
    {
        string msg = "";
        try
        {

            key = "1111";
            string validKey = "1111";
            // MRPLookup.SendSMS("Renewal_expired_tdy", "9899849487", "Dinesh", "", "", "", "", "", "", "", "", "");
            if (key == validKey)
            {
                string expiry_frtyfive = Convert.ToDateTime(DateTime.Now.AddDays(30)).ToString("yyyy-MM-dd");//date(('Y-m-d'), strtotime('+30 days'));
                string expiry_tdy = Convert.ToDateTime(DateTime.Now).ToString("yyyy-MM-dd");//date('Y-m-d');
                string expiry_pastfifty = Convert.ToDateTime(DateTime.Now.AddDays(-50)).ToString("yyyy-MM-dd");// date(('Y-m-d'), strtotime('-50 days'));
                string cond = "(Expiry_Date = '" + expiry_frtyfive + "' OR  Expiry_Date = '" + expiry_tdy + "' OR Expiry_Date = '" + expiry_pastfifty + " ') AND (Mobile !='' OR  Email !='')";
                //DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", cond);
                string strConnString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                SqlConnection con = new SqlConnection(strConnString);
                //SqlConnection con = new SqlConnection(@"Data Source=103.20.212.254,1232;Initial Catalog=dmcaws_New;User Id=sa;Password=bD$x89K3$@K9UaQsKQ");
                //SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-PKTADCN;Initial Catalog=dmcaws1;integrated security=true");
                con.Open();
                SqlCommand cmd = new SqlCommand("select * from pisl_fresh_registration_mst where " + cond + "", con);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                con.Close();
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string First_Name = Convert.ToString(dt.Rows[i]["First_Name"]);
                        string Last_Name = Convert.ToString(dt.Rows[i]["Last_Name"]);
                        string Regd_ID = Convert.ToString(dt.Rows[i]["Regd_ID"]);
                        string Regd_Type = Convert.ToString(dt.Rows[i]["Regd_Type"]);
                        string Mobile = Convert.ToString(dt.Rows[i]["Mobile"]);
                        string Expiry_Date = Convert.ToDateTime(dt.Rows[i]["Expiry_Date"]).ToString("yyyy-MM-dd");
                        string date_approved = Convert.ToDateTime(dt.Rows[i]["date_approved"]).ToString("yyyy-MM-dd");
                        string tdydate = Convert.ToDateTime(System.DateTime.Now).ToString("yyyy-MM-dd");
                        string to = Convert.ToString(dt.Rows[i]["Email"]);

                        string subject1 = "Renewal of Registration with Delhi Medical Council"; //// Give the email a subject
                        string subject2 = "Expiry of Registration with Delhi Medical Council";
                        string subject3 = "Deletion of Regd Number with Delhi Medical Council";
                        string message1 = "";
                        message1 += "Dear Dr " + First_Name + " " + Last_Name + ",";
                        message1 += "Greetings from Delhi Medical Council!!";

                        message1 += "   This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council is due for renewal.";
                        message1 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting ";
                        message1 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message1 += "For inclusion of any additional qualification, please produce the original degree at the office of Delhi Medical Council, so that your additional ";
                        message1 += "qualification certificate can be verified with the original document. The original degree / diploma Certificate will be returned immediately after verification. ";

                        message1 += "<b>This is a system generated email and we request you not to reply to this email. Please ignore if already applied.</b>";

                        message1 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message1 += "Warm Regards,";

                        message1 += "Delhi Medical Council.";
                        message1 += "Ground Floor, B Wing, B Block-1";
                        message1 += "DMCR IT Park, Shastri Park";
                        message1 += "New Delhi-110053";
                        message1 += "Tel: +91-011-46621000";
                        message1 += "Website - www.delhimedicalcouncil.org	 ";

                        string message2 = "";
                        message2 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message2 += "Greetings from Delhi Medical Council!!";

                        message2 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council expired on " + Expiry_Date + " and  is due for renewal. ";

                        message2 += "We request you to kindly renew your registration within thirty days and keep your registration in force. You can renew your registration online by visiting ";
                        message2 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message2 += "Please take note that in case you do not apply for renewal of registration within the stipulated period, your name shall be removed from the State Medical ";
                        message2 += "Register maintained by the Delhi Medical Council in accordance with the provisions of Section 22 of the Delhi Medical Council Act, 1997 which will debar";
                        message2 += "you from practicing Allopathic in the state of Delhi.";

                        message2 += "<b>Kindly ignore this email, in case you have already applied for renewal of registration</b>";

                        message2 += "This is a system generated email and we request you not to reply to this email.";

                        message2 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message2 += "Warm Regards,";

                        message2 += "Delhi Medical Council.";
                        message2 += "Ground Floor, B Wing, B Block-1";
                        message2 += "DMCR IT Park, Shastri Park";
                        message2 += "New Delhi-110053";
                        message2 += "Tel: +91-011-46621000";
                        message2 += "Website - www.delhimedicalcouncil.org";

                        string message3 = "";
                        message3 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message3 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council has expired on " + Expiry_Date + ". You ";
                        message3 += "failed to renew the registration with Delhi Medical Council, in spite of notices/Emails (public / individual) issued for renewal. Hence, in accordance with the ";
                        message3 += "provisions of section 22(3) of Delhi Medical Council Act, 1997; your name under Registration number " + Regd_ID + "-" + Regd_Type + "  has been removed from the State ";
                        message3 += "Medical Register of Delhi Medical Council.";

                        message3 += "Please note that if you wish to have your name re-entered in the State Medical Register of Delhi Medical Council, you may do so, by paying fees as detailed herein below,";
                        message3 += "in addition to fee for renewal of registration (Rs. 2000/-)";

                        message3 += "Late fees for non-renewal of registration:-";
                        message3 += "(a) upto six months from the date from 		Rs. 1000/- (Rupees One Thousand only)";
                        message3 += "    which registration is due for renewal";
                        message3 += "(b) for period more than six months 	    Rs. 2000/- (Rupees One Thousand only)";
                        message3 += "     but upto one year";
                        message3 += "(c) for period more than one year 			Rs. 1000/- (Rupees One Thousand per year and Part thereof)";

                        message3 += "Please also note that any person servicing or practicing modern scientific system of medicine (allopathy) in Delhi without holding valid registration with Delhi Medical Council is liable for action under the provisions of Delhi Medical Council Act, 1997.";
                        message3 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting www.delhimedicalcouncil.org and apply under Online Renewal & Services.";

                        message3 += "<b>Kindly ignore this letter, in case you have already applied for renewal of registration</b>";

                        message3 += "This is a system generated email and we request you not to reply to this email.";

                        message3 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message3 += "Warm Regards,";

                        message3 += "Delhi Medical Council.";
                        message3 += "Ground Floor, B Wing, B Block-1";
                        message3 += "DMCR IT Park, Shastri Park";
                        message3 += "New Delhi-110053";
                        message3 += "Tel: +91-011-46621000";
                        message3 += "Website - www.delhimedicalcouncil.org,";

                        string headers = "From: DMC Registration System <registration@delhimedicalcouncil.org>' . '\r\n'"; // Set from headers

                        string message = "";
                        string subject = "";
                        string trigger = "";
                        string msgtxt = "";
                        if (Convert.ToDateTime(Expiry_Date) > Convert.ToDateTime(tdydate))
                        {
                            message = message1;
                            subject = subject1;
                            trigger = "Renewal_due_reminder";
                            msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Renewal of your DMC Regd No " + Regd_ID + " - " + Regd_Type + " is due. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }

                        }
                        else if (Convert.ToDateTime(Expiry_Date) == Convert.ToDateTime(tdydate))
                        {
                            message = message2;
                            subject = subject2;
                            trigger = "Renewal_expired_tdy";
                            // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Registration of DMC Regd No " + Regd_ID + " - " + Regd_Type + " expired today. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }
                        }
                        //else if (Convert.ToDateTime(Expiry_Date) < Convert.ToDateTime(tdydate))
                        //{
                        //    message = message2;
                        //    subject = subject2;
                        //    trigger = "Renewal_expired_fifty";
                        //   // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Your  ID " + Regd_ID + " - " + Regd_Type + " has been removed from the State Medical Register of DMC . Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                        //    if (!string.IsNullOrEmpty(to))
                        //    {
                        //       // MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //    if (!string.IsNullOrEmpty(Mobile))
                        //    {
                        //       // MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(to))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(Mobile))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}

                    }
                }

            }
            else
            {
                msg = "Key not match";
                string path = "C:\\TestService\\ServiceLog.txt";
                using (StreamWriter writer = new StreamWriter(path, true))
                {
                    writer.WriteLine(string.Format(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt"), DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt")));
                    writer.Close();
                }
            }
        }
        catch
        {

        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult certverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["cert"];
            string Regd_type = "";
            string regd_id = "";

            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["cert"]);
            var splitedString = decodedstr.Split('-');
            Regd_type = splitedString[0];
            regd_id = splitedString[1];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            switch (Regd_type)
            {
                case "RRE":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "FRS":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "PROV":
                    db = "pisl_prov_registration_mst";
                    qual_db = "pisl_prov_regi_qual_mst";
                    break;

                default:
                    Message = "This certificate cannnot be verified";
                    break;

            }

            var check_namechange = dal.GetList("tbl_NameChangeHistory_New", "CaseID,Name=(case when (New_MiddleName is null or  New_MiddleName='') then New_FirstName+' '+New_LastName when (New_MiddleName is null or  New_MiddleName='') and (New_LastName is null or New_LastName='') then New_FirstName else New_FirstName+' '+New_MiddleName+' '+New_LastName end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_namechange.Rows.Count > 0)
            {
                string CaseID = check_namechange.Rows[0]["CaseID"].ToString();
                ViewBag.Name = check_namechange.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                if (check_Doctordata.Rows.Count > 0)
                {
                    string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
                    ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                    DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                    DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                    DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                    ViewBag.qual = dt_qual;
                    ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                    ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                    Message = "success";
                }
                else
                {
                    Message = "This Entry Cannot be Verified";
                }
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;

        return View();
    }
    public ActionResult VeryfyCertificate(string value)
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        var qstring = value;
        var decodedStr = MRPLookup.Decrypt1(qstring);
        var splitedString = decodedStr.Split('-');
        var Regd_type = splitedString[0];
        var regd_id = splitedString[1];
        var db = "";
        var qual_db = "";
        //string regdtype=
        switch (Regd_type)
        {
            case "RRE":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "FRS":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "PROV":
                db = "pisl_prov_registration_mst";
                qual_db = "pisl_prov_regi_qual_mst";
                break;

            default:
                Message = "This certificate cannnot be verified";
                break;

        }
        var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
        if (check_Doctordata.Rows.Count > 0)
        {
            string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
            DataTable dt_Documents = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
            DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign' ");

        }
        else
        {
            Message = "This Entry Cannot be Verified";
        }
        return Json("", JsonRequestBehavior.AllowGet);
    }
    public ActionResult letterverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["letter"];
            string Regd_type = "";
            string regd_id = "";
            string ID = "";
            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["letter"]);
            var splitedString = decodedstr.Split('-');
            ID = splitedString[0];
            Regd_type = splitedString[1];
            regd_id = splitedString[2];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            //switch ()
            //{
            //    case "RRE":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "FRS":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "PROV":
            //        db = "pisl_prov_registration_mst";
            //        qual_db = "pisl_prov_regi_qual_mst";
            //        break;

            //    default:
            //        Message = "This certificate cannnot be verified";
            //        break;

            //}
            var letter_type = "";
            var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,date_approved,drg_from,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "ID='" + ID + "' and Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_Doctordata.Rows.Count > 0)
            {
                switch (check_Doctordata.Rows[0]["drg_from"].ToString())
                {
                    case "noc":
                        letter_type = "No Objection Certificate";
                        break;

                    case "gdst":
                        letter_type = "Good Standing Certificate";
                        break;
                }
                ViewBag.lettertype = letter_type;
                ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("pisl_fresh_regi_qual_mst", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='Sign'");
                if (!string.IsNullOrEmpty(check_Doctordata.Rows[0]["date_approved"].ToString()))
                {
                    ViewBag.DateApproved = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).ToString("dd MMMM,yyyy");
                    ViewBag.expiry = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).AddDays(-1).AddMonths(6).ToString("dd MMMM, yyyy");
                }
                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(ID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                Message = "This Entry Cannot be Verified";
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;
        return View();
    }
    public ActionResult Regi_search()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public ActionResult search_ur_dr()
    {

        return View();
    }
    public ActionResult regi_search_submit(string Regid, string Types)
    {
        try
        {


            string regid = Request.QueryString["Regd_ID"];
            string type = Request.QueryString["Type"]; ;
            //string type = frm["type"].Trim();
            //string regid = frm["regid"].Trim();
            string colname = "*";
            string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "' ORDER BY S_No DESC";
            DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
            if (dt.Rows.Count > 0)
            {
                DateTime ddob = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                DateTime dapproved = Convert.ToDateTime(dt.Rows[0]["date_approved"].ToString());
                DateTime dexpiry = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                ViewBag.dateapproved = dapproved.ToShortDateString();
                ViewBag.expirydate = dexpiry.ToShortDateString();
                ViewBag.dob = ddob.ToShortDateString();
                ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


                DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
                if (result_remarks.Rows.Count > 0)
                {
                    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    {
                        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    }
                }
                DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
                if (qualificationdt.Rows.Count > 0)
                {
                    ViewBag.qualdata = qualificationdt;
                }

            }
            return View();
        }
        catch (Exception ex)
        {
            return View();
        }
    }
    public ActionResult regi_search_submits(FormCollection frm)
    {

        string clientCaptcha = frm["CL_CAPCHA"].ToString();
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;

            return Json("-1");
        }
        string msg = "";
        //string type = Regd_ID;
        //string regid = Type;
        string type = frm["type"].Trim();
        string regid = frm["regid"].Trim();
        string colname = "*";
        string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
        if (dt.Rows.Count > 0)
        {
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
            if (result_remarks.Rows.Count > 0)
            {
                for (int i = 0; i < result_remarks.Rows.Count; i++)
                {
                    ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                }
            }
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult search_ur_dr_submit(FormCollection frm)
    {
        try
        {



            string First_Name = Request.QueryString["First_Name"];
            string Last_Name = frm["Last_Name"];
            string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
            string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
            string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
            string Mobile = Request.QueryString["Mobile"];
            string Email = Request.QueryString["Email"];

            if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Last_Name) && !string.IsNullOrEmpty(Corr_Add_Line_1) && !string.IsNullOrEmpty(Corr_Add_Line_2) && !string.IsNullOrEmpty(Corr_Add_Pincode) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Mobile='" + Mobile + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}

                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "Email='" + Email + "' and Mobile='" + Mobile + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }


            return View();
        }
        catch (Exception ex)
        {
            return View();

        }
    }


    public ActionResult search_ur_dr_submit2(FormCollection frm)
    {
        string msg = "";
        string First_Name = frm["First_Name"];
        string Last_Name = frm["Last_Name"];
        string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
        string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
        string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
        string Mobile = frm["Mobile"];
        string Email = frm["Email"];

        string condtions = "First_Name='" + First_Name.Trim() + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
        if (dt.Rows.Count > 0)
        {
            //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
            //if (result_remarks.Rows.Count > 0)
            //{
            //    for (int i = 0; i < result_remarks.Rows.Count; i++)
            //    {
            //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
            //    }
            //}
            string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", condtions2);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        else
        {
            msg = "Not Data Found";
        }


        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult cme()
    {
        return View();
    }
    public ActionResult status_comp2021()
    {
        return View();
    }

    public ActionResult ForgetEmailPasswordProv()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public dynamic getForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB)
    {
        //select pu.First_Name,pu.Last_Name,pu.email,pu.Mobile from pisl_users as pu inner join pisl_prov_regi_qual_mst as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type where pu.Regd_ID = 18430 and pu.DOB = '1991-10-26' and pfq.passing_date = 2016 and pfq.quali_course = 'M.B.B.S.'
        List<dynamic> OBJ = new List<dynamic>();
        string dob = lk.convertdate1(txt_DOB);
        try
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else {
                db = "pisl_fresh_regi_qual_mst";
            }

            DataTable dt1 = dal.GetList("pisl_users as pu inner join "+db+" as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType.ToUpper() + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                OBJ.Add(MRPLookup.Convert_DatatableToList(dt1).ToList());
                return Json(OBJ, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        catch (Exception)
        {

            return null;
        }
        
    }

    public string otpForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail)
    {
        string message = string.Empty;
        string dob = lk.convertdate1(txt_DOB);
        string db = "";
        if (txtRegType.ToUpper() == "PROV")
        {
            db = "pisl_prov_regi_qual_mst";
        }
        else
        {
            db = "pisl_fresh_regi_qual_mst";
        }
        DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
        if (dt1.Rows.Count > 0)
        {
            MailFormat mf = new MailFormat();
            string code = MRPLookup.RandamStringGenerator1();
            Session["provotp"] = code;
            string mailBody = "Your OTP is: " + code + ". DMC";
            string sendmailStatus= MRPLookup.sendMail(txtEmail.Trim(), "DMC | OTP Verification", mailBody, "", "");


            //string mailBody = mf.SendCodeOnMail(dt1.Rows[0]["First_Name"].ToString(), code);
            //string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(),"Reset Password Code" + System.DateTime.Now + "", mailBody, "", "");
            if (sendmailStatus != "Technical issue! Please try agiain")
            {
                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

            }
            else
            {
                message = sendmailStatus;
            }


            return message;
        }
        return "Some thing went wrong...!";
    }

    public string submitForgetEmailPasswordProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail, string txtMobileNo,string CaptchaCaseID,string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (Session["provotp"].ToString()!=txtCode)
        {
            return "Otp incorrect";
        }

        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact Captcha as written below.";
            // return message;
        }
        else
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else
            {
                db = "pisl_fresh_regi_qual_mst";
            }
            string dob = lk.convertdate1(txt_DOB);
            DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile,pu.Regd_ID,pu.Regd_Type", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                if (Convert.ToString(dt1.Rows[0]["Regd_ID"]) != "" && Convert.ToString(dt1.Rows[0]["Regd_Type"]) != "")
                {
                      string colValue = "Email='" + txtEmail.Trim() + "',Mobile='" + txtMobileNo.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                      updPassword = dal.Updation("pisl_users", colValue, "Regd_ID='"+dt1.Rows[0]["Regd_ID"].ToString()+ "' and Regd_Type='"+ dt1.Rows[0]["Regd_Type"].ToString() + "'");
               
                   
                     var tblCurrentStatuscolomns = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                     var Currentupdatestatuss = dal.Updation("pisl_temp_registrations", tblCurrentStatuscolomns, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");

                    var tblCurrentStatuscolomns1 = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                    var Currentupdatestatuss1 = dal.Updation("pisl_fresh_registration_mst", tblCurrentStatuscolomns1, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");



                    message = "Your Email and Mobile Changed successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                    //MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                   // Send SMS and mail for password reset.
                }
                else
                {
                    message = "Please try after some time";
                }
            }
            else
            {
                message = "Data Not found..!";
            }
        }
        return message;
    }
    public string sendOTP(string EmailId)
    {
        string message = "";
        string cond = "email='" + EmailId + "'";
        DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
        if (dtLogin.Rows.Count > 0)
        {
            string mobile = dtLogin.Rows[0]["Mobile"].ToString();
            Session["otp"] = GetRandomText();
            string OTP = Session["otp"].ToString();
            //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
            string mailBody = "Your OTP is: " + OTP + ". DMC";
            MRPLookup.sendMail(EmailId.Trim(), "DMC | OTP Verification", mailBody, "", "");
            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
            MRPLookup.SendSMS("otp", mobile.Trim(), "", "", OTP, "", "", "", "", "", "", "");
            message = "Please check your email or Mobile for OTP";
        }
        else
        {
            message = "Email not found, Please enter a valid email";
        }
        return message;
    }

    public ActionResult ChangePassward(FormCollection frm)
    {
        string Result = "";
        if (frm["txtOTP"].ToString() == Session["OTP"].ToString())
        {
            if (frm["txt_password"].Length >= 8 && frm["txt_password"].Length <= 18)
            {
                Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                Boolean foundMatch = regexObj.IsMatch(frm["txt_password"]);
                if (foundMatch == true)
                {
                    string where = "email='" + frm["txt_email"] + "'";// and Mobile='"+ frm["txt_contactno"] + "'";
                    DataTable dt_dr_details = dal.GetList("pisl_users", "*", where);
                    if (dt_dr_details != null)
                    {
                        if (dt_dr_details.Rows.Count > 0)
                        {
                            string pass = Encrypt(frm["txt_password"].Trim());
                            string col = " password='" + pass + "'";
                            var update = dal.Updation("pisl_users", col, "email='" + dt_dr_details.Rows[0]["email"].ToString() + "'");
                            if (update == 0)
                            {
                                string hostName = Dns.GetHostName();
                                string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                string colName = "activity,email,password,ip,system,description,date";
                                string colValue = "'Change Passs','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + frm["txt_password"].ToString().Trim() + "','" + IP + "','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + pass + "',getdate()";
                                int ins = dal.insertion("tbl_activity", colName, colValue);
                                string message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                MRPLookup.SendSMS("forgot_pwd", dt_dr_details.Rows[0]["Mobile"].ToString(), dt_dr_details.Rows[0]["First_Name"].ToString(), dt_dr_details.Rows[0]["Last_Name"].ToString(), "", "", dt_dr_details.Rows[0]["email"].ToString(), frm["txt_password"].ToString().Trim(), "", "", "", "");
                                Result = "0";
                            }
                            else
                            {
                                Result = "Somthing wrong Error !";
                            }
                        }
                        else
                        {
                            Result = "This is not registered email please check.";
                        }
                    }
                }
                else
                {
                    Result = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                }
            }
            else
            {
                Result = "Password Length must between 8 to 18 letters";
            }
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
    public ActionResult verifyOTP(string otp)
    {
        string Result = "";
        if (otp == Session["otp"].ToString())
        {
            Result = "DONE";
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
}
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using DelhimedicalcouncilORG;
using System.Data;
using System.Security.Cryptography;
using System.Text;
using System.IO;
using System.Drawing;
using System.Net;
using System.Net.Mail;

using System.Text.RegularExpressions;
using System.Data.SqlClient;
using System.Configuration;

namespace DelhimedicalcouncilORG.Controllers
{
public class homeController : Controller
{
    // GET: home
    DAL dal = new DAL();
    MRPLookup lk = new MRPLookup();
    MailFormat mf = new MailFormat();


    private string RetrieveContent(string webPage)
    {
        HttpWebResponse response = null;//used to get response
        StreamReader respStream = null;//used to read response into string
        try
        {
            //create a request object using the url passed in
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(webPage);
            request.Timeout = 10000;

            //go get a response from the page
            response = (HttpWebResponse)request.GetResponse();

            //create a streamreader object from the response
            respStream = new StreamReader(response.GetResponseStream());

            //get the contents of the page as a string and return it
            return respStream.ReadToEnd();
        }
        catch (Exception ex)//houston we have a problem!
        {
            throw ex;
        }
        finally
        {
            //close it down, we’re going home!
            response.Close();
            respStream.Close();
        }
    }

    //using a regular expression, find all of the href or urls
    //in the content of the page
    private void GetAllUrls(string content)
    {
        //regular expression
        string pattern = @"(?:href\s*=)(?:[\s""']*)(?.*?)(?:[\s>""'])";

        //Set up regex object
        Regex RegExpr = new Regex(pattern, RegexOptions.IgnoreCase);

        //get the first match
        Match match = RegExpr.Match(content);

        //loop through matches
        while (match.Success)
        {

            //output the match info
            Console.WriteLine("href match: " + match.Groups[0].Value);
            //WriteToLog(@"C:\matchlog.txt", "href match: " + match.Groups[0].Value + "\r\n");

            Console.WriteLine("Url match: " + match.Groups[1].Value);
            //WriteToLog(@"C:\matchlog.txt", "Url | Location | mailto match: " + match.Groups[1].Value + "\r\n");

            //get next match
            match = match.NextMatch();
        }
    }

    //Write to a log file
    //private void WriteToLog(string file, string message)
    //{
    //using (StreamWriter w = File.AppendText(file))
    //{
    //w.WriteLine(DateTime.Now.ToString() + ": " + message); w.Close();
    //}
    //}




    /// <summary>
    /// ////////////////////////
    /// </summary>
    /// <returns></returns>
    /// 

    public ActionResult Index()
    {




        return View();
    }
    //Start Login//
    public ActionResult login()
    {
        // Session["CAPTCHA"] = "111111";// GetRandomText();
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }

    
    public string Login_Form(string EmailId, string password, string ip, string captcha)
    
    {



        var dateTime = DateTime.Now;
        var tt = dateTime.Hour;


        var dayOfWeek = dateTime.DayOfWeek;
        var day = dayOfWeek.ToString();

        //Decrypt("","");
        //70789
        //554e981f4946f37a4818f1cea3928fe3
        //drtushargupta90@gmail.com
        string message = string.Empty;
        string clientCaptcha = captcha;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            ViewBag.CaptchaError = "Sorry, please write exact text as written above.";
            message = "11,11";
            return message;
        }
        else
            if (Session["checkSession"] == null)
        {
            ip = Request.ServerVariables["REMOTE_ADDR"].ToString();

            string pass = Encrypt(password);
            // string decoded = MRPLookup.Decrypt1(HttpUtility.UrlDecode(pass));
            string cond = "email='" + EmailId + "' and password='" + pass + "' and active!=3 ";//and active=1
            DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
            if (dtLogin.Rows.Count > 0)
            {
                if (Convert.ToString(dtLogin.Rows[0]["Regd_Type"]) == "PROV" && dtLogin.Rows.Count == 1)
                {
                    DataTable dt_temp_D = dal.GetList("pisl_temp_registrations", "Regd_ID,Regd_Type,Final_Status,Approved_By,date_approved,type", "email='" + EmailId.Trim() + "' order by ID desc");
                    for (int i = 0; i < dt_temp_D.Rows.Count; i++)
                    {
                        if (Convert.ToString(dt_temp_D.Rows[i]["Regd_Type"]) != "PROV" && Convert.ToString(dt_temp_D.Rows[i]["Final_Status"]) == "Approved" && Convert.ToString(dt_temp_D.Rows[i]["Approved_By"]) != null && Convert.ToString(dt_temp_D.Rows[i]["date_approved"]) != null && Convert.ToString(dt_temp_D.Rows[i]["type"]) != "service")
                        {



                            string colnameWithValue = "Regd_ID=" + Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]) + ",Regd_Type='" + dt_temp_D.Rows[i]["Regd_Type"].ToString() + "'";
                            string conditions = "S_No=" + Convert.ToInt32(dtLogin.Rows[0]["S_No"]) + "";
                            var Update_paymentUpdate = dal.Updation("pisl_users", colnameWithValue, conditions);
                            if (Update_paymentUpdate == 0)
                            {
                                dtLogin.Rows[0]["Regd_ID"] = Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]);
                                dtLogin.Rows[0]["Regd_Type"] = dt_temp_D.Rows[i]["Regd_Type"].ToString();

                            }
                            break;
                        }
                    }
                }


                for (int i = 0; i < dtLogin.Rows.Count; i++)
                {
                    string hash = Convert.ToString(dtLogin.Rows[i]["hash"]);
                    string decryptedstring = Decrypt(pass, hash);

                    string gid = Convert.ToString(dtLogin.Rows[i]["GID"]);
                    //string active = Convert.ToString(dtLogin.Rows[0]["active"]);
                    if (gid == "0")//Login for doctor
                    {
                        //DataTable dt_lastloginRecord = dal.GetList("pisl_users where email='" + EmailId + "' order by S_No desc", "TOP 1 *", "");
                        if (dtLogin != null && dtLogin.Rows.Count > 0)
                        {

                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[i]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[i]["Regd_Type"]);
                            }
                            else
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                            }
                            if (dtLogin.Rows[i]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[i]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }

                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                        }
                        else
                        {
                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[0]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            }
                            if (dtLogin.Rows[0]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }
                        }


                        message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 2;
                    }
                    else if (gid == "1")//Login for internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["isno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 1;
                            }
                            else
                            {
                                message = "0,6";
                            }
                        }

                        else
                        {
                            message = "0,5";
                        }
                    }
                    else if (gid == "2")//Login for admin and internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["asno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 3;
                            }
                            else
                            {
                                message = "0,6";
                            }

                        }
                        else
                        {
                            message = "0,5";
                        }
                    }
                }
            }
            else
            {
                message = "0,0";
            }
        }
        else
        {
            message = "10,10";
        }
        return message;
    }

    public string Encrypt(string password)
    {
        // Decrypt("", "");
        //string password = @"1234abcd";

        // byte array representation of that string
        byte[] encodedPassword = new UTF8Encoding().GetBytes(password);

        // need MD5 to calculate the hash
        byte[] hash = ((HashAlgorithm)CryptoConfig.CreateFromName("MD5")).ComputeHash(encodedPassword);

        // string representation (similar to UNIX format)
        string encoded = BitConverter.ToString(hash)
           // without dashes
           .Replace("-", string.Empty)
           // make lowercase
           .ToLower();
        return encoded;
    }
    public string Decrypt(string password, string hash1)
    {//https://md5decrypt.net/#answer
        string ss = "";
        string source = "zdNot3oAz5I%3DjRspJg78a%2FY%3D";// "Hello World!";
        MD5 md5 = System.Security.Cryptography.MD5.Create();
        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(password);
        byte[] hash = md5.ComputeHash(inputBytes);

        // step 2, convert byte array to hex string
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < hash.Length; i++)
        {
            sb.Append(hash[i].ToString("X2"));
        }
        return sb.ToString();
    }
    static string GetMd5Hash(MD5 md5Hash, string input)
    {

        // Convert the input string to a byte array and compute the hash.
        byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));

        // Create a new Stringbuilder to collect the bytes
        // and create a string.
        StringBuilder sBuilder = new StringBuilder();

        // Loop through each byte of the hashed data 
        // and format each one as a hexadecimal string.
        for (int i = 0; i < data.Length; i++)
        {
            sBuilder.Append(data[i].ToString("x2"));
        }

        // Return the hexadecimal string.
        return sBuilder.ToString();
    }
    public FileResult GetCaptchaImage()
    {
        MemoryStream ms = new MemoryStream();
        if (Session["CAPTCHA"] != null)
        {
            string text = Session["CAPTCHA"].ToString();

            //first, create a dummy bitmap just to get a graphics object
            Image img = new Bitmap(1, 1);
            Graphics drawing = Graphics.FromImage(img);

            Font font = new Font("Jokerman", 15);
            //measure the string to see how big the image needs to be
            SizeF textSize = drawing.MeasureString(text, font);

            //free up the dummy image and old graphics object
            img.Dispose();
            drawing.Dispose();

            //create a new image of the right size
            img = new Bitmap((int)textSize.Width + 40, (int)textSize.Height + 20);
            drawing = Graphics.FromImage(img);

            Color backColor = Color.SeaShell;
            Color textColor = Color.Red;
            //paint the background
            drawing.Clear(backColor);

            //create a brush for the text
            Brush textBrush = new SolidBrush(textColor);

            drawing.DrawString(text, font, textBrush, 20, 10);

            drawing.Save();

            font.Dispose();
            textBrush.Dispose();
            drawing.Dispose();


            img.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
            img.Dispose();

            return File(ms.ToArray(), "image/png");
        }
        else
        {
            return File(ms.ToArray(), "image/png");
        }
    }
    private string GetRandomText()
    {
        StringBuilder randomText = new StringBuilder();
        string alphabets = "12345679ABCEFGHKLMNPRSTUVWXZ";
        Random r = new Random();
        for (int j = 0; j <= 5; j++)
        {
            randomText.Append(alphabets[r.Next(alphabets.Length)]);
        }
        return randomText.ToString();
    }
    //End Login//
    public ActionResult signup()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    [HttpPost]
    public string sendotpsignup(string txt_Email, string txt_ContactNo)
    {
        string msg = "";
        try
        {
            var CheckEmail = IsEmailandMobileExists(txt_Email, "");
            var checkMobile = IsEmailandMobileExists("", txt_ContactNo);
            if (CheckEmail == false && checkMobile == false)
            {

                Session["otp"] = GetRandomText();
                string OTP = Session["otp"].ToString();
                //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
                string mailBody = "Your OTP is: " + OTP + ". DMC";
                MRPLookup.sendMail(txt_Email.Trim(), "DMC | OTP Verification", mailBody, "", "");

                //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
              

                MRPLookup.SendSMS("otp", txt_ContactNo.Trim(), "", "", OTP, "", "", "", "", "", "", "");
                msg = "0";
            }
            else if (CheckEmail == true && checkMobile == true)
            {
                msg = "Email and Mobile no. are already exists!!";
            }
            else
            {
                if (checkMobile == true && CheckEmail == false)
                {
                    msg = "Mobile No. is Already Exists!!";
                }
                else if (CheckEmail == true && checkMobile == false)
                {
                    msg = "Email Address is Already Exists!!";
                }


            }
        }
        catch (Exception ex)
        {
            msg = "1";
        }
        return msg;
    }
    public bool IsEmailandMobileExists(string email, string mobile)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        try
        {
            tableName = "pisl_users";
            colname = "*";
            if (!string.IsNullOrEmpty(email))
            {
                cond = "email='" + email + "'";
            }
            if (!string.IsNullOrEmpty(mobile))
            {
                cond = "mobile='" + mobile + "'";
            }
            //cond=
            DataTable dt_datacheck = dal.GetList(tableName, colname, cond);
            if (dt_datacheck != null && dt_datacheck.Rows.Count > 0)
            {
                IsExists = true;
            }

        }
        catch (Exception ex)
        {
            IsExists = false;
            throw;
        }
        return IsExists;
    }

    public ActionResult IsDocDataExists(string regd_type, string regd_no, string DOB, string PassingYear)
    {
        //List<dynamic> list = new List<dynamic>();
        string message = "";
        try
        {
            var tbl_name = "";

            var userExists = IsRegd_Exists(regd_type, regd_no, DOB, PassingYear, out tbl_name);
            if (userExists == true && tbl_name == "pisl_users")
            {

                message = "Already Registered With us. Please Login With Your Credential";
            }
            else
                if (userExists == true && tbl_name == "pisl_fresh_registration_mst")
            {
                message = "Your Registration No. is Expired. Please SignUp Again.";
            }
            else
            {
                message = "NotExists";
                //message = "Your Registration No. is Not Exists!";
            }
        }
        catch (Exception ex)
        {

        }
        return Json(message, JsonRequestBehavior.AllowGet);
    }
    public bool IsRegd_Exists(string regd_type, string regd_no, string DOB, string PassingYear, out string Tbl_Name)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        Tbl_Name = "";
        DataTable dt_UserCheck = null;
        try
        {
            tableName = "pisl_users";
            colname = "*";
            cond = "Regd_Type='" + regd_type + "' and Regd_ID='" + regd_no.Trim() + "'";
            dt_UserCheck = dal.GetList(tableName, colname, cond);
            if (dt_UserCheck == null || dt_UserCheck.Rows.Count == 0)
            {
                tableName = "pisl_fresh_regi_qual_mst";
                colname = "*";
                cond = "quali_type='Basic Qualification' AND Regd_ID='" + regd_no + "' "
                    + "AND Regd_Type='" + regd_type + "' AND passing_date =  '" + PassingYear.Trim() + "'";
                dt_UserCheck = dal.GetList(tableName, colname, cond);
                if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                {
                    Tbl_Name = "pisl_fresh_regi_qual_mst";

                    tableName = "pisl_fresh_registration_mst";
                    colname = "*";
                    cond = "Regd_ID='" + regd_no + "' AND Regd_Type='" + regd_type + "'";
                    dt_UserCheck = dal.GetList(tableName, colname, cond);
                    if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                    {
                        Tbl_Name = "pisl_fresh_registration_mst";
                        IsExists = true;
                    }
                    else
                    {
                        IsExists = false;
                    }
                }
                else
                {

                    IsExists = false;
                }
            }
            else
            {
                Tbl_Name = "pisl_users";
                IsExists = true;
            }
        }
        catch (Exception ex)
        {


            throw;
        }
        return IsExists;
    }

    [HttpPost]
    public string createsignup(string txt_Email, string txt_ContactNo, string txt_FirstName, string txt_MiddleName,
        string txt_LastName, string txt_Password, string txt_ConfirmPassword, string txt_DOB, bool chk_TermCondition,
        string Captcha, string Regd_ID, string txtOTP, string ddl_regType, string txt_oldData, string passingYear)
    {
        string message = "";
        string dob = lk.convertdate1(txt_DOB);
        string Tbl_Name = "";
        try
        {
            if (!IsEmailandMobileExists(txt_Email, ""))
            {
                if (!IsEmailandMobileExists("", txt_ContactNo))
                {
                    if (ddl_regType == "FRS" || ddl_regType == "RRE")
                    {
                        if (IsRegd_Exists(ddl_regType, Regd_ID, dob, passingYear, out Tbl_Name))
                        {
                            Tbl_Name = Tbl_Name;
                            if (Tbl_Name == "pisl_users")
                            {
                                //if Pisl_user Table Record Exists but no Email and Mobile No exists
                                //in this case update the Email and Mobile No.
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        DataTable dt_Email_Mobile_Check = dal.GetList("pisl_users",
                                                        "top 1*", " Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                        if (dt_Email_Mobile_Check != null)
                                                        {
                                                            if (dt_Email_Mobile_Check.Rows.Count > 0)
                                                            {
                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_Email_Mobile_Check.Rows[0]["email"])))
                                                                {
                                                                    string pass = Encrypt(txt_Password.Trim());
                                                                    string hash = Encrypt(MRPLookup.RandamStringGenerator1());
                                                                    var updateDt = dal.Updation("pisl_users",
                                                                        "email='" + txt_Email.Trim() + "',mobile='" + txt_ContactNo.Trim() + "',password='" + pass + "',hash='" + hash + "'",
                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                    if (updateDt == 0)
                                                                    {
                                                                        DataTable dt_fresh_Check = dal.GetList("pisl_fresh_registration_mst",
                                                                            "top 1 * ",
                                                                            "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                        if (dt_fresh_Check != null)
                                                                        {
                                                                            if (dt_fresh_Check.Rows.Count > 0)
                                                                            {
                                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_fresh_Check.Rows[0]["Email"])))
                                                                                {
                                                                                    var updateDt_fresh = dal.Updation("pisl_fresh_registration_mst",
                                                                                        "Email='" + txt_Email.Trim() + "',Mobile='" + txt_ContactNo.Trim() + "'",
                                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");

                                                                                    if (updateDt_fresh != 0)
                                                                                    {
                                                                                        message = "Error!!";
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                                        MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                                        message = "Please, Check Your Mail For Login Details";
                                                                        //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                                        MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                                    }
                                                                    else
                                                                    {
                                                                        message = "Error!!";
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    message = "Your record are already Exists with us!!";
                                                                }
                                                            }
                                                        } //End Updation
                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }
                            else if (Tbl_Name == "pisl_fresh_regi_qual_mst" || Tbl_Name == "pisl_fresh_registration_mst")
                            {
                                //Insert Login Record in Pisl_Users
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        string pass = Encrypt(txt_Password.Trim());
                                                        string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                        if (string.IsNullOrEmpty(Regd_ID))
                                                        {
                                                            Regd_ID = "0";
                                                        }
                                                        //if (txt_oldData != "")
                                                        //{
                                                        //    string colnamemst = "*";
                                                        //    string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        //    DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        //    if (dtrmst.Rows.Count > 0)
                                                        //    {
                                                        //        string oldtype = "";
                                                        //        if (ddl_regType == "FRS")
                                                        //        {
                                                        //            oldtype = "service";
                                                        //        }
                                                        //        else if (ddl_regType == "RRE")
                                                        //        {
                                                        //            oldtype = "reregi";
                                                        //        }
                                                        //        var corrAddress1 = dtrmst.Rows[0]["Corr_Add_Line_1"].ToString();
                                                        //        var corrAddress2 = dtrmst.Rows[0]["Corr_Add_Line_2"].ToString();
                                                        //        var perAddress1 = dtrmst.Rows[0]["Per_Add_Line_1"].ToString();
                                                        //        var perAddress2 = dtrmst.Rows[0]["Per_Add_Line_2"].ToString();

                                                        //        string colNameold = "Regd_ID,Regd_Type,type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,date_entered,Father_Name,POB,Gender,Nationality,Corr_Add_Line_1,Corr_Add_Line_2,Corr_Add_State,Corr_Add_Pincode,Corr_Add_Country,Per_Add_Line_1,Per_Add_Line_2,Per_Add_Line_State,Per_Add_Line_Pincode,Per_Add_Line_Country";

                                                        //        string colValueold = "'" + Regd_ID + "','" + ddl_regType + "','" + oldtype + "','" + txt_FirstName + "','" + txt_MiddleName + "','"  + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "', '"+ lk.GetDateTime()+ "' ,'"+ dtrmst.Rows[0]["Father_Name"] + "','" + dtrmst.Rows[0]["POB"] + "','" + dtrmst.Rows[0]["Gender"] + "','" + dtrmst.Rows[0]["Nationality"] + "','" + corrAddress1 + "','" + corrAddress2 + "','" + dtrmst.Rows[0]["Corr_Add_State"] + "','" + dtrmst.Rows[0]["Corr_Add_Pincode"] + "','" + dtrmst.Rows[0]["Corr_Add_Country"] + "','" + perAddress1 + "','" + perAddress2 + "','" + dtrmst.Rows[0]["Per_Add_Line_State"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Pincode"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Country"] + "'";
                                                        //        int insold = dal.insertion("pisl_temp_registrations", colNameold, colValueold);
                                                        //    }
                                                        //}
                                                        Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                        string colnamemst = "*";
                                                        string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        DateTime txtdob1 = Convert.ToDateTime(dtrmst.Rows[0]["DOB"]);
                                                        string txtdob = txtdob1.ToShortDateString();

                                                        string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                            + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                        string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + dtrmst.Rows[0]["First_Name"].ToString() + "','" + dtrmst.Rows[0]["Middle_Name"].ToString() + "',"
                                                            + "'" + dtrmst.Rows[0]["Last_Name"].ToString() + "','" + txtdob + "','" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                            + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                        int ins = dal.insertion("pisl_users", colName, colValue);
                                                        if (ins == 0)
                                                        {
                                                            string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                            MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                            message = "Please, Check Your Mail For Login Details";
                                                            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                            MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                        }
                                                        else
                                                        {
                                                            message = "Try after some time";
                                                        }

                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }

                        }
                        else
                        {
                            message = "Your Registration No and Passing Year is Not Exist with Us";
                        }
                    }
                    else
                    {
                        //Insert Login Record in Pisl_Users
                        if (chk_TermCondition == true)
                        {
                            if (txtOTP == Session["otp"].ToString())
                            {
                                if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                {
                                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                    Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                    if (foundMatch == true)
                                    {
                                        if (txt_Password == txt_ConfirmPassword)
                                        {
                                            if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                            {
                                                //if (Tbl_Name== "pisl_users") { }
                                                string pass = Encrypt(txt_Password.Trim());
                                                string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                if (string.IsNullOrEmpty(Regd_ID))
                                                {
                                                    Regd_ID = "0";
                                                }
                                                Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                if (ddl_regType == "-1")
                                                {
                                                    ddl_regType = "";
                                                }


                                                string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                    + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                int ins = dal.insertion("pisl_users", colName, colValue);
                                                if (ins == 0)
                                                {
                                                    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                    message = "Please, Check Your Mail";
                                                    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                }
                                                else
                                                {
                                                    message = "Try after some time";
                                                }

                                                //string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                //    + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                //string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                //    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                //    + "1,0,0,'"+ lk.GetDateTime()+ "','','" + Regd_ID1 + "'";
                                                //int ins = dal.insertion("pisl_users", colName, colValue);
                                                //if (ins == 0)
                                                //{
                                                //    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                //    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                //    message = "Please, Check Your Mail";
                                                //    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                //    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                //}
                                                //else
                                                //{
                                                //    message = "Try after some time";
                                                //}
                                            }
                                            else
                                            {
                                                message = "Enter A Valid Email";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password and Confrim Password is Not Same";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                    }
                                }
                                else
                                {
                                    message = "Password Length must between 8 to 18 letters";
                                }
                            }
                            else
                            {
                                message = "Enter the Valid OTP";
                            }
                        }
                        else
                        {
                            message = "Please check the Terms and Conditions";
                        }

                        //}
                    }
                }
                else
                {
                    message = "Mobile No. is Already Exists";
                }
            }
            else
            {
                message = "Email Already exists!!";
            }
            //
            //Cut the Code From There

        }
        catch
        {

        }
        return message;
    }

    public ActionResult SignupVerification()
    {
        string message = "";
        try
        {
            if (Request.QueryString["email"] != null && Request.QueryString["hash"] != null)
            {
                string email = Request.QueryString["email"];
                string hash = Request.QueryString["hash"];
                string cond = "Email='" + email.Trim() + "' and Hash='" + hash.Trim() + "' and Active=0";
                DataTable dt = dal.GetList("pisl_users", "*", cond);
                if (dt.Rows.Count > 0)
                {
                    int upd = dal.Updation("pisl_users", "Active=1", cond);
                    if (upd == 0)
                    {
                        message = "Your account has been activated, you can now login";
                    }
                    else
                    {
                        message = "Try after some time";
                    }
                }
                else
                {
                    message = "The url is either invalid or you already have activated your account.";
                }
            }
            else
            {
                message = "Invalid approach, please use the link that has been send to your email.";
            }
        }
        catch
        { }
        ViewBag.lbl_status = message;
        return View();
    }
    public ActionResult contact()
    {
        return View();
    }

    public ActionResult about()
    {
        return View();
    }
    public ActionResult faqs()
    {
        return View();
    }
    // Start forgot password
    public ActionResult forgotpassword()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public string sendCode(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        string message = string.Empty;
        try
        {
            string clientCaptcha = CaptchaCaseID;
            string serverCaptcha = Session["CAPTCHA"].ToString();
            if (!clientCaptcha.Equals(serverCaptcha))
            {
                ViewBag.ShowCAPTCHA = serverCaptcha;
                message = "Sorry, please write exact text as written below.";
            }
            else
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' ";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string name = Convert.ToString(dt.Rows[0]["First_Name"]);
                                        string Mobile = Convert.ToString(dt.Rows[0]["Mobile"]);

                                        MailFormat mf = new MailFormat();
                                        string code = MRPLookup.RandamStringGenerator1();
                                        string mailBody = mf.SendCodeOnMail(name, code);
                                        MRPLookup.SendSMS("otp", Mobile, "", "", code, "", "", "", "", "", "", "");
                                        string colValue = "Code='" + code.Trim() + "'";
                                        int updCode = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "'");
                                        if (updCode == 0)
                                        {
                                            string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(), "Reset Password Code " + System.DateTime.Now + "", mailBody, "", "");
                                            if (sendmailStatus != "Technical issue! Please try agiain")
                                            {
                                                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

                                            }
                                            else
                                            {
                                                message = sendmailStatus;
                                            }
                                        }
                                        else
                                        {
                                            message = "Please try after some time.";
                                        }

                                    }
                                    else
                                    {
                                        message = "Enter a New Password.";
                                    }
                                }
                                else
                                {
                                    message = "Your Email And Mobile Number Do not Match with DMC Registered Users.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
        }
        catch (Exception ex)
        {

        }
        return message;
    }
    public string forgotpasswordCaseID(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact text as written below.";
            // return message;
        }
        else
        {
            if (txtCode != "0")
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string mobile = Convert.ToString(dt.Rows[0]["Mobile"]);
                                    string firstName = Convert.ToString(dt.Rows[0]["First_Name"]);
                                    string lastName = Convert.ToString(dt.Rows[0]["Last_Name"]);
                                    //string new_password = Encrypt(MRPLookup.RandamStringGenerator1());
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string colValue = "password='" + new_PasswordMD5.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                                        updPassword = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                        if (updPassword == 0)
                                        {
                                            updPassword = dal.Updation("pisl_users", "Code='0'", "Email='" + txtEmail.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                            string hostName = Dns.GetHostName();
                                            string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                            string colName = "activity,email,password,ip,system,description,date";
                                            colValue = "'Change Passs','" + txtEmail + "','" + txtPassword + "','" + IP + "','" + mobile + "','" + new_PasswordMD5 + "',getdate()";
                                            int ins = dal.insertion("tbl_activity", colName, colValue);
                                            message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                            MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                                            // Send SMS and mail for password reset.
                                            

                                        }
                                        else
                                        {
                                            message = "Please try after some time";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please try another password.";
                                    }

                                }
                                else
                                {
                                    message = "Your Details Dont Match or You have NOT registered with DMC.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
            else
            {
                message = "Code not match";
            }
        }
        return message;
    }

    public ActionResult introduction()
    {
        return View();
    }

    public ActionResult powers()
    {
        return View();
    }

    public ActionResult thecouncil()
    {
        return View();
    }

    //public ActionResult gallery()
    //{
    //    return View();
    //}
    public ActionResult Gallery()
    {
        return View();
    }

    public ActionResult accomplishments()
    {
        return View();
    }

    public ActionResult registration()
    {
        return View();
    }
    public ActionResult cmeperforma()
    {
        return View();
    }
    public ActionResult cmeonline()
    {
        return View();
    }
    public ActionResult cmerequirements()
    {
        return View();
    }
    public ActionResult cmepassbook()
    {
        return View();
    }
    public ActionResult duties()
    {
        return View();
    }
    public ActionResult inst_general()
    {
        return View();
    }

    public ActionResult inst_fees()
    {
        return View();
    }
    public ActionResult inst_docupload()
    {
        return View();
    }
    public ActionResult disclaimer()
    {
        return View();
    }
    public ActionResult feestructure()
    {
        return View();
    }
    public ActionResult privacypolicy()
    {
        return View();
    }
    public ActionResult termofuse()
    {
        return View();
    }

    public ActionResult litigations()
    {
        return View();
    }


    public ActionResult council_meeting()
    {
        return View();
    }
    public ActionResult Cme_workshop_Conference()
    {
        return View();
    }

    public ActionResult Media_room()
    {
        return View();
    }
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    public ActionResult LogOut()
    {
        Session.Abandon();
        return RedirectToAction("Index", "Home");
    }
    public ActionResult SearchElectrolData(string regid)
    {
        string msg = "";
        DataTable dtSearch = dal.GetList("tbl_electrolData", "*", "RegNo='" + regid.Trim() + "'");
        if (dtSearch.Rows.Count > 0)
        {
            return Json(MRPLookup.DataTableToJSONWithJSONNet(dtSearch), JsonRequestBehavior.AllowGet);
        }
        else
        {
            msg = "Data not found";
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
    }
    public ActionResult SearchElectrolDataUpdate(string regid)
    {
        int upd = 1;
        upd = dal.Updation("tbl_electrolData", "Status='Completed',Date='" + lk.GetDateTime() + "'", "ID='" + regid.Trim() + "'");
        if (upd == 0)
        {

            return Json(upd, JsonRequestBehavior.AllowGet);
        }
        else
        {
            return Json(upd, JsonRequestBehavior.AllowGet);
        }
    }

    public ActionResult TotalCount()
    {
        DataTable dtcntCompleted = dal.GetList("tbl_electrolData", "count(*) as cntCompleted", "status='Completed'");
        DataTable dtcntNotCompleted = dal.GetList("tbl_electrolData", "count(*) as cntNotCompleted", "status ='Valid'");
        string totalCmpleteStatus = "Completed: " + Convert.ToString(dtcntCompleted.Rows[0]["cntCompleted"]) + "  Not Completed: " + Convert.ToString(dtcntNotCompleted.Rows[0]["cntNotCompleted"]);
        return Json(totalCmpleteStatus, JsonRequestBehavior.AllowGet);
    }
    public ActionResult Renewal_Reminder(string key)
    {
        string msg = "";
        try
        {

            key = "1111";
            string validKey = "1111";
            // MRPLookup.SendSMS("Renewal_expired_tdy", "9899849487", "Dinesh", "", "", "", "", "", "", "", "", "");
            if (key == validKey)
            {
                string expiry_frtyfive = Convert.ToDateTime(DateTime.Now.AddDays(30)).ToString("yyyy-MM-dd");//date(('Y-m-d'), strtotime('+30 days'));
                string expiry_tdy = Convert.ToDateTime(DateTime.Now).ToString("yyyy-MM-dd");//date('Y-m-d');
                string expiry_pastfifty = Convert.ToDateTime(DateTime.Now.AddDays(-50)).ToString("yyyy-MM-dd");// date(('Y-m-d'), strtotime('-50 days'));
                string cond = "(Expiry_Date = '" + expiry_frtyfive + "' OR  Expiry_Date = '" + expiry_tdy + "' OR Expiry_Date = '" + expiry_pastfifty + " ') AND (Mobile !='' OR  Email !='')";
                //DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", cond);
                string strConnString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                SqlConnection con = new SqlConnection(strConnString);
                //SqlConnection con = new SqlConnection(@"Data Source=103.20.212.254,1232;Initial Catalog=dmcaws_New;User Id=sa;Password=bD$x89K3$@K9UaQsKQ");
                //SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-PKTADCN;Initial Catalog=dmcaws1;integrated security=true");
                con.Open();
                SqlCommand cmd = new SqlCommand("select * from pisl_fresh_registration_mst where " + cond + "", con);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                con.Close();
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string First_Name = Convert.ToString(dt.Rows[i]["First_Name"]);
                        string Last_Name = Convert.ToString(dt.Rows[i]["Last_Name"]);
                        string Regd_ID = Convert.ToString(dt.Rows[i]["Regd_ID"]);
                        string Regd_Type = Convert.ToString(dt.Rows[i]["Regd_Type"]);
                        string Mobile = Convert.ToString(dt.Rows[i]["Mobile"]);
                        string Expiry_Date = Convert.ToDateTime(dt.Rows[i]["Expiry_Date"]).ToString("yyyy-MM-dd");
                        string date_approved = Convert.ToDateTime(dt.Rows[i]["date_approved"]).ToString("yyyy-MM-dd");
                        string tdydate = Convert.ToDateTime(System.DateTime.Now).ToString("yyyy-MM-dd");
                        string to = Convert.ToString(dt.Rows[i]["Email"]);

                        string subject1 = "Renewal of Registration with Delhi Medical Council"; //// Give the email a subject
                        string subject2 = "Expiry of Registration with Delhi Medical Council";
                        string subject3 = "Deletion of Regd Number with Delhi Medical Council";
                        string message1 = "";
                        message1 += "Dear Dr " + First_Name + " " + Last_Name + ",";
                        message1 += "Greetings from Delhi Medical Council!!";

                        message1 += "   This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council is due for renewal.";
                        message1 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting ";
                        message1 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message1 += "For inclusion of any additional qualification, please produce the original degree at the office of Delhi Medical Council, so that your additional ";
                        message1 += "qualification certificate can be verified with the original document. The original degree / diploma Certificate will be returned immediately after verification. ";

                        message1 += "<b>This is a system generated email and we request you not to reply to this email. Please ignore if already applied.</b>";

                        message1 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message1 += "Warm Regards,";

                        message1 += "Delhi Medical Council.";
                        message1 += "Ground Floor, B Wing, B Block-1";
                        message1 += "DMCR IT Park, Shastri Park";
                        message1 += "New Delhi-110053";
                        message1 += "Tel: +91-011-46621000";
                        message1 += "Website - www.delhimedicalcouncil.org	 ";

                        string message2 = "";
                        message2 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message2 += "Greetings from Delhi Medical Council!!";

                        message2 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council expired on " + Expiry_Date + " and  is due for renewal. ";

                        message2 += "We request you to kindly renew your registration within thirty days and keep your registration in force. You can renew your registration online by visiting ";
                        message2 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message2 += "Please take note that in case you do not apply for renewal of registration within the stipulated period, your name shall be removed from the State Medical ";
                        message2 += "Register maintained by the Delhi Medical Council in accordance with the provisions of Section 22 of the Delhi Medical Council Act, 1997 which will debar";
                        message2 += "you from practicing Allopathic in the state of Delhi.";

                        message2 += "<b>Kindly ignore this email, in case you have already applied for renewal of registration</b>";

                        message2 += "This is a system generated email and we request you not to reply to this email.";

                        message2 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message2 += "Warm Regards,";

                        message2 += "Delhi Medical Council.";
                        message2 += "Ground Floor, B Wing, B Block-1";
                        message2 += "DMCR IT Park, Shastri Park";
                        message2 += "New Delhi-110053";
                        message2 += "Tel: +91-011-46621000";
                        message2 += "Website - www.delhimedicalcouncil.org";

                        string message3 = "";
                        message3 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message3 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council has expired on " + Expiry_Date + ". You ";
                        message3 += "failed to renew the registration with Delhi Medical Council, in spite of notices/Emails (public / individual) issued for renewal. Hence, in accordance with the ";
                        message3 += "provisions of section 22(3) of Delhi Medical Council Act, 1997; your name under Registration number " + Regd_ID + "-" + Regd_Type + "  has been removed from the State ";
                        message3 += "Medical Register of Delhi Medical Council.";

                        message3 += "Please note that if you wish to have your name re-entered in the State Medical Register of Delhi Medical Council, you may do so, by paying fees as detailed herein below,";
                        message3 += "in addition to fee for renewal of registration (Rs. 2000/-)";

                        message3 += "Late fees for non-renewal of registration:-";
                        message3 += "(a) upto six months from the date from 		Rs. 1000/- (Rupees One Thousand only)";
                        message3 += "    which registration is due for renewal";
                        message3 += "(b) for period more than six months 	    Rs. 2000/- (Rupees One Thousand only)";
                        message3 += "     but upto one year";
                        message3 += "(c) for period more than one year 			Rs. 1000/- (Rupees One Thousand per year and Part thereof)";

                        message3 += "Please also note that any person servicing or practicing modern scientific system of medicine (allopathy) in Delhi without holding valid registration with Delhi Medical Council is liable for action under the provisions of Delhi Medical Council Act, 1997.";
                        message3 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting www.delhimedicalcouncil.org and apply under Online Renewal & Services.";

                        message3 += "<b>Kindly ignore this letter, in case you have already applied for renewal of registration</b>";

                        message3 += "This is a system generated email and we request you not to reply to this email.";

                        message3 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message3 += "Warm Regards,";

                        message3 += "Delhi Medical Council.";
                        message3 += "Ground Floor, B Wing, B Block-1";
                        message3 += "DMCR IT Park, Shastri Park";
                        message3 += "New Delhi-110053";
                        message3 += "Tel: +91-011-46621000";
                        message3 += "Website - www.delhimedicalcouncil.org,";

                        string headers = "From: DMC Registration System <registration@delhimedicalcouncil.org>' . '\r\n'"; // Set from headers

                        string message = "";
                        string subject = "";
                        string trigger = "";
                        string msgtxt = "";
                        if (Convert.ToDateTime(Expiry_Date) > Convert.ToDateTime(tdydate))
                        {
                            message = message1;
                            subject = subject1;
                            trigger = "Renewal_due_reminder";
                            msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Renewal of your DMC Regd No " + Regd_ID + " - " + Regd_Type + " is due. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }

                        }
                        else if (Convert.ToDateTime(Expiry_Date) == Convert.ToDateTime(tdydate))
                        {
                            message = message2;
                            subject = subject2;
                            trigger = "Renewal_expired_tdy";
                            // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Registration of DMC Regd No " + Regd_ID + " - " + Regd_Type + " expired today. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }
                        }
                        //else if (Convert.ToDateTime(Expiry_Date) < Convert.ToDateTime(tdydate))
                        //{
                        //    message = message2;
                        //    subject = subject2;
                        //    trigger = "Renewal_expired_fifty";
                        //   // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Your  ID " + Regd_ID + " - " + Regd_Type + " has been removed from the State Medical Register of DMC . Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                        //    if (!string.IsNullOrEmpty(to))
                        //    {
                        //       // MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //    if (!string.IsNullOrEmpty(Mobile))
                        //    {
                        //       // MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(to))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(Mobile))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}

                    }
                }

            }
            else
            {
                msg = "Key not match";
                string path = "C:\\TestService\\ServiceLog.txt";
                using (StreamWriter writer = new StreamWriter(path, true))
                {
                    writer.WriteLine(string.Format(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt"), DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt")));
                    writer.Close();
                }
            }
        }
        catch
        {

        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult certverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["cert"];
            string Regd_type = "";
            string regd_id = "";

            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["cert"]);
            var splitedString = decodedstr.Split('-');
            Regd_type = splitedString[0];
            regd_id = splitedString[1];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            switch (Regd_type)
            {
                case "RRE":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "FRS":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "PROV":
                    db = "pisl_prov_registration_mst";
                    qual_db = "pisl_prov_regi_qual_mst";
                    break;

                default:
                    Message = "This certificate cannnot be verified";
                    break;

            }

            var check_namechange = dal.GetList("tbl_NameChangeHistory_New", "CaseID,Name=(case when (New_MiddleName is null or  New_MiddleName='') then New_FirstName+' '+New_LastName when (New_MiddleName is null or  New_MiddleName='') and (New_LastName is null or New_LastName='') then New_FirstName else New_FirstName+' '+New_MiddleName+' '+New_LastName end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_namechange.Rows.Count > 0)
            {
                string CaseID = check_namechange.Rows[0]["CaseID"].ToString();
                ViewBag.Name = check_namechange.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                if (check_Doctordata.Rows.Count > 0)
                {
                    string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
                    ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                    DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                    DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                    DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                    ViewBag.qual = dt_qual;
                    ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                    ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                    Message = "success";
                }
                else
                {
                    Message = "This Entry Cannot be Verified";
                }
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;

        return View();
    }
    public ActionResult VeryfyCertificate(string value)
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        var qstring = value;
        var decodedStr = MRPLookup.Decrypt1(qstring);
        var splitedString = decodedStr.Split('-');
        var Regd_type = splitedString[0];
        var regd_id = splitedString[1];
        var db = "";
        var qual_db = "";
        //string regdtype=
        switch (Regd_type)
        {
            case "RRE":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "FRS":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "PROV":
                db = "pisl_prov_registration_mst";
                qual_db = "pisl_prov_regi_qual_mst";
                break;

            default:
                Message = "This certificate cannnot be verified";
                break;

        }
        var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
        if (check_Doctordata.Rows.Count > 0)
        {
            string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
            DataTable dt_Documents = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
            DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign' ");

        }
        else
        {
            Message = "This Entry Cannot be Verified";
        }
        return Json("", JsonRequestBehavior.AllowGet);
    }
    public ActionResult letterverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["letter"];
            string Regd_type = "";
            string regd_id = "";
            string ID = "";
            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["letter"]);
            var splitedString = decodedstr.Split('-');
            ID = splitedString[0];
            Regd_type = splitedString[1];
            regd_id = splitedString[2];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            //switch ()
            //{
            //    case "RRE":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "FRS":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "PROV":
            //        db = "pisl_prov_registration_mst";
            //        qual_db = "pisl_prov_regi_qual_mst";
            //        break;

            //    default:
            //        Message = "This certificate cannnot be verified";
            //        break;

            //}
            var letter_type = "";
            var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,date_approved,drg_from,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "ID='" + ID + "' and Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_Doctordata.Rows.Count > 0)
            {
                switch (check_Doctordata.Rows[0]["drg_from"].ToString())
                {
                    case "noc":
                        letter_type = "No Objection Certificate";
                        break;

                    case "gdst":
                        letter_type = "Good Standing Certificate";
                        break;
                }
                ViewBag.lettertype = letter_type;
                ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("pisl_fresh_regi_qual_mst", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='Sign'");
                if (!string.IsNullOrEmpty(check_Doctordata.Rows[0]["date_approved"].ToString()))
                {
                    ViewBag.DateApproved = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).ToString("dd MMMM,yyyy");
                    ViewBag.expiry = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).AddDays(-1).AddMonths(6).ToString("dd MMMM, yyyy");
                }
                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(ID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                Message = "This Entry Cannot be Verified";
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;
        return View();
    }
    public ActionResult Regi_search()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public ActionResult search_ur_dr()
    {

        return View();
    }
    public ActionResult regi_search_submit(string Regid, string Types)
    {
        try
        {


            string regid = Request.QueryString["Regd_ID"];
            string type = Request.QueryString["Type"]; ;
            //string type = frm["type"].Trim();
            //string regid = frm["regid"].Trim();
            string colname = "*";
            string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "' ORDER BY S_No DESC";
            DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
            if (dt.Rows.Count > 0)
            {
                DateTime ddob = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                DateTime dapproved = Convert.ToDateTime(dt.Rows[0]["date_approved"].ToString());
                DateTime dexpiry = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                ViewBag.dateapproved = dapproved.ToShortDateString();
                ViewBag.expirydate = dexpiry.ToShortDateString();
                ViewBag.dob = ddob.ToShortDateString();
                ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


                DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
                if (result_remarks.Rows.Count > 0)
                {
                    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    {
                        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    }
                }
                DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
                if (qualificationdt.Rows.Count > 0)
                {
                    ViewBag.qualdata = qualificationdt;
                }

            }
            return View();
        }
        catch (Exception ex)
        {
            return View();
        }
    }
    public ActionResult regi_search_submits(FormCollection frm)
    {

        string clientCaptcha = frm["CL_CAPCHA"].ToString();
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;

            return Json("-1");
        }
        string msg = "";
        //string type = Regd_ID;
        //string regid = Type;
        string type = frm["type"].Trim();
        string regid = frm["regid"].Trim();
        string colname = "*";
        string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
        if (dt.Rows.Count > 0)
        {
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
            if (result_remarks.Rows.Count > 0)
            {
                for (int i = 0; i < result_remarks.Rows.Count; i++)
                {
                    ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                }
            }
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult search_ur_dr_submit(FormCollection frm)
    {
        try
        {



            string First_Name = Request.QueryString["First_Name"];
            string Last_Name = frm["Last_Name"];
            string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
            string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
            string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
            string Mobile = Request.QueryString["Mobile"];
            string Email = Request.QueryString["Email"];

            if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Last_Name) && !string.IsNullOrEmpty(Corr_Add_Line_1) && !string.IsNullOrEmpty(Corr_Add_Line_2) && !string.IsNullOrEmpty(Corr_Add_Pincode) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Mobile='" + Mobile + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}

                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "Email='" + Email + "' and Mobile='" + Mobile + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }


            return View();
        }
        catch (Exception ex)
        {
            return View();

        }
    }


    public ActionResult search_ur_dr_submit2(FormCollection frm)
    {
        string msg = "";
        string First_Name = frm["First_Name"];
        string Last_Name = frm["Last_Name"];
        string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
        string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
        string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
        string Mobile = frm["Mobile"];
        string Email = frm["Email"];

        string condtions = "First_Name='" + First_Name.Trim() + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
        if (dt.Rows.Count > 0)
        {
            //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
            //if (result_remarks.Rows.Count > 0)
            //{
            //    for (int i = 0; i < result_remarks.Rows.Count; i++)
            //    {
            //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
            //    }
            //}
            string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", condtions2);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        else
        {
            msg = "Not Data Found";
        }


        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult cme()
    {
        return View();
    }
    public ActionResult status_comp2021()
    {
        return View();
    }

    public ActionResult ForgetEmailPasswordProv()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public dynamic getForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB)
    {
        //select pu.First_Name,pu.Last_Name,pu.email,pu.Mobile from pisl_users as pu inner join pisl_prov_regi_qual_mst as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type where pu.Regd_ID = 18430 and pu.DOB = '1991-10-26' and pfq.passing_date = 2016 and pfq.quali_course = 'M.B.B.S.'
        List<dynamic> OBJ = new List<dynamic>();
        string dob = lk.convertdate1(txt_DOB);
        try
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else {
                db = "pisl_fresh_regi_qual_mst";
            }

            DataTable dt1 = dal.GetList("pisl_users as pu inner join "+db+" as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType.ToUpper() + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                OBJ.Add(MRPLookup.Convert_DatatableToList(dt1).ToList());
                return Json(OBJ, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        catch (Exception)
        {

            return null;
        }
        
    }

    public string otpForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail)
    {
        string message = string.Empty;
        string dob = lk.convertdate1(txt_DOB);
        string db = "";
        if (txtRegType.ToUpper() == "PROV")
        {
            db = "pisl_prov_regi_qual_mst";
        }
        else
        {
            db = "pisl_fresh_regi_qual_mst";
        }
        DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
        if (dt1.Rows.Count > 0)
        {
            MailFormat mf = new MailFormat();
            string code = MRPLookup.RandamStringGenerator1();
            Session["provotp"] = code;
            string mailBody = "Your OTP is: " + code + ". DMC";
            string sendmailStatus= MRPLookup.sendMail(txtEmail.Trim(), "DMC | OTP Verification", mailBody, "", "");


            //string mailBody = mf.SendCodeOnMail(dt1.Rows[0]["First_Name"].ToString(), code);
            //string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(),"Reset Password Code" + System.DateTime.Now + "", mailBody, "", "");
            if (sendmailStatus != "Technical issue! Please try agiain")
            {
                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

            }
            else
            {
                message = sendmailStatus;
            }


            return message;
        }
        return "Some thing went wrong...!";
    }

    public string submitForgetEmailPasswordProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail, string txtMobileNo,string CaptchaCaseID,string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (Session["provotp"].ToString()!=txtCode)
        {
            return "Otp incorrect";
        }

        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact Captcha as written below.";
            // return message;
        }
        else
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else
            {
                db = "pisl_fresh_regi_qual_mst";
            }
            string dob = lk.convertdate1(txt_DOB);
            DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile,pu.Regd_ID,pu.Regd_Type", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                if (Convert.ToString(dt1.Rows[0]["Regd_ID"]) != "" && Convert.ToString(dt1.Rows[0]["Regd_Type"]) != "")
                {
                      string colValue = "Email='" + txtEmail.Trim() + "',Mobile='" + txtMobileNo.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                      updPassword = dal.Updation("pisl_users", colValue, "Regd_ID='"+dt1.Rows[0]["Regd_ID"].ToString()+ "' and Regd_Type='"+ dt1.Rows[0]["Regd_Type"].ToString() + "'");
               
                   
                     var tblCurrentStatuscolomns = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                     var Currentupdatestatuss = dal.Updation("pisl_temp_registrations", tblCurrentStatuscolomns, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");

                    var tblCurrentStatuscolomns1 = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                    var Currentupdatestatuss1 = dal.Updation("pisl_fresh_registration_mst", tblCurrentStatuscolomns1, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");



                    message = "Your Email and Mobile Changed successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                    //MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                   // Send SMS and mail for password reset.
                }
                else
                {
                    message = "Please try after some time";
                }
            }
            else
            {
                message = "Data Not found..!";
            }
        }
        return message;
    }
    public string sendOTP(string EmailId)
    {
        string message = "";
        string cond = "email='" + EmailId + "'";
        DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
        if (dtLogin.Rows.Count > 0)
        {
            string mobile = dtLogin.Rows[0]["Mobile"].ToString();
            Session["otp"] = GetRandomText();
            string OTP = Session["otp"].ToString();
            //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
            string mailBody = "Your OTP is: " + OTP + ". DMC";
            MRPLookup.sendMail(EmailId.Trim(), "DMC | OTP Verification", mailBody, "", "");
            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
            MRPLookup.SendSMS("otp", mobile.Trim(), "", "", OTP, "", "", "", "", "", "", "");
            message = "Please check your email or Mobile for OTP";
        }
        else
        {
            message = "Email not found, Please enter a valid email";
        }
        return message;
    }

    public ActionResult ChangePassward(FormCollection frm)
    {
        string Result = "";
        if (frm["txtOTP"].ToString() == Session["OTP"].ToString())
        {
            if (frm["txt_password"].Length >= 8 && frm["txt_password"].Length <= 18)
            {
                Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                Boolean foundMatch = regexObj.IsMatch(frm["txt_password"]);
                if (foundMatch == true)
                {
                    string where = "email='" + frm["txt_email"] + "'";// and Mobile='"+ frm["txt_contactno"] + "'";
                    DataTable dt_dr_details = dal.GetList("pisl_users", "*", where);
                    if (dt_dr_details != null)
                    {
                        if (dt_dr_details.Rows.Count > 0)
                        {
                            string pass = Encrypt(frm["txt_password"].Trim());
                            string col = " password='" + pass + "'";
                            var update = dal.Updation("pisl_users", col, "email='" + dt_dr_details.Rows[0]["email"].ToString() + "'");
                            if (update == 0)
                            {
                                string hostName = Dns.GetHostName();
                                string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                string colName = "activity,email,password,ip,system,description,date";
                                string colValue = "'Change Passs','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + frm["txt_password"].ToString().Trim() + "','" + IP + "','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + pass + "',getdate()";
                                int ins = dal.insertion("tbl_activity", colName, colValue);
                                string message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                MRPLookup.SendSMS("forgot_pwd", dt_dr_details.Rows[0]["Mobile"].ToString(), dt_dr_details.Rows[0]["First_Name"].ToString(), dt_dr_details.Rows[0]["Last_Name"].ToString(), "", "", dt_dr_details.Rows[0]["email"].ToString(), frm["txt_password"].ToString().Trim(), "", "", "", "");
                                Result = "0";
                            }
                            else
                            {
                                Result = "Somthing wrong Error !";
                            }
                        }
                        else
                        {
                            Result = "This is not registered email please check.";
                        }
                    }
                }
                else
                {
                    Result = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                }
            }
            else
            {
                Result = "Password Length must between 8 to 18 letters";
            }
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
    public ActionResult verifyOTP(string otp)
    {
        string Result = "";
        if (otp == Session["otp"].ToString())
        {
            Result = "DONE";
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
}
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using DelhimedicalcouncilORG;
using System.Data;
using System.Security.Cryptography;
using System.Text;
using System.IO;
using System.Drawing;
using System.Net;
using System.Net.Mail;

using System.Text.RegularExpressions;
using System.Data.SqlClient;
using System.Configuration;

namespace DelhimedicalcouncilORG.Controllers
{
public class homeController : Controller
{
    // GET: home
    DAL dal = new DAL();
    MRPLookup lk = new MRPLookup();
    MailFormat mf = new MailFormat();


    private string RetrieveContent(string webPage)
    {
        HttpWebResponse response = null;//used to get response
        StreamReader respStream = null;//used to read response into string
        try
        {
            //create a request object using the url passed in
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(webPage);
            request.Timeout = 10000;

            //go get a response from the page
            response = (HttpWebResponse)request.GetResponse();

            //create a streamreader object from the response
            respStream = new StreamReader(response.GetResponseStream());

            //get the contents of the page as a string and return it
            return respStream.ReadToEnd();
        }
        catch (Exception ex)//houston we have a problem!
        {
            throw ex;
        }
        finally
        {
            //close it down, we’re going home!
            response.Close();
            respStream.Close();
        }
    }

    //using a regular expression, find all of the href or urls
    //in the content of the page
    private void GetAllUrls(string content)
    {
        //regular expression
        string pattern = @"(?:href\s*=)(?:[\s""']*)(?.*?)(?:[\s>""'])";

        //Set up regex object
        Regex RegExpr = new Regex(pattern, RegexOptions.IgnoreCase);

        //get the first match
        Match match = RegExpr.Match(content);

        //loop through matches
        while (match.Success)
        {

            //output the match info
            Console.WriteLine("href match: " + match.Groups[0].Value);
            //WriteToLog(@"C:\matchlog.txt", "href match: " + match.Groups[0].Value + "\r\n");

            Console.WriteLine("Url match: " + match.Groups[1].Value);
            //WriteToLog(@"C:\matchlog.txt", "Url | Location | mailto match: " + match.Groups[1].Value + "\r\n");

            //get next match
            match = match.NextMatch();
        }
    }

    //Write to a log file
    //private void WriteToLog(string file, string message)
    //{
    //using (StreamWriter w = File.AppendText(file))
    //{
    //w.WriteLine(DateTime.Now.ToString() + ": " + message); w.Close();
    //}
    //}




    /// <summary>
    /// ////////////////////////
    /// </summary>
    /// <returns></returns>
    /// 

    public ActionResult Index()
    {




        return View();
    }
    //Start Login//
    public ActionResult login()
    {
        // Session["CAPTCHA"] = "111111";// GetRandomText();
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }

    
    public string Login_Form(string EmailId, string password, string ip, string captcha)
    
    {



        var dateTime = DateTime.Now;
        var tt = dateTime.Hour;


        var dayOfWeek = dateTime.DayOfWeek;
        var day = dayOfWeek.ToString();

        //Decrypt("","");
        //70789
        //554e981f4946f37a4818f1cea3928fe3
        //drtushargupta90@gmail.com
        string message = string.Empty;
        string clientCaptcha = captcha;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            ViewBag.CaptchaError = "Sorry, please write exact text as written above.";
            message = "11,11";
            return message;
        }
        else
            if (Session["checkSession"] == null)
        {
            ip = Request.ServerVariables["REMOTE_ADDR"].ToString();

            string pass = Encrypt(password);
            // string decoded = MRPLookup.Decrypt1(HttpUtility.UrlDecode(pass));
            string cond = "email='" + EmailId + "' and password='" + pass + "' and active!=3 ";//and active=1
            DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
            if (dtLogin.Rows.Count > 0)
            {
                if (Convert.ToString(dtLogin.Rows[0]["Regd_Type"]) == "PROV" && dtLogin.Rows.Count == 1)
                {
                    DataTable dt_temp_D = dal.GetList("pisl_temp_registrations", "Regd_ID,Regd_Type,Final_Status,Approved_By,date_approved,type", "email='" + EmailId.Trim() + "' order by ID desc");
                    for (int i = 0; i < dt_temp_D.Rows.Count; i++)
                    {
                        if (Convert.ToString(dt_temp_D.Rows[i]["Regd_Type"]) != "PROV" && Convert.ToString(dt_temp_D.Rows[i]["Final_Status"]) == "Approved" && Convert.ToString(dt_temp_D.Rows[i]["Approved_By"]) != null && Convert.ToString(dt_temp_D.Rows[i]["date_approved"]) != null && Convert.ToString(dt_temp_D.Rows[i]["type"]) != "service")
                        {



                            string colnameWithValue = "Regd_ID=" + Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]) + ",Regd_Type='" + dt_temp_D.Rows[i]["Regd_Type"].ToString() + "'";
                            string conditions = "S_No=" + Convert.ToInt32(dtLogin.Rows[0]["S_No"]) + "";
                            var Update_paymentUpdate = dal.Updation("pisl_users", colnameWithValue, conditions);
                            if (Update_paymentUpdate == 0)
                            {
                                dtLogin.Rows[0]["Regd_ID"] = Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]);
                                dtLogin.Rows[0]["Regd_Type"] = dt_temp_D.Rows[i]["Regd_Type"].ToString();

                            }
                            break;
                        }
                    }
                }


                for (int i = 0; i < dtLogin.Rows.Count; i++)
                {
                    string hash = Convert.ToString(dtLogin.Rows[i]["hash"]);
                    string decryptedstring = Decrypt(pass, hash);

                    string gid = Convert.ToString(dtLogin.Rows[i]["GID"]);
                    //string active = Convert.ToString(dtLogin.Rows[0]["active"]);
                    if (gid == "0")//Login for doctor
                    {
                        //DataTable dt_lastloginRecord = dal.GetList("pisl_users where email='" + EmailId + "' order by S_No desc", "TOP 1 *", "");
                        if (dtLogin != null && dtLogin.Rows.Count > 0)
                        {

                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[i]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[i]["Regd_Type"]);
                            }
                            else
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                            }
                            if (dtLogin.Rows[i]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[i]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }

                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                        }
                        else
                        {
                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[0]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            }
                            if (dtLogin.Rows[0]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }
                        }


                        message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 2;
                    }
                    else if (gid == "1")//Login for internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["isno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 1;
                            }
                            else
                            {
                                message = "0,6";
                            }
                        }

                        else
                        {
                            message = "0,5";
                        }
                    }
                    else if (gid == "2")//Login for admin and internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["asno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 3;
                            }
                            else
                            {
                                message = "0,6";
                            }

                        }
                        else
                        {
                            message = "0,5";
                        }
                    }
                }
            }
            else
            {
                message = "0,0";
            }
        }
        else
        {
            message = "10,10";
        }
        return message;
    }

    public string Encrypt(string password)
    {
        // Decrypt("", "");
        //string password = @"1234abcd";

        // byte array representation of that string
        byte[] encodedPassword = new UTF8Encoding().GetBytes(password);

        // need MD5 to calculate the hash
        byte[] hash = ((HashAlgorithm)CryptoConfig.CreateFromName("MD5")).ComputeHash(encodedPassword);

        // string representation (similar to UNIX format)
        string encoded = BitConverter.ToString(hash)
           // without dashes
           .Replace("-", string.Empty)
           // make lowercase
           .ToLower();
        return encoded;
    }
    public string Decrypt(string password, string hash1)
    {//https://md5decrypt.net/#answer
        string ss = "";
        string source = "zdNot3oAz5I%3DjRspJg78a%2FY%3D";// "Hello World!";
        MD5 md5 = System.Security.Cryptography.MD5.Create();
        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(password);
        byte[] hash = md5.ComputeHash(inputBytes);

        // step 2, convert byte array to hex string
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < hash.Length; i++)
        {
            sb.Append(hash[i].ToString("X2"));
        }
        return sb.ToString();
    }
    static string GetMd5Hash(MD5 md5Hash, string input)
    {

        // Convert the input string to a byte array and compute the hash.
        byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));

        // Create a new Stringbuilder to collect the bytes
        // and create a string.
        StringBuilder sBuilder = new StringBuilder();

        // Loop through each byte of the hashed data 
        // and format each one as a hexadecimal string.
        for (int i = 0; i < data.Length; i++)
        {
            sBuilder.Append(data[i].ToString("x2"));
        }

        // Return the hexadecimal string.
        return sBuilder.ToString();
    }
    public FileResult GetCaptchaImage()
    {
        MemoryStream ms = new MemoryStream();
        if (Session["CAPTCHA"] != null)
        {
            string text = Session["CAPTCHA"].ToString();

            //first, create a dummy bitmap just to get a graphics object
            Image img = new Bitmap(1, 1);
            Graphics drawing = Graphics.FromImage(img);

            Font font = new Font("Jokerman", 15);
            //measure the string to see how big the image needs to be
            SizeF textSize = drawing.MeasureString(text, font);

            //free up the dummy image and old graphics object
            img.Dispose();
            drawing.Dispose();

            //create a new image of the right size
            img = new Bitmap((int)textSize.Width + 40, (int)textSize.Height + 20);
            drawing = Graphics.FromImage(img);

            Color backColor = Color.SeaShell;
            Color textColor = Color.Red;
            //paint the background
            drawing.Clear(backColor);

            //create a brush for the text
            Brush textBrush = new SolidBrush(textColor);

            drawing.DrawString(text, font, textBrush, 20, 10);

            drawing.Save();

            font.Dispose();
            textBrush.Dispose();
            drawing.Dispose();


            img.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
            img.Dispose();

            return File(ms.ToArray(), "image/png");
        }
        else
        {
            return File(ms.ToArray(), "image/png");
        }
    }
    private string GetRandomText()
    {
        StringBuilder randomText = new StringBuilder();
        string alphabets = "12345679ABCEFGHKLMNPRSTUVWXZ";
        Random r = new Random();
        for (int j = 0; j <= 5; j++)
        {
            randomText.Append(alphabets[r.Next(alphabets.Length)]);
        }
        return randomText.ToString();
    }
    //End Login//
    public ActionResult signup()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    [HttpPost]
    public string sendotpsignup(string txt_Email, string txt_ContactNo)
    {
        string msg = "";
        try
        {
            var CheckEmail = IsEmailandMobileExists(txt_Email, "");
            var checkMobile = IsEmailandMobileExists("", txt_ContactNo);
            if (CheckEmail == false && checkMobile == false)
            {

                Session["otp"] = GetRandomText();
                string OTP = Session["otp"].ToString();
                //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
                string mailBody = "Your OTP is: " + OTP + ". DMC";
                MRPLookup.sendMail(txt_Email.Trim(), "DMC | OTP Verification", mailBody, "", "");

                //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
              

                MRPLookup.SendSMS("otp", txt_ContactNo.Trim(), "", "", OTP, "", "", "", "", "", "", "");
                msg = "0";
            }
            else if (CheckEmail == true && checkMobile == true)
            {
                msg = "Email and Mobile no. are already exists!!";
            }
            else
            {
                if (checkMobile == true && CheckEmail == false)
                {
                    msg = "Mobile No. is Already Exists!!";
                }
                else if (CheckEmail == true && checkMobile == false)
                {
                    msg = "Email Address is Already Exists!!";
                }


            }
        }
        catch (Exception ex)
        {
            msg = "1";
        }
        return msg;
    }
    public bool IsEmailandMobileExists(string email, string mobile)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        try
        {
            tableName = "pisl_users";
            colname = "*";
            if (!string.IsNullOrEmpty(email))
            {
                cond = "email='" + email + "'";
            }
            if (!string.IsNullOrEmpty(mobile))
            {
                cond = "mobile='" + mobile + "'";
            }
            //cond=
            DataTable dt_datacheck = dal.GetList(tableName, colname, cond);
            if (dt_datacheck != null && dt_datacheck.Rows.Count > 0)
            {
                IsExists = true;
            }

        }
        catch (Exception ex)
        {
            IsExists = false;
            throw;
        }
        return IsExists;
    }

    public ActionResult IsDocDataExists(string regd_type, string regd_no, string DOB, string PassingYear)
    {
        //List<dynamic> list = new List<dynamic>();
        string message = "";
        try
        {
            var tbl_name = "";

            var userExists = IsRegd_Exists(regd_type, regd_no, DOB, PassingYear, out tbl_name);
            if (userExists == true && tbl_name == "pisl_users")
            {

                message = "Already Registered With us. Please Login With Your Credential";
            }
            else
                if (userExists == true && tbl_name == "pisl_fresh_registration_mst")
            {
                message = "Your Registration No. is Expired. Please SignUp Again.";
            }
            else
            {
                message = "NotExists";
                //message = "Your Registration No. is Not Exists!";
            }
        }
        catch (Exception ex)
        {

        }
        return Json(message, JsonRequestBehavior.AllowGet);
    }
    public bool IsRegd_Exists(string regd_type, string regd_no, string DOB, string PassingYear, out string Tbl_Name)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        Tbl_Name = "";
        DataTable dt_UserCheck = null;
        try
        {
            tableName = "pisl_users";
            colname = "*";
            cond = "Regd_Type='" + regd_type + "' and Regd_ID='" + regd_no.Trim() + "'";
            dt_UserCheck = dal.GetList(tableName, colname, cond);
            if (dt_UserCheck == null || dt_UserCheck.Rows.Count == 0)
            {
                tableName = "pisl_fresh_regi_qual_mst";
                colname = "*";
                cond = "quali_type='Basic Qualification' AND Regd_ID='" + regd_no + "' "
                    + "AND Regd_Type='" + regd_type + "' AND passing_date =  '" + PassingYear.Trim() + "'";
                dt_UserCheck = dal.GetList(tableName, colname, cond);
                if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                {
                    Tbl_Name = "pisl_fresh_regi_qual_mst";

                    tableName = "pisl_fresh_registration_mst";
                    colname = "*";
                    cond = "Regd_ID='" + regd_no + "' AND Regd_Type='" + regd_type + "'";
                    dt_UserCheck = dal.GetList(tableName, colname, cond);
                    if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                    {
                        Tbl_Name = "pisl_fresh_registration_mst";
                        IsExists = true;
                    }
                    else
                    {
                        IsExists = false;
                    }
                }
                else
                {

                    IsExists = false;
                }
            }
            else
            {
                Tbl_Name = "pisl_users";
                IsExists = true;
            }
        }
        catch (Exception ex)
        {


            throw;
        }
        return IsExists;
    }

    [HttpPost]
    public string createsignup(string txt_Email, string txt_ContactNo, string txt_FirstName, string txt_MiddleName,
        string txt_LastName, string txt_Password, string txt_ConfirmPassword, string txt_DOB, bool chk_TermCondition,
        string Captcha, string Regd_ID, string txtOTP, string ddl_regType, string txt_oldData, string passingYear)
    {
        string message = "";
        string dob = lk.convertdate1(txt_DOB);
        string Tbl_Name = "";
        try
        {
            if (!IsEmailandMobileExists(txt_Email, ""))
            {
                if (!IsEmailandMobileExists("", txt_ContactNo))
                {
                    if (ddl_regType == "FRS" || ddl_regType == "RRE")
                    {
                        if (IsRegd_Exists(ddl_regType, Regd_ID, dob, passingYear, out Tbl_Name))
                        {
                            Tbl_Name = Tbl_Name;
                            if (Tbl_Name == "pisl_users")
                            {
                                //if Pisl_user Table Record Exists but no Email and Mobile No exists
                                //in this case update the Email and Mobile No.
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        DataTable dt_Email_Mobile_Check = dal.GetList("pisl_users",
                                                        "top 1*", " Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                        if (dt_Email_Mobile_Check != null)
                                                        {
                                                            if (dt_Email_Mobile_Check.Rows.Count > 0)
                                                            {
                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_Email_Mobile_Check.Rows[0]["email"])))
                                                                {
                                                                    string pass = Encrypt(txt_Password.Trim());
                                                                    string hash = Encrypt(MRPLookup.RandamStringGenerator1());
                                                                    var updateDt = dal.Updation("pisl_users",
                                                                        "email='" + txt_Email.Trim() + "',mobile='" + txt_ContactNo.Trim() + "',password='" + pass + "',hash='" + hash + "'",
                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                    if (updateDt == 0)
                                                                    {
                                                                        DataTable dt_fresh_Check = dal.GetList("pisl_fresh_registration_mst",
                                                                            "top 1 * ",
                                                                            "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                        if (dt_fresh_Check != null)
                                                                        {
                                                                            if (dt_fresh_Check.Rows.Count > 0)
                                                                            {
                                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_fresh_Check.Rows[0]["Email"])))
                                                                                {
                                                                                    var updateDt_fresh = dal.Updation("pisl_fresh_registration_mst",
                                                                                        "Email='" + txt_Email.Trim() + "',Mobile='" + txt_ContactNo.Trim() + "'",
                                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");

                                                                                    if (updateDt_fresh != 0)
                                                                                    {
                                                                                        message = "Error!!";
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                                        MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                                        message = "Please, Check Your Mail For Login Details";
                                                                        //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                                        MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                                    }
                                                                    else
                                                                    {
                                                                        message = "Error!!";
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    message = "Your record are already Exists with us!!";
                                                                }
                                                            }
                                                        } //End Updation
                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }
                            else if (Tbl_Name == "pisl_fresh_regi_qual_mst" || Tbl_Name == "pisl_fresh_registration_mst")
                            {
                                //Insert Login Record in Pisl_Users
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        string pass = Encrypt(txt_Password.Trim());
                                                        string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                        if (string.IsNullOrEmpty(Regd_ID))
                                                        {
                                                            Regd_ID = "0";
                                                        }
                                                        //if (txt_oldData != "")
                                                        //{
                                                        //    string colnamemst = "*";
                                                        //    string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        //    DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        //    if (dtrmst.Rows.Count > 0)
                                                        //    {
                                                        //        string oldtype = "";
                                                        //        if (ddl_regType == "FRS")
                                                        //        {
                                                        //            oldtype = "service";
                                                        //        }
                                                        //        else if (ddl_regType == "RRE")
                                                        //        {
                                                        //            oldtype = "reregi";
                                                        //        }
                                                        //        var corrAddress1 = dtrmst.Rows[0]["Corr_Add_Line_1"].ToString();
                                                        //        var corrAddress2 = dtrmst.Rows[0]["Corr_Add_Line_2"].ToString();
                                                        //        var perAddress1 = dtrmst.Rows[0]["Per_Add_Line_1"].ToString();
                                                        //        var perAddress2 = dtrmst.Rows[0]["Per_Add_Line_2"].ToString();

                                                        //        string colNameold = "Regd_ID,Regd_Type,type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,date_entered,Father_Name,POB,Gender,Nationality,Corr_Add_Line_1,Corr_Add_Line_2,Corr_Add_State,Corr_Add_Pincode,Corr_Add_Country,Per_Add_Line_1,Per_Add_Line_2,Per_Add_Line_State,Per_Add_Line_Pincode,Per_Add_Line_Country";

                                                        //        string colValueold = "'" + Regd_ID + "','" + ddl_regType + "','" + oldtype + "','" + txt_FirstName + "','" + txt_MiddleName + "','"  + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "', '"+ lk.GetDateTime()+ "' ,'"+ dtrmst.Rows[0]["Father_Name"] + "','" + dtrmst.Rows[0]["POB"] + "','" + dtrmst.Rows[0]["Gender"] + "','" + dtrmst.Rows[0]["Nationality"] + "','" + corrAddress1 + "','" + corrAddress2 + "','" + dtrmst.Rows[0]["Corr_Add_State"] + "','" + dtrmst.Rows[0]["Corr_Add_Pincode"] + "','" + dtrmst.Rows[0]["Corr_Add_Country"] + "','" + perAddress1 + "','" + perAddress2 + "','" + dtrmst.Rows[0]["Per_Add_Line_State"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Pincode"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Country"] + "'";
                                                        //        int insold = dal.insertion("pisl_temp_registrations", colNameold, colValueold);
                                                        //    }
                                                        //}
                                                        Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                        string colnamemst = "*";
                                                        string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        DateTime txtdob1 = Convert.ToDateTime(dtrmst.Rows[0]["DOB"]);
                                                        string txtdob = txtdob1.ToShortDateString();

                                                        string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                            + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                        string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + dtrmst.Rows[0]["First_Name"].ToString() + "','" + dtrmst.Rows[0]["Middle_Name"].ToString() + "',"
                                                            + "'" + dtrmst.Rows[0]["Last_Name"].ToString() + "','" + txtdob + "','" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                            + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                        int ins = dal.insertion("pisl_users", colName, colValue);
                                                        if (ins == 0)
                                                        {
                                                            string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                            MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                            message = "Please, Check Your Mail For Login Details";
                                                            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                            MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                        }
                                                        else
                                                        {
                                                            message = "Try after some time";
                                                        }

                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }

                        }
                        else
                        {
                            message = "Your Registration No and Passing Year is Not Exist with Us";
                        }
                    }
                    else
                    {
                        //Insert Login Record in Pisl_Users
                        if (chk_TermCondition == true)
                        {
                            if (txtOTP == Session["otp"].ToString())
                            {
                                if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                {
                                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                    Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                    if (foundMatch == true)
                                    {
                                        if (txt_Password == txt_ConfirmPassword)
                                        {
                                            if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                            {
                                                //if (Tbl_Name== "pisl_users") { }
                                                string pass = Encrypt(txt_Password.Trim());
                                                string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                if (string.IsNullOrEmpty(Regd_ID))
                                                {
                                                    Regd_ID = "0";
                                                }
                                                Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                if (ddl_regType == "-1")
                                                {
                                                    ddl_regType = "";
                                                }


                                                string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                    + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                int ins = dal.insertion("pisl_users", colName, colValue);
                                                if (ins == 0)
                                                {
                                                    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                    message = "Please, Check Your Mail";
                                                    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                }
                                                else
                                                {
                                                    message = "Try after some time";
                                                }

                                                //string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                //    + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                //string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                //    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                //    + "1,0,0,'"+ lk.GetDateTime()+ "','','" + Regd_ID1 + "'";
                                                //int ins = dal.insertion("pisl_users", colName, colValue);
                                                //if (ins == 0)
                                                //{
                                                //    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                //    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                //    message = "Please, Check Your Mail";
                                                //    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                //    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                //}
                                                //else
                                                //{
                                                //    message = "Try after some time";
                                                //}
                                            }
                                            else
                                            {
                                                message = "Enter A Valid Email";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password and Confrim Password is Not Same";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                    }
                                }
                                else
                                {
                                    message = "Password Length must between 8 to 18 letters";
                                }
                            }
                            else
                            {
                                message = "Enter the Valid OTP";
                            }
                        }
                        else
                        {
                            message = "Please check the Terms and Conditions";
                        }

                        //}
                    }
                }
                else
                {
                    message = "Mobile No. is Already Exists";
                }
            }
            else
            {
                message = "Email Already exists!!";
            }
            //
            //Cut the Code From There

        }
        catch
        {

        }
        return message;
    }

    public ActionResult SignupVerification()
    {
        string message = "";
        try
        {
            if (Request.QueryString["email"] != null && Request.QueryString["hash"] != null)
            {
                string email = Request.QueryString["email"];
                string hash = Request.QueryString["hash"];
                string cond = "Email='" + email.Trim() + "' and Hash='" + hash.Trim() + "' and Active=0";
                DataTable dt = dal.GetList("pisl_users", "*", cond);
                if (dt.Rows.Count > 0)
                {
                    int upd = dal.Updation("pisl_users", "Active=1", cond);
                    if (upd == 0)
                    {
                        message = "Your account has been activated, you can now login";
                    }
                    else
                    {
                        message = "Try after some time";
                    }
                }
                else
                {
                    message = "The url is either invalid or you already have activated your account.";
                }
            }
            else
            {
                message = "Invalid approach, please use the link that has been send to your email.";
            }
        }
        catch
        { }
        ViewBag.lbl_status = message;
        return View();
    }
    public ActionResult contact()
    {
        return View();
    }

    public ActionResult about()
    {
        return View();
    }
    public ActionResult faqs()
    {
        return View();
    }
    // Start forgot password
    public ActionResult forgotpassword()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public string sendCode(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        string message = string.Empty;
        try
        {
            string clientCaptcha = CaptchaCaseID;
            string serverCaptcha = Session["CAPTCHA"].ToString();
            if (!clientCaptcha.Equals(serverCaptcha))
            {
                ViewBag.ShowCAPTCHA = serverCaptcha;
                message = "Sorry, please write exact text as written below.";
            }
            else
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' ";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string name = Convert.ToString(dt.Rows[0]["First_Name"]);
                                        string Mobile = Convert.ToString(dt.Rows[0]["Mobile"]);

                                        MailFormat mf = new MailFormat();
                                        string code = MRPLookup.RandamStringGenerator1();
                                        string mailBody = mf.SendCodeOnMail(name, code);
                                        MRPLookup.SendSMS("otp", Mobile, "", "", code, "", "", "", "", "", "", "");
                                        string colValue = "Code='" + code.Trim() + "'";
                                        int updCode = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "'");
                                        if (updCode == 0)
                                        {
                                            string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(), "Reset Password Code " + System.DateTime.Now + "", mailBody, "", "");
                                            if (sendmailStatus != "Technical issue! Please try agiain")
                                            {
                                                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

                                            }
                                            else
                                            {
                                                message = sendmailStatus;
                                            }
                                        }
                                        else
                                        {
                                            message = "Please try after some time.";
                                        }

                                    }
                                    else
                                    {
                                        message = "Enter a New Password.";
                                    }
                                }
                                else
                                {
                                    message = "Your Email And Mobile Number Do not Match with DMC Registered Users.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
        }
        catch (Exception ex)
        {

        }
        return message;
    }
    public string forgotpasswordCaseID(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact text as written below.";
            // return message;
        }
        else
        {
            if (txtCode != "0")
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string mobile = Convert.ToString(dt.Rows[0]["Mobile"]);
                                    string firstName = Convert.ToString(dt.Rows[0]["First_Name"]);
                                    string lastName = Convert.ToString(dt.Rows[0]["Last_Name"]);
                                    //string new_password = Encrypt(MRPLookup.RandamStringGenerator1());
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string colValue = "password='" + new_PasswordMD5.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                                        updPassword = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                        if (updPassword == 0)
                                        {
                                            updPassword = dal.Updation("pisl_users", "Code='0'", "Email='" + txtEmail.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                            string hostName = Dns.GetHostName();
                                            string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                            string colName = "activity,email,password,ip,system,description,date";
                                            colValue = "'Change Passs','" + txtEmail + "','" + txtPassword + "','" + IP + "','" + mobile + "','" + new_PasswordMD5 + "',getdate()";
                                            int ins = dal.insertion("tbl_activity", colName, colValue);
                                            message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                            MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                                            // Send SMS and mail for password reset.
                                            

                                        }
                                        else
                                        {
                                            message = "Please try after some time";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please try another password.";
                                    }

                                }
                                else
                                {
                                    message = "Your Details Dont Match or You have NOT registered with DMC.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
            else
            {
                message = "Code not match";
            }
        }
        return message;
    }

    public ActionResult introduction()
    {
        return View();
    }

    public ActionResult powers()
    {
        return View();
    }

    public ActionResult thecouncil()
    {
        return View();
    }

    //public ActionResult gallery()
    //{
    //    return View();
    //}
    public ActionResult Gallery()
    {
        return View();
    }

    public ActionResult accomplishments()
    {
        return View();
    }

    public ActionResult registration()
    {
        return View();
    }
    public ActionResult cmeperforma()
    {
        return View();
    }
    public ActionResult cmeonline()
    {
        return View();
    }
    public ActionResult cmerequirements()
    {
        return View();
    }
    public ActionResult cmepassbook()
    {
        return View();
    }
    public ActionResult duties()
    {
        return View();
    }
    public ActionResult inst_general()
    {
        return View();
    }

    public ActionResult inst_fees()
    {
        return View();
    }
    public ActionResult inst_docupload()
    {
        return View();
    }
    public ActionResult disclaimer()
    {
        return View();
    }
    public ActionResult feestructure()
    {
        return View();
    }
    public ActionResult privacypolicy()
    {
        return View();
    }
    public ActionResult termofuse()
    {
        return View();
    }

    public ActionResult litigations()
    {
        return View();
    }


    public ActionResult council_meeting()
    {
        return View();
    }
    public ActionResult Cme_workshop_Conference()
    {
        return View();
    }

    public ActionResult Media_room()
    {
        return View();
    }
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    public ActionResult LogOut()
    {
        Session.Abandon();
        return RedirectToAction("Index", "Home");
    }
    public ActionResult SearchElectrolData(string regid)
    {
        string msg = "";
        DataTable dtSearch = dal.GetList("tbl_electrolData", "*", "RegNo='" + regid.Trim() + "'");
        if (dtSearch.Rows.Count > 0)
        {
            return Json(MRPLookup.DataTableToJSONWithJSONNet(dtSearch), JsonRequestBehavior.AllowGet);
        }
        else
        {
            msg = "Data not found";
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
    }
    public ActionResult SearchElectrolDataUpdate(string regid)
    {
        int upd = 1;
        upd = dal.Updation("tbl_electrolData", "Status='Completed',Date='" + lk.GetDateTime() + "'", "ID='" + regid.Trim() + "'");
        if (upd == 0)
        {

            return Json(upd, JsonRequestBehavior.AllowGet);
        }
        else
        {
            return Json(upd, JsonRequestBehavior.AllowGet);
        }
    }

    public ActionResult TotalCount()
    {
        DataTable dtcntCompleted = dal.GetList("tbl_electrolData", "count(*) as cntCompleted", "status='Completed'");
        DataTable dtcntNotCompleted = dal.GetList("tbl_electrolData", "count(*) as cntNotCompleted", "status ='Valid'");
        string totalCmpleteStatus = "Completed: " + Convert.ToString(dtcntCompleted.Rows[0]["cntCompleted"]) + "  Not Completed: " + Convert.ToString(dtcntNotCompleted.Rows[0]["cntNotCompleted"]);
        return Json(totalCmpleteStatus, JsonRequestBehavior.AllowGet);
    }
    public ActionResult Renewal_Reminder(string key)
    {
        string msg = "";
        try
        {

            key = "1111";
            string validKey = "1111";
            // MRPLookup.SendSMS("Renewal_expired_tdy", "9899849487", "Dinesh", "", "", "", "", "", "", "", "", "");
            if (key == validKey)
            {
                string expiry_frtyfive = Convert.ToDateTime(DateTime.Now.AddDays(30)).ToString("yyyy-MM-dd");//date(('Y-m-d'), strtotime('+30 days'));
                string expiry_tdy = Convert.ToDateTime(DateTime.Now).ToString("yyyy-MM-dd");//date('Y-m-d');
                string expiry_pastfifty = Convert.ToDateTime(DateTime.Now.AddDays(-50)).ToString("yyyy-MM-dd");// date(('Y-m-d'), strtotime('-50 days'));
                string cond = "(Expiry_Date = '" + expiry_frtyfive + "' OR  Expiry_Date = '" + expiry_tdy + "' OR Expiry_Date = '" + expiry_pastfifty + " ') AND (Mobile !='' OR  Email !='')";
                //DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", cond);
                string strConnString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                SqlConnection con = new SqlConnection(strConnString);
                //SqlConnection con = new SqlConnection(@"Data Source=103.20.212.254,1232;Initial Catalog=dmcaws_New;User Id=sa;Password=bD$x89K3$@K9UaQsKQ");
                //SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-PKTADCN;Initial Catalog=dmcaws1;integrated security=true");
                con.Open();
                SqlCommand cmd = new SqlCommand("select * from pisl_fresh_registration_mst where " + cond + "", con);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                con.Close();
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string First_Name = Convert.ToString(dt.Rows[i]["First_Name"]);
                        string Last_Name = Convert.ToString(dt.Rows[i]["Last_Name"]);
                        string Regd_ID = Convert.ToString(dt.Rows[i]["Regd_ID"]);
                        string Regd_Type = Convert.ToString(dt.Rows[i]["Regd_Type"]);
                        string Mobile = Convert.ToString(dt.Rows[i]["Mobile"]);
                        string Expiry_Date = Convert.ToDateTime(dt.Rows[i]["Expiry_Date"]).ToString("yyyy-MM-dd");
                        string date_approved = Convert.ToDateTime(dt.Rows[i]["date_approved"]).ToString("yyyy-MM-dd");
                        string tdydate = Convert.ToDateTime(System.DateTime.Now).ToString("yyyy-MM-dd");
                        string to = Convert.ToString(dt.Rows[i]["Email"]);

                        string subject1 = "Renewal of Registration with Delhi Medical Council"; //// Give the email a subject
                        string subject2 = "Expiry of Registration with Delhi Medical Council";
                        string subject3 = "Deletion of Regd Number with Delhi Medical Council";
                        string message1 = "";
                        message1 += "Dear Dr " + First_Name + " " + Last_Name + ",";
                        message1 += "Greetings from Delhi Medical Council!!";

                        message1 += "   This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council is due for renewal.";
                        message1 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting ";
                        message1 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message1 += "For inclusion of any additional qualification, please produce the original degree at the office of Delhi Medical Council, so that your additional ";
                        message1 += "qualification certificate can be verified with the original document. The original degree / diploma Certificate will be returned immediately after verification. ";

                        message1 += "<b>This is a system generated email and we request you not to reply to this email. Please ignore if already applied.</b>";

                        message1 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message1 += "Warm Regards,";

                        message1 += "Delhi Medical Council.";
                        message1 += "Ground Floor, B Wing, B Block-1";
                        message1 += "DMCR IT Park, Shastri Park";
                        message1 += "New Delhi-110053";
                        message1 += "Tel: +91-011-46621000";
                        message1 += "Website - www.delhimedicalcouncil.org	 ";

                        string message2 = "";
                        message2 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message2 += "Greetings from Delhi Medical Council!!";

                        message2 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council expired on " + Expiry_Date + " and  is due for renewal. ";

                        message2 += "We request you to kindly renew your registration within thirty days and keep your registration in force. You can renew your registration online by visiting ";
                        message2 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message2 += "Please take note that in case you do not apply for renewal of registration within the stipulated period, your name shall be removed from the State Medical ";
                        message2 += "Register maintained by the Delhi Medical Council in accordance with the provisions of Section 22 of the Delhi Medical Council Act, 1997 which will debar";
                        message2 += "you from practicing Allopathic in the state of Delhi.";

                        message2 += "<b>Kindly ignore this email, in case you have already applied for renewal of registration</b>";

                        message2 += "This is a system generated email and we request you not to reply to this email.";

                        message2 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message2 += "Warm Regards,";

                        message2 += "Delhi Medical Council.";
                        message2 += "Ground Floor, B Wing, B Block-1";
                        message2 += "DMCR IT Park, Shastri Park";
                        message2 += "New Delhi-110053";
                        message2 += "Tel: +91-011-46621000";
                        message2 += "Website - www.delhimedicalcouncil.org";

                        string message3 = "";
                        message3 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message3 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council has expired on " + Expiry_Date + ". You ";
                        message3 += "failed to renew the registration with Delhi Medical Council, in spite of notices/Emails (public / individual) issued for renewal. Hence, in accordance with the ";
                        message3 += "provisions of section 22(3) of Delhi Medical Council Act, 1997; your name under Registration number " + Regd_ID + "-" + Regd_Type + "  has been removed from the State ";
                        message3 += "Medical Register of Delhi Medical Council.";

                        message3 += "Please note that if you wish to have your name re-entered in the State Medical Register of Delhi Medical Council, you may do so, by paying fees as detailed herein below,";
                        message3 += "in addition to fee for renewal of registration (Rs. 2000/-)";

                        message3 += "Late fees for non-renewal of registration:-";
                        message3 += "(a) upto six months from the date from 		Rs. 1000/- (Rupees One Thousand only)";
                        message3 += "    which registration is due for renewal";
                        message3 += "(b) for period more than six months 	    Rs. 2000/- (Rupees One Thousand only)";
                        message3 += "     but upto one year";
                        message3 += "(c) for period more than one year 			Rs. 1000/- (Rupees One Thousand per year and Part thereof)";

                        message3 += "Please also note that any person servicing or practicing modern scientific system of medicine (allopathy) in Delhi without holding valid registration with Delhi Medical Council is liable for action under the provisions of Delhi Medical Council Act, 1997.";
                        message3 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting www.delhimedicalcouncil.org and apply under Online Renewal & Services.";

                        message3 += "<b>Kindly ignore this letter, in case you have already applied for renewal of registration</b>";

                        message3 += "This is a system generated email and we request you not to reply to this email.";

                        message3 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message3 += "Warm Regards,";

                        message3 += "Delhi Medical Council.";
                        message3 += "Ground Floor, B Wing, B Block-1";
                        message3 += "DMCR IT Park, Shastri Park";
                        message3 += "New Delhi-110053";
                        message3 += "Tel: +91-011-46621000";
                        message3 += "Website - www.delhimedicalcouncil.org,";

                        string headers = "From: DMC Registration System <registration@delhimedicalcouncil.org>' . '\r\n'"; // Set from headers

                        string message = "";
                        string subject = "";
                        string trigger = "";
                        string msgtxt = "";
                        if (Convert.ToDateTime(Expiry_Date) > Convert.ToDateTime(tdydate))
                        {
                            message = message1;
                            subject = subject1;
                            trigger = "Renewal_due_reminder";
                            msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Renewal of your DMC Regd No " + Regd_ID + " - " + Regd_Type + " is due. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }

                        }
                        else if (Convert.ToDateTime(Expiry_Date) == Convert.ToDateTime(tdydate))
                        {
                            message = message2;
                            subject = subject2;
                            trigger = "Renewal_expired_tdy";
                            // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Registration of DMC Regd No " + Regd_ID + " - " + Regd_Type + " expired today. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }
                        }
                        //else if (Convert.ToDateTime(Expiry_Date) < Convert.ToDateTime(tdydate))
                        //{
                        //    message = message2;
                        //    subject = subject2;
                        //    trigger = "Renewal_expired_fifty";
                        //   // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Your  ID " + Regd_ID + " - " + Regd_Type + " has been removed from the State Medical Register of DMC . Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                        //    if (!string.IsNullOrEmpty(to))
                        //    {
                        //       // MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //    if (!string.IsNullOrEmpty(Mobile))
                        //    {
                        //       // MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(to))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(Mobile))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}

                    }
                }

            }
            else
            {
                msg = "Key not match";
                string path = "C:\\TestService\\ServiceLog.txt";
                using (StreamWriter writer = new StreamWriter(path, true))
                {
                    writer.WriteLine(string.Format(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt"), DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt")));
                    writer.Close();
                }
            }
        }
        catch
        {

        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult certverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["cert"];
            string Regd_type = "";
            string regd_id = "";

            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["cert"]);
            var splitedString = decodedstr.Split('-');
            Regd_type = splitedString[0];
            regd_id = splitedString[1];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            switch (Regd_type)
            {
                case "RRE":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "FRS":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "PROV":
                    db = "pisl_prov_registration_mst";
                    qual_db = "pisl_prov_regi_qual_mst";
                    break;

                default:
                    Message = "This certificate cannnot be verified";
                    break;

            }

            var check_namechange = dal.GetList("tbl_NameChangeHistory_New", "CaseID,Name=(case when (New_MiddleName is null or  New_MiddleName='') then New_FirstName+' '+New_LastName when (New_MiddleName is null or  New_MiddleName='') and (New_LastName is null or New_LastName='') then New_FirstName else New_FirstName+' '+New_MiddleName+' '+New_LastName end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_namechange.Rows.Count > 0)
            {
                string CaseID = check_namechange.Rows[0]["CaseID"].ToString();
                ViewBag.Name = check_namechange.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                if (check_Doctordata.Rows.Count > 0)
                {
                    string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
                    ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                    DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                    DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                    DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                    ViewBag.qual = dt_qual;
                    ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                    ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                    Message = "success";
                }
                else
                {
                    Message = "This Entry Cannot be Verified";
                }
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;

        return View();
    }
    public ActionResult VeryfyCertificate(string value)
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        var qstring = value;
        var decodedStr = MRPLookup.Decrypt1(qstring);
        var splitedString = decodedStr.Split('-');
        var Regd_type = splitedString[0];
        var regd_id = splitedString[1];
        var db = "";
        var qual_db = "";
        //string regdtype=
        switch (Regd_type)
        {
            case "RRE":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "FRS":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "PROV":
                db = "pisl_prov_registration_mst";
                qual_db = "pisl_prov_regi_qual_mst";
                break;

            default:
                Message = "This certificate cannnot be verified";
                break;

        }
        var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
        if (check_Doctordata.Rows.Count > 0)
        {
            string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
            DataTable dt_Documents = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
            DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign' ");

        }
        else
        {
            Message = "This Entry Cannot be Verified";
        }
        return Json("", JsonRequestBehavior.AllowGet);
    }
    public ActionResult letterverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["letter"];
            string Regd_type = "";
            string regd_id = "";
            string ID = "";
            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["letter"]);
            var splitedString = decodedstr.Split('-');
            ID = splitedString[0];
            Regd_type = splitedString[1];
            regd_id = splitedString[2];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            //switch ()
            //{
            //    case "RRE":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "FRS":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "PROV":
            //        db = "pisl_prov_registration_mst";
            //        qual_db = "pisl_prov_regi_qual_mst";
            //        break;

            //    default:
            //        Message = "This certificate cannnot be verified";
            //        break;

            //}
            var letter_type = "";
            var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,date_approved,drg_from,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "ID='" + ID + "' and Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_Doctordata.Rows.Count > 0)
            {
                switch (check_Doctordata.Rows[0]["drg_from"].ToString())
                {
                    case "noc":
                        letter_type = "No Objection Certificate";
                        break;

                    case "gdst":
                        letter_type = "Good Standing Certificate";
                        break;
                }
                ViewBag.lettertype = letter_type;
                ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("pisl_fresh_regi_qual_mst", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='Sign'");
                if (!string.IsNullOrEmpty(check_Doctordata.Rows[0]["date_approved"].ToString()))
                {
                    ViewBag.DateApproved = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).ToString("dd MMMM,yyyy");
                    ViewBag.expiry = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).AddDays(-1).AddMonths(6).ToString("dd MMMM, yyyy");
                }
                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(ID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                Message = "This Entry Cannot be Verified";
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;
        return View();
    }
    public ActionResult Regi_search()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public ActionResult search_ur_dr()
    {

        return View();
    }
    public ActionResult regi_search_submit(string Regid, string Types)
    {
        try
        {


            string regid = Request.QueryString["Regd_ID"];
            string type = Request.QueryString["Type"]; ;
            //string type = frm["type"].Trim();
            //string regid = frm["regid"].Trim();
            string colname = "*";
            string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "' ORDER BY S_No DESC";
            DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
            if (dt.Rows.Count > 0)
            {
                DateTime ddob = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                DateTime dapproved = Convert.ToDateTime(dt.Rows[0]["date_approved"].ToString());
                DateTime dexpiry = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                ViewBag.dateapproved = dapproved.ToShortDateString();
                ViewBag.expirydate = dexpiry.ToShortDateString();
                ViewBag.dob = ddob.ToShortDateString();
                ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


                DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
                if (result_remarks.Rows.Count > 0)
                {
                    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    {
                        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    }
                }
                DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
                if (qualificationdt.Rows.Count > 0)
                {
                    ViewBag.qualdata = qualificationdt;
                }

            }
            return View();
        }
        catch (Exception ex)
        {
            return View();
        }
    }
    public ActionResult regi_search_submits(FormCollection frm)
    {

        string clientCaptcha = frm["CL_CAPCHA"].ToString();
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;

            return Json("-1");
        }
        string msg = "";
        //string type = Regd_ID;
        //string regid = Type;
        string type = frm["type"].Trim();
        string regid = frm["regid"].Trim();
        string colname = "*";
        string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
        if (dt.Rows.Count > 0)
        {
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
            if (result_remarks.Rows.Count > 0)
            {
                for (int i = 0; i < result_remarks.Rows.Count; i++)
                {
                    ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                }
            }
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult search_ur_dr_submit(FormCollection frm)
    {
        try
        {



            string First_Name = Request.QueryString["First_Name"];
            string Last_Name = frm["Last_Name"];
            string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
            string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
            string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
            string Mobile = Request.QueryString["Mobile"];
            string Email = Request.QueryString["Email"];

            if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Last_Name) && !string.IsNullOrEmpty(Corr_Add_Line_1) && !string.IsNullOrEmpty(Corr_Add_Line_2) && !string.IsNullOrEmpty(Corr_Add_Pincode) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Mobile='" + Mobile + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}

                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "Email='" + Email + "' and Mobile='" + Mobile + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }


            return View();
        }
        catch (Exception ex)
        {
            return View();

        }
    }


    public ActionResult search_ur_dr_submit2(FormCollection frm)
    {
        string msg = "";
        string First_Name = frm["First_Name"];
        string Last_Name = frm["Last_Name"];
        string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
        string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
        string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
        string Mobile = frm["Mobile"];
        string Email = frm["Email"];

        string condtions = "First_Name='" + First_Name.Trim() + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
        if (dt.Rows.Count > 0)
        {
            //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
            //if (result_remarks.Rows.Count > 0)
            //{
            //    for (int i = 0; i < result_remarks.Rows.Count; i++)
            //    {
            //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
            //    }
            //}
            string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", condtions2);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        else
        {
            msg = "Not Data Found";
        }


        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult cme()
    {
        return View();
    }
    public ActionResult status_comp2021()
    {
        return View();
    }

    public ActionResult ForgetEmailPasswordProv()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public dynamic getForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB)
    {
        //select pu.First_Name,pu.Last_Name,pu.email,pu.Mobile from pisl_users as pu inner join pisl_prov_regi_qual_mst as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type where pu.Regd_ID = 18430 and pu.DOB = '1991-10-26' and pfq.passing_date = 2016 and pfq.quali_course = 'M.B.B.S.'
        List<dynamic> OBJ = new List<dynamic>();
        string dob = lk.convertdate1(txt_DOB);
        try
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else {
                db = "pisl_fresh_regi_qual_mst";
            }

            DataTable dt1 = dal.GetList("pisl_users as pu inner join "+db+" as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType.ToUpper() + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                OBJ.Add(MRPLookup.Convert_DatatableToList(dt1).ToList());
                return Json(OBJ, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        catch (Exception)
        {

            return null;
        }
        
    }

    public string otpForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail)
    {
        string message = string.Empty;
        string dob = lk.convertdate1(txt_DOB);
        string db = "";
        if (txtRegType.ToUpper() == "PROV")
        {
            db = "pisl_prov_regi_qual_mst";
        }
        else
        {
            db = "pisl_fresh_regi_qual_mst";
        }
        DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
        if (dt1.Rows.Count > 0)
        {
            MailFormat mf = new MailFormat();
            string code = MRPLookup.RandamStringGenerator1();
            Session["provotp"] = code;
            string mailBody = "Your OTP is: " + code + ". DMC";
            string sendmailStatus= MRPLookup.sendMail(txtEmail.Trim(), "DMC | OTP Verification", mailBody, "", "");


            //string mailBody = mf.SendCodeOnMail(dt1.Rows[0]["First_Name"].ToString(), code);
            //string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(),"Reset Password Code" + System.DateTime.Now + "", mailBody, "", "");
            if (sendmailStatus != "Technical issue! Please try agiain")
            {
                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

            }
            else
            {
                message = sendmailStatus;
            }


            return message;
        }
        return "Some thing went wrong...!";
    }

    public string submitForgetEmailPasswordProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail, string txtMobileNo,string CaptchaCaseID,string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (Session["provotp"].ToString()!=txtCode)
        {
            return "Otp incorrect";
        }

        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact Captcha as written below.";
            // return message;
        }
        else
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else
            {
                db = "pisl_fresh_regi_qual_mst";
            }
            string dob = lk.convertdate1(txt_DOB);
            DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile,pu.Regd_ID,pu.Regd_Type", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                if (Convert.ToString(dt1.Rows[0]["Regd_ID"]) != "" && Convert.ToString(dt1.Rows[0]["Regd_Type"]) != "")
                {
                      string colValue = "Email='" + txtEmail.Trim() + "',Mobile='" + txtMobileNo.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                      updPassword = dal.Updation("pisl_users", colValue, "Regd_ID='"+dt1.Rows[0]["Regd_ID"].ToString()+ "' and Regd_Type='"+ dt1.Rows[0]["Regd_Type"].ToString() + "'");
               
                   
                     var tblCurrentStatuscolomns = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                     var Currentupdatestatuss = dal.Updation("pisl_temp_registrations", tblCurrentStatuscolomns, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");

                    var tblCurrentStatuscolomns1 = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                    var Currentupdatestatuss1 = dal.Updation("pisl_fresh_registration_mst", tblCurrentStatuscolomns1, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");



                    message = "Your Email and Mobile Changed successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                    //MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                   // Send SMS and mail for password reset.
                }
                else
                {
                    message = "Please try after some time";
                }
            }
            else
            {
                message = "Data Not found..!";
            }
        }
        return message;
    }
    public string sendOTP(string EmailId)
    {
        string message = "";
        string cond = "email='" + EmailId + "'";
        DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
        if (dtLogin.Rows.Count > 0)
        {
            string mobile = dtLogin.Rows[0]["Mobile"].ToString();
            Session["otp"] = GetRandomText();
            string OTP = Session["otp"].ToString();
            //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
            string mailBody = "Your OTP is: " + OTP + ". DMC";
            MRPLookup.sendMail(EmailId.Trim(), "DMC | OTP Verification", mailBody, "", "");
            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
            MRPLookup.SendSMS("otp", mobile.Trim(), "", "", OTP, "", "", "", "", "", "", "");
            message = "Please check your email or Mobile for OTP";
        }
        else
        {
            message = "Email not found, Please enter a valid email";
        }
        return message;
    }

    public ActionResult ChangePassward(FormCollection frm)
    {
        string Result = "";
        if (frm["txtOTP"].ToString() == Session["OTP"].ToString())
        {
            if (frm["txt_password"].Length >= 8 && frm["txt_password"].Length <= 18)
            {
                Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                Boolean foundMatch = regexObj.IsMatch(frm["txt_password"]);
                if (foundMatch == true)
                {
                    string where = "email='" + frm["txt_email"] + "'";// and Mobile='"+ frm["txt_contactno"] + "'";
                    DataTable dt_dr_details = dal.GetList("pisl_users", "*", where);
                    if (dt_dr_details != null)
                    {
                        if (dt_dr_details.Rows.Count > 0)
                        {
                            string pass = Encrypt(frm["txt_password"].Trim());
                            string col = " password='" + pass + "'";
                            var update = dal.Updation("pisl_users", col, "email='" + dt_dr_details.Rows[0]["email"].ToString() + "'");
                            if (update == 0)
                            {
                                string hostName = Dns.GetHostName();
                                string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                string colName = "activity,email,password,ip,system,description,date";
                                string colValue = "'Change Passs','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + frm["txt_password"].ToString().Trim() + "','" + IP + "','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + pass + "',getdate()";
                                int ins = dal.insertion("tbl_activity", colName, colValue);
                                string message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                MRPLookup.SendSMS("forgot_pwd", dt_dr_details.Rows[0]["Mobile"].ToString(), dt_dr_details.Rows[0]["First_Name"].ToString(), dt_dr_details.Rows[0]["Last_Name"].ToString(), "", "", dt_dr_details.Rows[0]["email"].ToString(), frm["txt_password"].ToString().Trim(), "", "", "", "");
                                Result = "0";
                            }
                            else
                            {
                                Result = "Somthing wrong Error !";
                            }
                        }
                        else
                        {
                            Result = "This is not registered email please check.";
                        }
                    }
                }
                else
                {
                    Result = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                }
            }
            else
            {
                Result = "Password Length must between 8 to 18 letters";
            }
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
    public ActionResult verifyOTP(string otp)
    {
        string Result = "";
        if (otp == Session["otp"].ToString())
        {
            Result = "DONE";
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
}
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using DelhimedicalcouncilORG;
using System.Data;
using System.Security.Cryptography;
using System.Text;
using System.IO;
using System.Drawing;
using System.Net;
using System.Net.Mail;

using System.Text.RegularExpressions;
using System.Data.SqlClient;
using System.Configuration;

namespace DelhimedicalcouncilORG.Controllers
{
public class homeController : Controller
{
    // GET: home
    DAL dal = new DAL();
    MRPLookup lk = new MRPLookup();
    MailFormat mf = new MailFormat();


    private string RetrieveContent(string webPage)
    {
        HttpWebResponse response = null;//used to get response
        StreamReader respStream = null;//used to read response into string
        try
        {
            //create a request object using the url passed in
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(webPage);
            request.Timeout = 10000;

            //go get a response from the page
            response = (HttpWebResponse)request.GetResponse();

            //create a streamreader object from the response
            respStream = new StreamReader(response.GetResponseStream());

            //get the contents of the page as a string and return it
            return respStream.ReadToEnd();
        }
        catch (Exception ex)//houston we have a problem!
        {
            throw ex;
        }
        finally
        {
            //close it down, we’re going home!
            response.Close();
            respStream.Close();
        }
    }

    //using a regular expression, find all of the href or urls
    //in the content of the page
    private void GetAllUrls(string content)
    {
        //regular expression
        string pattern = @"(?:href\s*=)(?:[\s""']*)(?.*?)(?:[\s>""'])";

        //Set up regex object
        Regex RegExpr = new Regex(pattern, RegexOptions.IgnoreCase);

        //get the first match
        Match match = RegExpr.Match(content);

        //loop through matches
        while (match.Success)
        {

            //output the match info
            Console.WriteLine("href match: " + match.Groups[0].Value);
            //WriteToLog(@"C:\matchlog.txt", "href match: " + match.Groups[0].Value + "\r\n");

            Console.WriteLine("Url match: " + match.Groups[1].Value);
            //WriteToLog(@"C:\matchlog.txt", "Url | Location | mailto match: " + match.Groups[1].Value + "\r\n");

            //get next match
            match = match.NextMatch();
        }
    }

    //Write to a log file
    //private void WriteToLog(string file, string message)
    //{
    //using (StreamWriter w = File.AppendText(file))
    //{
    //w.WriteLine(DateTime.Now.ToString() + ": " + message); w.Close();
    //}
    //}




    /// <summary>
    /// ////////////////////////
    /// </summary>
    /// <returns></returns>
    /// 

    public ActionResult Index()
    {




        return View();
    }
    //Start Login//
    public ActionResult login()
    {
        // Session["CAPTCHA"] = "111111";// GetRandomText();
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }

    
    public string Login_Form(string EmailId, string password, string ip, string captcha)
    
    {



        var dateTime = DateTime.Now;
        var tt = dateTime.Hour;


        var dayOfWeek = dateTime.DayOfWeek;
        var day = dayOfWeek.ToString();

        //Decrypt("","");
        //70789
        //554e981f4946f37a4818f1cea3928fe3
        //drtushargupta90@gmail.com
        string message = string.Empty;
        string clientCaptcha = captcha;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            ViewBag.CaptchaError = "Sorry, please write exact text as written above.";
            message = "11,11";
            return message;
        }
        else
            if (Session["checkSession"] == null)
        {
            ip = Request.ServerVariables["REMOTE_ADDR"].ToString();

            string pass = Encrypt(password);
            // string decoded = MRPLookup.Decrypt1(HttpUtility.UrlDecode(pass));
            string cond = "email='" + EmailId + "' and password='" + pass + "' and active!=3 ";//and active=1
            DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
            if (dtLogin.Rows.Count > 0)
            {
                if (Convert.ToString(dtLogin.Rows[0]["Regd_Type"]) == "PROV" && dtLogin.Rows.Count == 1)
                {
                    DataTable dt_temp_D = dal.GetList("pisl_temp_registrations", "Regd_ID,Regd_Type,Final_Status,Approved_By,date_approved,type", "email='" + EmailId.Trim() + "' order by ID desc");
                    for (int i = 0; i < dt_temp_D.Rows.Count; i++)
                    {
                        if (Convert.ToString(dt_temp_D.Rows[i]["Regd_Type"]) != "PROV" && Convert.ToString(dt_temp_D.Rows[i]["Final_Status"]) == "Approved" && Convert.ToString(dt_temp_D.Rows[i]["Approved_By"]) != null && Convert.ToString(dt_temp_D.Rows[i]["date_approved"]) != null && Convert.ToString(dt_temp_D.Rows[i]["type"]) != "service")
                        {



                            string colnameWithValue = "Regd_ID=" + Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]) + ",Regd_Type='" + dt_temp_D.Rows[i]["Regd_Type"].ToString() + "'";
                            string conditions = "S_No=" + Convert.ToInt32(dtLogin.Rows[0]["S_No"]) + "";
                            var Update_paymentUpdate = dal.Updation("pisl_users", colnameWithValue, conditions);
                            if (Update_paymentUpdate == 0)
                            {
                                dtLogin.Rows[0]["Regd_ID"] = Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]);
                                dtLogin.Rows[0]["Regd_Type"] = dt_temp_D.Rows[i]["Regd_Type"].ToString();

                            }
                            break;
                        }
                    }
                }


                for (int i = 0; i < dtLogin.Rows.Count; i++)
                {
                    string hash = Convert.ToString(dtLogin.Rows[i]["hash"]);
                    string decryptedstring = Decrypt(pass, hash);

                    string gid = Convert.ToString(dtLogin.Rows[i]["GID"]);
                    //string active = Convert.ToString(dtLogin.Rows[0]["active"]);
                    if (gid == "0")//Login for doctor
                    {
                        //DataTable dt_lastloginRecord = dal.GetList("pisl_users where email='" + EmailId + "' order by S_No desc", "TOP 1 *", "");
                        if (dtLogin != null && dtLogin.Rows.Count > 0)
                        {

                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[i]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[i]["Regd_Type"]);
                            }
                            else
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                            }
                            if (dtLogin.Rows[i]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[i]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }

                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                        }
                        else
                        {
                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[0]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            }
                            if (dtLogin.Rows[0]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }
                        }


                        message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 2;
                    }
                    else if (gid == "1")//Login for internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["isno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 1;
                            }
                            else
                            {
                                message = "0,6";
                            }
                        }

                        else
                        {
                            message = "0,5";
                        }
                    }
                    else if (gid == "2")//Login for admin and internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["asno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 3;
                            }
                            else
                            {
                                message = "0,6";
                            }

                        }
                        else
                        {
                            message = "0,5";
                        }
                    }
                }
            }
            else
            {
                message = "0,0";
            }
        }
        else
        {
            message = "10,10";
        }
        return message;
    }

    public string Encrypt(string password)
    {
        // Decrypt("", "");
        //string password = @"1234abcd";

        // byte array representation of that string
        byte[] encodedPassword = new UTF8Encoding().GetBytes(password);

        // need MD5 to calculate the hash
        byte[] hash = ((HashAlgorithm)CryptoConfig.CreateFromName("MD5")).ComputeHash(encodedPassword);

        // string representation (similar to UNIX format)
        string encoded = BitConverter.ToString(hash)
           // without dashes
           .Replace("-", string.Empty)
           // make lowercase
           .ToLower();
        return encoded;
    }
    public string Decrypt(string password, string hash1)
    {//https://md5decrypt.net/#answer
        string ss = "";
        string source = "zdNot3oAz5I%3DjRspJg78a%2FY%3D";// "Hello World!";
        MD5 md5 = System.Security.Cryptography.MD5.Create();
        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(password);
        byte[] hash = md5.ComputeHash(inputBytes);

        // step 2, convert byte array to hex string
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < hash.Length; i++)
        {
            sb.Append(hash[i].ToString("X2"));
        }
        return sb.ToString();
    }
    static string GetMd5Hash(MD5 md5Hash, string input)
    {

        // Convert the input string to a byte array and compute the hash.
        byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));

        // Create a new Stringbuilder to collect the bytes
        // and create a string.
        StringBuilder sBuilder = new StringBuilder();

        // Loop through each byte of the hashed data 
        // and format each one as a hexadecimal string.
        for (int i = 0; i < data.Length; i++)
        {
            sBuilder.Append(data[i].ToString("x2"));
        }

        // Return the hexadecimal string.
        return sBuilder.ToString();
    }
    public FileResult GetCaptchaImage()
    {
        MemoryStream ms = new MemoryStream();
        if (Session["CAPTCHA"] != null)
        {
            string text = Session["CAPTCHA"].ToString();

            //first, create a dummy bitmap just to get a graphics object
            Image img = new Bitmap(1, 1);
            Graphics drawing = Graphics.FromImage(img);

            Font font = new Font("Jokerman", 15);
            //measure the string to see how big the image needs to be
            SizeF textSize = drawing.MeasureString(text, font);

            //free up the dummy image and old graphics object
            img.Dispose();
            drawing.Dispose();

            //create a new image of the right size
            img = new Bitmap((int)textSize.Width + 40, (int)textSize.Height + 20);
            drawing = Graphics.FromImage(img);

            Color backColor = Color.SeaShell;
            Color textColor = Color.Red;
            //paint the background
            drawing.Clear(backColor);

            //create a brush for the text
            Brush textBrush = new SolidBrush(textColor);

            drawing.DrawString(text, font, textBrush, 20, 10);

            drawing.Save();

            font.Dispose();
            textBrush.Dispose();
            drawing.Dispose();


            img.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
            img.Dispose();

            return File(ms.ToArray(), "image/png");
        }
        else
        {
            return File(ms.ToArray(), "image/png");
        }
    }
    private string GetRandomText()
    {
        StringBuilder randomText = new StringBuilder();
        string alphabets = "12345679ABCEFGHKLMNPRSTUVWXZ";
        Random r = new Random();
        for (int j = 0; j <= 5; j++)
        {
            randomText.Append(alphabets[r.Next(alphabets.Length)]);
        }
        return randomText.ToString();
    }
    //End Login//
    public ActionResult signup()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    [HttpPost]
    public string sendotpsignup(string txt_Email, string txt_ContactNo)
    {
        string msg = "";
        try
        {
            var CheckEmail = IsEmailandMobileExists(txt_Email, "");
            var checkMobile = IsEmailandMobileExists("", txt_ContactNo);
            if (CheckEmail == false && checkMobile == false)
            {

                Session["otp"] = GetRandomText();
                string OTP = Session["otp"].ToString();
                //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
                string mailBody = "Your OTP is: " + OTP + ". DMC";
                MRPLookup.sendMail(txt_Email.Trim(), "DMC | OTP Verification", mailBody, "", "");

                //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
              

                MRPLookup.SendSMS("otp", txt_ContactNo.Trim(), "", "", OTP, "", "", "", "", "", "", "");
                msg = "0";
            }
            else if (CheckEmail == true && checkMobile == true)
            {
                msg = "Email and Mobile no. are already exists!!";
            }
            else
            {
                if (checkMobile == true && CheckEmail == false)
                {
                    msg = "Mobile No. is Already Exists!!";
                }
                else if (CheckEmail == true && checkMobile == false)
                {
                    msg = "Email Address is Already Exists!!";
                }


            }
        }
        catch (Exception ex)
        {
            msg = "1";
        }
        return msg;
    }
    public bool IsEmailandMobileExists(string email, string mobile)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        try
        {
            tableName = "pisl_users";
            colname = "*";
            if (!string.IsNullOrEmpty(email))
            {
                cond = "email='" + email + "'";
            }
            if (!string.IsNullOrEmpty(mobile))
            {
                cond = "mobile='" + mobile + "'";
            }
            //cond=
            DataTable dt_datacheck = dal.GetList(tableName, colname, cond);
            if (dt_datacheck != null && dt_datacheck.Rows.Count > 0)
            {
                IsExists = true;
            }

        }
        catch (Exception ex)
        {
            IsExists = false;
            throw;
        }
        return IsExists;
    }

    public ActionResult IsDocDataExists(string regd_type, string regd_no, string DOB, string PassingYear)
    {
        //List<dynamic> list = new List<dynamic>();
        string message = "";
        try
        {
            var tbl_name = "";

            var userExists = IsRegd_Exists(regd_type, regd_no, DOB, PassingYear, out tbl_name);
            if (userExists == true && tbl_name == "pisl_users")
            {

                message = "Already Registered With us. Please Login With Your Credential";
            }
            else
                if (userExists == true && tbl_name == "pisl_fresh_registration_mst")
            {
                message = "Your Registration No. is Expired. Please SignUp Again.";
            }
            else
            {
                message = "NotExists";
                //message = "Your Registration No. is Not Exists!";
            }
        }
        catch (Exception ex)
        {

        }
        return Json(message, JsonRequestBehavior.AllowGet);
    }
    public bool IsRegd_Exists(string regd_type, string regd_no, string DOB, string PassingYear, out string Tbl_Name)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        Tbl_Name = "";
        DataTable dt_UserCheck = null;
        try
        {
            tableName = "pisl_users";
            colname = "*";
            cond = "Regd_Type='" + regd_type + "' and Regd_ID='" + regd_no.Trim() + "'";
            dt_UserCheck = dal.GetList(tableName, colname, cond);
            if (dt_UserCheck == null || dt_UserCheck.Rows.Count == 0)
            {
                tableName = "pisl_fresh_regi_qual_mst";
                colname = "*";
                cond = "quali_type='Basic Qualification' AND Regd_ID='" + regd_no + "' "
                    + "AND Regd_Type='" + regd_type + "' AND passing_date =  '" + PassingYear.Trim() + "'";
                dt_UserCheck = dal.GetList(tableName, colname, cond);
                if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                {
                    Tbl_Name = "pisl_fresh_regi_qual_mst";

                    tableName = "pisl_fresh_registration_mst";
                    colname = "*";
                    cond = "Regd_ID='" + regd_no + "' AND Regd_Type='" + regd_type + "'";
                    dt_UserCheck = dal.GetList(tableName, colname, cond);
                    if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                    {
                        Tbl_Name = "pisl_fresh_registration_mst";
                        IsExists = true;
                    }
                    else
                    {
                        IsExists = false;
                    }
                }
                else
                {

                    IsExists = false;
                }
            }
            else
            {
                Tbl_Name = "pisl_users";
                IsExists = true;
            }
        }
        catch (Exception ex)
        {


            throw;
        }
        return IsExists;
    }

    [HttpPost]
    public string createsignup(string txt_Email, string txt_ContactNo, string txt_FirstName, string txt_MiddleName,
        string txt_LastName, string txt_Password, string txt_ConfirmPassword, string txt_DOB, bool chk_TermCondition,
        string Captcha, string Regd_ID, string txtOTP, string ddl_regType, string txt_oldData, string passingYear)
    {
        string message = "";
        string dob = lk.convertdate1(txt_DOB);
        string Tbl_Name = "";
        try
        {
            if (!IsEmailandMobileExists(txt_Email, ""))
            {
                if (!IsEmailandMobileExists("", txt_ContactNo))
                {
                    if (ddl_regType == "FRS" || ddl_regType == "RRE")
                    {
                        if (IsRegd_Exists(ddl_regType, Regd_ID, dob, passingYear, out Tbl_Name))
                        {
                            Tbl_Name = Tbl_Name;
                            if (Tbl_Name == "pisl_users")
                            {
                                //if Pisl_user Table Record Exists but no Email and Mobile No exists
                                //in this case update the Email and Mobile No.
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        DataTable dt_Email_Mobile_Check = dal.GetList("pisl_users",
                                                        "top 1*", " Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                        if (dt_Email_Mobile_Check != null)
                                                        {
                                                            if (dt_Email_Mobile_Check.Rows.Count > 0)
                                                            {
                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_Email_Mobile_Check.Rows[0]["email"])))
                                                                {
                                                                    string pass = Encrypt(txt_Password.Trim());
                                                                    string hash = Encrypt(MRPLookup.RandamStringGenerator1());
                                                                    var updateDt = dal.Updation("pisl_users",
                                                                        "email='" + txt_Email.Trim() + "',mobile='" + txt_ContactNo.Trim() + "',password='" + pass + "',hash='" + hash + "'",
                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                    if (updateDt == 0)
                                                                    {
                                                                        DataTable dt_fresh_Check = dal.GetList("pisl_fresh_registration_mst",
                                                                            "top 1 * ",
                                                                            "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                        if (dt_fresh_Check != null)
                                                                        {
                                                                            if (dt_fresh_Check.Rows.Count > 0)
                                                                            {
                                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_fresh_Check.Rows[0]["Email"])))
                                                                                {
                                                                                    var updateDt_fresh = dal.Updation("pisl_fresh_registration_mst",
                                                                                        "Email='" + txt_Email.Trim() + "',Mobile='" + txt_ContactNo.Trim() + "'",
                                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");

                                                                                    if (updateDt_fresh != 0)
                                                                                    {
                                                                                        message = "Error!!";
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                                        MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                                        message = "Please, Check Your Mail For Login Details";
                                                                        //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                                        MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                                    }
                                                                    else
                                                                    {
                                                                        message = "Error!!";
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    message = "Your record are already Exists with us!!";
                                                                }
                                                            }
                                                        } //End Updation
                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }
                            else if (Tbl_Name == "pisl_fresh_regi_qual_mst" || Tbl_Name == "pisl_fresh_registration_mst")
                            {
                                //Insert Login Record in Pisl_Users
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        string pass = Encrypt(txt_Password.Trim());
                                                        string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                        if (string.IsNullOrEmpty(Regd_ID))
                                                        {
                                                            Regd_ID = "0";
                                                        }
                                                        //if (txt_oldData != "")
                                                        //{
                                                        //    string colnamemst = "*";
                                                        //    string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        //    DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        //    if (dtrmst.Rows.Count > 0)
                                                        //    {
                                                        //        string oldtype = "";
                                                        //        if (ddl_regType == "FRS")
                                                        //        {
                                                        //            oldtype = "service";
                                                        //        }
                                                        //        else if (ddl_regType == "RRE")
                                                        //        {
                                                        //            oldtype = "reregi";
                                                        //        }
                                                        //        var corrAddress1 = dtrmst.Rows[0]["Corr_Add_Line_1"].ToString();
                                                        //        var corrAddress2 = dtrmst.Rows[0]["Corr_Add_Line_2"].ToString();
                                                        //        var perAddress1 = dtrmst.Rows[0]["Per_Add_Line_1"].ToString();
                                                        //        var perAddress2 = dtrmst.Rows[0]["Per_Add_Line_2"].ToString();

                                                        //        string colNameold = "Regd_ID,Regd_Type,type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,date_entered,Father_Name,POB,Gender,Nationality,Corr_Add_Line_1,Corr_Add_Line_2,Corr_Add_State,Corr_Add_Pincode,Corr_Add_Country,Per_Add_Line_1,Per_Add_Line_2,Per_Add_Line_State,Per_Add_Line_Pincode,Per_Add_Line_Country";

                                                        //        string colValueold = "'" + Regd_ID + "','" + ddl_regType + "','" + oldtype + "','" + txt_FirstName + "','" + txt_MiddleName + "','"  + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "', '"+ lk.GetDateTime()+ "' ,'"+ dtrmst.Rows[0]["Father_Name"] + "','" + dtrmst.Rows[0]["POB"] + "','" + dtrmst.Rows[0]["Gender"] + "','" + dtrmst.Rows[0]["Nationality"] + "','" + corrAddress1 + "','" + corrAddress2 + "','" + dtrmst.Rows[0]["Corr_Add_State"] + "','" + dtrmst.Rows[0]["Corr_Add_Pincode"] + "','" + dtrmst.Rows[0]["Corr_Add_Country"] + "','" + perAddress1 + "','" + perAddress2 + "','" + dtrmst.Rows[0]["Per_Add_Line_State"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Pincode"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Country"] + "'";
                                                        //        int insold = dal.insertion("pisl_temp_registrations", colNameold, colValueold);
                                                        //    }
                                                        //}
                                                        Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                        string colnamemst = "*";
                                                        string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        DateTime txtdob1 = Convert.ToDateTime(dtrmst.Rows[0]["DOB"]);
                                                        string txtdob = txtdob1.ToShortDateString();

                                                        string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                            + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                        string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + dtrmst.Rows[0]["First_Name"].ToString() + "','" + dtrmst.Rows[0]["Middle_Name"].ToString() + "',"
                                                            + "'" + dtrmst.Rows[0]["Last_Name"].ToString() + "','" + txtdob + "','" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                            + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                        int ins = dal.insertion("pisl_users", colName, colValue);
                                                        if (ins == 0)
                                                        {
                                                            string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                            MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                            message = "Please, Check Your Mail For Login Details";
                                                            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                            MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                        }
                                                        else
                                                        {
                                                            message = "Try after some time";
                                                        }

                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }

                        }
                        else
                        {
                            message = "Your Registration No and Passing Year is Not Exist with Us";
                        }
                    }
                    else
                    {
                        //Insert Login Record in Pisl_Users
                        if (chk_TermCondition == true)
                        {
                            if (txtOTP == Session["otp"].ToString())
                            {
                                if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                {
                                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                    Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                    if (foundMatch == true)
                                    {
                                        if (txt_Password == txt_ConfirmPassword)
                                        {
                                            if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                            {
                                                //if (Tbl_Name== "pisl_users") { }
                                                string pass = Encrypt(txt_Password.Trim());
                                                string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                if (string.IsNullOrEmpty(Regd_ID))
                                                {
                                                    Regd_ID = "0";
                                                }
                                                Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                if (ddl_regType == "-1")
                                                {
                                                    ddl_regType = "";
                                                }


                                                string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                    + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                int ins = dal.insertion("pisl_users", colName, colValue);
                                                if (ins == 0)
                                                {
                                                    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                    message = "Please, Check Your Mail";
                                                    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                }
                                                else
                                                {
                                                    message = "Try after some time";
                                                }

                                                //string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                //    + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                //string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                //    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                //    + "1,0,0,'"+ lk.GetDateTime()+ "','','" + Regd_ID1 + "'";
                                                //int ins = dal.insertion("pisl_users", colName, colValue);
                                                //if (ins == 0)
                                                //{
                                                //    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                //    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                //    message = "Please, Check Your Mail";
                                                //    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                //    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                //}
                                                //else
                                                //{
                                                //    message = "Try after some time";
                                                //}
                                            }
                                            else
                                            {
                                                message = "Enter A Valid Email";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password and Confrim Password is Not Same";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                    }
                                }
                                else
                                {
                                    message = "Password Length must between 8 to 18 letters";
                                }
                            }
                            else
                            {
                                message = "Enter the Valid OTP";
                            }
                        }
                        else
                        {
                            message = "Please check the Terms and Conditions";
                        }

                        //}
                    }
                }
                else
                {
                    message = "Mobile No. is Already Exists";
                }
            }
            else
            {
                message = "Email Already exists!!";
            }
            //
            //Cut the Code From There

        }
        catch
        {

        }
        return message;
    }

    public ActionResult SignupVerification()
    {
        string message = "";
        try
        {
            if (Request.QueryString["email"] != null && Request.QueryString["hash"] != null)
            {
                string email = Request.QueryString["email"];
                string hash = Request.QueryString["hash"];
                string cond = "Email='" + email.Trim() + "' and Hash='" + hash.Trim() + "' and Active=0";
                DataTable dt = dal.GetList("pisl_users", "*", cond);
                if (dt.Rows.Count > 0)
                {
                    int upd = dal.Updation("pisl_users", "Active=1", cond);
                    if (upd == 0)
                    {
                        message = "Your account has been activated, you can now login";
                    }
                    else
                    {
                        message = "Try after some time";
                    }
                }
                else
                {
                    message = "The url is either invalid or you already have activated your account.";
                }
            }
            else
            {
                message = "Invalid approach, please use the link that has been send to your email.";
            }
        }
        catch
        { }
        ViewBag.lbl_status = message;
        return View();
    }
    public ActionResult contact()
    {
        return View();
    }

    public ActionResult about()
    {
        return View();
    }
    public ActionResult faqs()
    {
        return View();
    }
    // Start forgot password
    public ActionResult forgotpassword()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public string sendCode(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        string message = string.Empty;
        try
        {
            string clientCaptcha = CaptchaCaseID;
            string serverCaptcha = Session["CAPTCHA"].ToString();
            if (!clientCaptcha.Equals(serverCaptcha))
            {
                ViewBag.ShowCAPTCHA = serverCaptcha;
                message = "Sorry, please write exact text as written below.";
            }
            else
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' ";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string name = Convert.ToString(dt.Rows[0]["First_Name"]);
                                        string Mobile = Convert.ToString(dt.Rows[0]["Mobile"]);

                                        MailFormat mf = new MailFormat();
                                        string code = MRPLookup.RandamStringGenerator1();
                                        string mailBody = mf.SendCodeOnMail(name, code);
                                        MRPLookup.SendSMS("otp", Mobile, "", "", code, "", "", "", "", "", "", "");
                                        string colValue = "Code='" + code.Trim() + "'";
                                        int updCode = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "'");
                                        if (updCode == 0)
                                        {
                                            string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(), "Reset Password Code " + System.DateTime.Now + "", mailBody, "", "");
                                            if (sendmailStatus != "Technical issue! Please try agiain")
                                            {
                                                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

                                            }
                                            else
                                            {
                                                message = sendmailStatus;
                                            }
                                        }
                                        else
                                        {
                                            message = "Please try after some time.";
                                        }

                                    }
                                    else
                                    {
                                        message = "Enter a New Password.";
                                    }
                                }
                                else
                                {
                                    message = "Your Email And Mobile Number Do not Match with DMC Registered Users.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
        }
        catch (Exception ex)
        {

        }
        return message;
    }
    public string forgotpasswordCaseID(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact text as written below.";
            // return message;
        }
        else
        {
            if (txtCode != "0")
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string mobile = Convert.ToString(dt.Rows[0]["Mobile"]);
                                    string firstName = Convert.ToString(dt.Rows[0]["First_Name"]);
                                    string lastName = Convert.ToString(dt.Rows[0]["Last_Name"]);
                                    //string new_password = Encrypt(MRPLookup.RandamStringGenerator1());
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string colValue = "password='" + new_PasswordMD5.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                                        updPassword = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                        if (updPassword == 0)
                                        {
                                            updPassword = dal.Updation("pisl_users", "Code='0'", "Email='" + txtEmail.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                            string hostName = Dns.GetHostName();
                                            string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                            string colName = "activity,email,password,ip,system,description,date";
                                            colValue = "'Change Passs','" + txtEmail + "','" + txtPassword + "','" + IP + "','" + mobile + "','" + new_PasswordMD5 + "',getdate()";
                                            int ins = dal.insertion("tbl_activity", colName, colValue);
                                            message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                            MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                                            // Send SMS and mail for password reset.
                                            

                                        }
                                        else
                                        {
                                            message = "Please try after some time";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please try another password.";
                                    }

                                }
                                else
                                {
                                    message = "Your Details Dont Match or You have NOT registered with DMC.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
            else
            {
                message = "Code not match";
            }
        }
        return message;
    }

    public ActionResult introduction()
    {
        return View();
    }

    public ActionResult powers()
    {
        return View();
    }

    public ActionResult thecouncil()
    {
        return View();
    }

    //public ActionResult gallery()
    //{
    //    return View();
    //}
    public ActionResult Gallery()
    {
        return View();
    }

    public ActionResult accomplishments()
    {
        return View();
    }

    public ActionResult registration()
    {
        return View();
    }
    public ActionResult cmeperforma()
    {
        return View();
    }
    public ActionResult cmeonline()
    {
        return View();
    }
    public ActionResult cmerequirements()
    {
        return View();
    }
    public ActionResult cmepassbook()
    {
        return View();
    }
    public ActionResult duties()
    {
        return View();
    }
    public ActionResult inst_general()
    {
        return View();
    }

    public ActionResult inst_fees()
    {
        return View();
    }
    public ActionResult inst_docupload()
    {
        return View();
    }
    public ActionResult disclaimer()
    {
        return View();
    }
    public ActionResult feestructure()
    {
        return View();
    }
    public ActionResult privacypolicy()
    {
        return View();
    }
    public ActionResult termofuse()
    {
        return View();
    }

    public ActionResult litigations()
    {
        return View();
    }


    public ActionResult council_meeting()
    {
        return View();
    }
    public ActionResult Cme_workshop_Conference()
    {
        return View();
    }

    public ActionResult Media_room()
    {
        return View();
    }
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    public ActionResult LogOut()
    {
        Session.Abandon();
        return RedirectToAction("Index", "Home");
    }
    public ActionResult SearchElectrolData(string regid)
    {
        string msg = "";
        DataTable dtSearch = dal.GetList("tbl_electrolData", "*", "RegNo='" + regid.Trim() + "'");
        if (dtSearch.Rows.Count > 0)
        {
            return Json(MRPLookup.DataTableToJSONWithJSONNet(dtSearch), JsonRequestBehavior.AllowGet);
        }
        else
        {
            msg = "Data not found";
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
    }
    public ActionResult SearchElectrolDataUpdate(string regid)
    {
        int upd = 1;
        upd = dal.Updation("tbl_electrolData", "Status='Completed',Date='" + lk.GetDateTime() + "'", "ID='" + regid.Trim() + "'");
        if (upd == 0)
        {

            return Json(upd, JsonRequestBehavior.AllowGet);
        }
        else
        {
            return Json(upd, JsonRequestBehavior.AllowGet);
        }
    }

    public ActionResult TotalCount()
    {
        DataTable dtcntCompleted = dal.GetList("tbl_electrolData", "count(*) as cntCompleted", "status='Completed'");
        DataTable dtcntNotCompleted = dal.GetList("tbl_electrolData", "count(*) as cntNotCompleted", "status ='Valid'");
        string totalCmpleteStatus = "Completed: " + Convert.ToString(dtcntCompleted.Rows[0]["cntCompleted"]) + "  Not Completed: " + Convert.ToString(dtcntNotCompleted.Rows[0]["cntNotCompleted"]);
        return Json(totalCmpleteStatus, JsonRequestBehavior.AllowGet);
    }
    public ActionResult Renewal_Reminder(string key)
    {
        string msg = "";
        try
        {

            key = "1111";
            string validKey = "1111";
            // MRPLookup.SendSMS("Renewal_expired_tdy", "9899849487", "Dinesh", "", "", "", "", "", "", "", "", "");
            if (key == validKey)
            {
                string expiry_frtyfive = Convert.ToDateTime(DateTime.Now.AddDays(30)).ToString("yyyy-MM-dd");//date(('Y-m-d'), strtotime('+30 days'));
                string expiry_tdy = Convert.ToDateTime(DateTime.Now).ToString("yyyy-MM-dd");//date('Y-m-d');
                string expiry_pastfifty = Convert.ToDateTime(DateTime.Now.AddDays(-50)).ToString("yyyy-MM-dd");// date(('Y-m-d'), strtotime('-50 days'));
                string cond = "(Expiry_Date = '" + expiry_frtyfive + "' OR  Expiry_Date = '" + expiry_tdy + "' OR Expiry_Date = '" + expiry_pastfifty + " ') AND (Mobile !='' OR  Email !='')";
                //DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", cond);
                string strConnString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                SqlConnection con = new SqlConnection(strConnString);
                //SqlConnection con = new SqlConnection(@"Data Source=103.20.212.254,1232;Initial Catalog=dmcaws_New;User Id=sa;Password=bD$x89K3$@K9UaQsKQ");
                //SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-PKTADCN;Initial Catalog=dmcaws1;integrated security=true");
                con.Open();
                SqlCommand cmd = new SqlCommand("select * from pisl_fresh_registration_mst where " + cond + "", con);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                con.Close();
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string First_Name = Convert.ToString(dt.Rows[i]["First_Name"]);
                        string Last_Name = Convert.ToString(dt.Rows[i]["Last_Name"]);
                        string Regd_ID = Convert.ToString(dt.Rows[i]["Regd_ID"]);
                        string Regd_Type = Convert.ToString(dt.Rows[i]["Regd_Type"]);
                        string Mobile = Convert.ToString(dt.Rows[i]["Mobile"]);
                        string Expiry_Date = Convert.ToDateTime(dt.Rows[i]["Expiry_Date"]).ToString("yyyy-MM-dd");
                        string date_approved = Convert.ToDateTime(dt.Rows[i]["date_approved"]).ToString("yyyy-MM-dd");
                        string tdydate = Convert.ToDateTime(System.DateTime.Now).ToString("yyyy-MM-dd");
                        string to = Convert.ToString(dt.Rows[i]["Email"]);

                        string subject1 = "Renewal of Registration with Delhi Medical Council"; //// Give the email a subject
                        string subject2 = "Expiry of Registration with Delhi Medical Council";
                        string subject3 = "Deletion of Regd Number with Delhi Medical Council";
                        string message1 = "";
                        message1 += "Dear Dr " + First_Name + " " + Last_Name + ",";
                        message1 += "Greetings from Delhi Medical Council!!";

                        message1 += "   This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council is due for renewal.";
                        message1 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting ";
                        message1 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message1 += "For inclusion of any additional qualification, please produce the original degree at the office of Delhi Medical Council, so that your additional ";
                        message1 += "qualification certificate can be verified with the original document. The original degree / diploma Certificate will be returned immediately after verification. ";

                        message1 += "<b>This is a system generated email and we request you not to reply to this email. Please ignore if already applied.</b>";

                        message1 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message1 += "Warm Regards,";

                        message1 += "Delhi Medical Council.";
                        message1 += "Ground Floor, B Wing, B Block-1";
                        message1 += "DMCR IT Park, Shastri Park";
                        message1 += "New Delhi-110053";
                        message1 += "Tel: +91-011-46621000";
                        message1 += "Website - www.delhimedicalcouncil.org	 ";

                        string message2 = "";
                        message2 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message2 += "Greetings from Delhi Medical Council!!";

                        message2 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council expired on " + Expiry_Date + " and  is due for renewal. ";

                        message2 += "We request you to kindly renew your registration within thirty days and keep your registration in force. You can renew your registration online by visiting ";
                        message2 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message2 += "Please take note that in case you do not apply for renewal of registration within the stipulated period, your name shall be removed from the State Medical ";
                        message2 += "Register maintained by the Delhi Medical Council in accordance with the provisions of Section 22 of the Delhi Medical Council Act, 1997 which will debar";
                        message2 += "you from practicing Allopathic in the state of Delhi.";

                        message2 += "<b>Kindly ignore this email, in case you have already applied for renewal of registration</b>";

                        message2 += "This is a system generated email and we request you not to reply to this email.";

                        message2 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message2 += "Warm Regards,";

                        message2 += "Delhi Medical Council.";
                        message2 += "Ground Floor, B Wing, B Block-1";
                        message2 += "DMCR IT Park, Shastri Park";
                        message2 += "New Delhi-110053";
                        message2 += "Tel: +91-011-46621000";
                        message2 += "Website - www.delhimedicalcouncil.org";

                        string message3 = "";
                        message3 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message3 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council has expired on " + Expiry_Date + ". You ";
                        message3 += "failed to renew the registration with Delhi Medical Council, in spite of notices/Emails (public / individual) issued for renewal. Hence, in accordance with the ";
                        message3 += "provisions of section 22(3) of Delhi Medical Council Act, 1997; your name under Registration number " + Regd_ID + "-" + Regd_Type + "  has been removed from the State ";
                        message3 += "Medical Register of Delhi Medical Council.";

                        message3 += "Please note that if you wish to have your name re-entered in the State Medical Register of Delhi Medical Council, you may do so, by paying fees as detailed herein below,";
                        message3 += "in addition to fee for renewal of registration (Rs. 2000/-)";

                        message3 += "Late fees for non-renewal of registration:-";
                        message3 += "(a) upto six months from the date from 		Rs. 1000/- (Rupees One Thousand only)";
                        message3 += "    which registration is due for renewal";
                        message3 += "(b) for period more than six months 	    Rs. 2000/- (Rupees One Thousand only)";
                        message3 += "     but upto one year";
                        message3 += "(c) for period more than one year 			Rs. 1000/- (Rupees One Thousand per year and Part thereof)";

                        message3 += "Please also note that any person servicing or practicing modern scientific system of medicine (allopathy) in Delhi without holding valid registration with Delhi Medical Council is liable for action under the provisions of Delhi Medical Council Act, 1997.";
                        message3 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting www.delhimedicalcouncil.org and apply under Online Renewal & Services.";

                        message3 += "<b>Kindly ignore this letter, in case you have already applied for renewal of registration</b>";

                        message3 += "This is a system generated email and we request you not to reply to this email.";

                        message3 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message3 += "Warm Regards,";

                        message3 += "Delhi Medical Council.";
                        message3 += "Ground Floor, B Wing, B Block-1";
                        message3 += "DMCR IT Park, Shastri Park";
                        message3 += "New Delhi-110053";
                        message3 += "Tel: +91-011-46621000";
                        message3 += "Website - www.delhimedicalcouncil.org,";

                        string headers = "From: DMC Registration System <registration@delhimedicalcouncil.org>' . '\r\n'"; // Set from headers

                        string message = "";
                        string subject = "";
                        string trigger = "";
                        string msgtxt = "";
                        if (Convert.ToDateTime(Expiry_Date) > Convert.ToDateTime(tdydate))
                        {
                            message = message1;
                            subject = subject1;
                            trigger = "Renewal_due_reminder";
                            msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Renewal of your DMC Regd No " + Regd_ID + " - " + Regd_Type + " is due. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }

                        }
                        else if (Convert.ToDateTime(Expiry_Date) == Convert.ToDateTime(tdydate))
                        {
                            message = message2;
                            subject = subject2;
                            trigger = "Renewal_expired_tdy";
                            // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Registration of DMC Regd No " + Regd_ID + " - " + Regd_Type + " expired today. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }
                        }
                        //else if (Convert.ToDateTime(Expiry_Date) < Convert.ToDateTime(tdydate))
                        //{
                        //    message = message2;
                        //    subject = subject2;
                        //    trigger = "Renewal_expired_fifty";
                        //   // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Your  ID " + Regd_ID + " - " + Regd_Type + " has been removed from the State Medical Register of DMC . Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                        //    if (!string.IsNullOrEmpty(to))
                        //    {
                        //       // MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //    if (!string.IsNullOrEmpty(Mobile))
                        //    {
                        //       // MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(to))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(Mobile))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}

                    }
                }

            }
            else
            {
                msg = "Key not match";
                string path = "C:\\TestService\\ServiceLog.txt";
                using (StreamWriter writer = new StreamWriter(path, true))
                {
                    writer.WriteLine(string.Format(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt"), DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt")));
                    writer.Close();
                }
            }
        }
        catch
        {

        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult certverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["cert"];
            string Regd_type = "";
            string regd_id = "";

            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["cert"]);
            var splitedString = decodedstr.Split('-');
            Regd_type = splitedString[0];
            regd_id = splitedString[1];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            switch (Regd_type)
            {
                case "RRE":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "FRS":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "PROV":
                    db = "pisl_prov_registration_mst";
                    qual_db = "pisl_prov_regi_qual_mst";
                    break;

                default:
                    Message = "This certificate cannnot be verified";
                    break;

            }

            var check_namechange = dal.GetList("tbl_NameChangeHistory_New", "CaseID,Name=(case when (New_MiddleName is null or  New_MiddleName='') then New_FirstName+' '+New_LastName when (New_MiddleName is null or  New_MiddleName='') and (New_LastName is null or New_LastName='') then New_FirstName else New_FirstName+' '+New_MiddleName+' '+New_LastName end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_namechange.Rows.Count > 0)
            {
                string CaseID = check_namechange.Rows[0]["CaseID"].ToString();
                ViewBag.Name = check_namechange.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                if (check_Doctordata.Rows.Count > 0)
                {
                    string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
                    ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                    DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                    DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                    DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                    ViewBag.qual = dt_qual;
                    ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                    ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                    Message = "success";
                }
                else
                {
                    Message = "This Entry Cannot be Verified";
                }
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;

        return View();
    }
    public ActionResult VeryfyCertificate(string value)
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        var qstring = value;
        var decodedStr = MRPLookup.Decrypt1(qstring);
        var splitedString = decodedStr.Split('-');
        var Regd_type = splitedString[0];
        var regd_id = splitedString[1];
        var db = "";
        var qual_db = "";
        //string regdtype=
        switch (Regd_type)
        {
            case "RRE":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "FRS":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "PROV":
                db = "pisl_prov_registration_mst";
                qual_db = "pisl_prov_regi_qual_mst";
                break;

            default:
                Message = "This certificate cannnot be verified";
                break;

        }
        var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
        if (check_Doctordata.Rows.Count > 0)
        {
            string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
            DataTable dt_Documents = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
            DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign' ");

        }
        else
        {
            Message = "This Entry Cannot be Verified";
        }
        return Json("", JsonRequestBehavior.AllowGet);
    }
    public ActionResult letterverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["letter"];
            string Regd_type = "";
            string regd_id = "";
            string ID = "";
            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["letter"]);
            var splitedString = decodedstr.Split('-');
            ID = splitedString[0];
            Regd_type = splitedString[1];
            regd_id = splitedString[2];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            //switch ()
            //{
            //    case "RRE":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "FRS":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "PROV":
            //        db = "pisl_prov_registration_mst";
            //        qual_db = "pisl_prov_regi_qual_mst";
            //        break;

            //    default:
            //        Message = "This certificate cannnot be verified";
            //        break;

            //}
            var letter_type = "";
            var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,date_approved,drg_from,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "ID='" + ID + "' and Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_Doctordata.Rows.Count > 0)
            {
                switch (check_Doctordata.Rows[0]["drg_from"].ToString())
                {
                    case "noc":
                        letter_type = "No Objection Certificate";
                        break;

                    case "gdst":
                        letter_type = "Good Standing Certificate";
                        break;
                }
                ViewBag.lettertype = letter_type;
                ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("pisl_fresh_regi_qual_mst", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='Sign'");
                if (!string.IsNullOrEmpty(check_Doctordata.Rows[0]["date_approved"].ToString()))
                {
                    ViewBag.DateApproved = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).ToString("dd MMMM,yyyy");
                    ViewBag.expiry = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).AddDays(-1).AddMonths(6).ToString("dd MMMM, yyyy");
                }
                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(ID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                Message = "This Entry Cannot be Verified";
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;
        return View();
    }
    public ActionResult Regi_search()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public ActionResult search_ur_dr()
    {

        return View();
    }
    public ActionResult regi_search_submit(string Regid, string Types)
    {
        try
        {


            string regid = Request.QueryString["Regd_ID"];
            string type = Request.QueryString["Type"]; ;
            //string type = frm["type"].Trim();
            //string regid = frm["regid"].Trim();
            string colname = "*";
            string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "' ORDER BY S_No DESC";
            DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
            if (dt.Rows.Count > 0)
            {
                DateTime ddob = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                DateTime dapproved = Convert.ToDateTime(dt.Rows[0]["date_approved"].ToString());
                DateTime dexpiry = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                ViewBag.dateapproved = dapproved.ToShortDateString();
                ViewBag.expirydate = dexpiry.ToShortDateString();
                ViewBag.dob = ddob.ToShortDateString();
                ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


                DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
                if (result_remarks.Rows.Count > 0)
                {
                    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    {
                        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    }
                }
                DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
                if (qualificationdt.Rows.Count > 0)
                {
                    ViewBag.qualdata = qualificationdt;
                }

            }
            return View();
        }
        catch (Exception ex)
        {
            return View();
        }
    }
    public ActionResult regi_search_submits(FormCollection frm)
    {

        string clientCaptcha = frm["CL_CAPCHA"].ToString();
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;

            return Json("-1");
        }
        string msg = "";
        //string type = Regd_ID;
        //string regid = Type;
        string type = frm["type"].Trim();
        string regid = frm["regid"].Trim();
        string colname = "*";
        string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
        if (dt.Rows.Count > 0)
        {
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
            if (result_remarks.Rows.Count > 0)
            {
                for (int i = 0; i < result_remarks.Rows.Count; i++)
                {
                    ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                }
            }
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult search_ur_dr_submit(FormCollection frm)
    {
        try
        {



            string First_Name = Request.QueryString["First_Name"];
            string Last_Name = frm["Last_Name"];
            string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
            string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
            string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
            string Mobile = Request.QueryString["Mobile"];
            string Email = Request.QueryString["Email"];

            if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Last_Name) && !string.IsNullOrEmpty(Corr_Add_Line_1) && !string.IsNullOrEmpty(Corr_Add_Line_2) && !string.IsNullOrEmpty(Corr_Add_Pincode) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Mobile='" + Mobile + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}

                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "Email='" + Email + "' and Mobile='" + Mobile + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }


            return View();
        }
        catch (Exception ex)
        {
            return View();

        }
    }


    public ActionResult search_ur_dr_submit2(FormCollection frm)
    {
        string msg = "";
        string First_Name = frm["First_Name"];
        string Last_Name = frm["Last_Name"];
        string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
        string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
        string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
        string Mobile = frm["Mobile"];
        string Email = frm["Email"];

        string condtions = "First_Name='" + First_Name.Trim() + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
        if (dt.Rows.Count > 0)
        {
            //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
            //if (result_remarks.Rows.Count > 0)
            //{
            //    for (int i = 0; i < result_remarks.Rows.Count; i++)
            //    {
            //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
            //    }
            //}
            string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", condtions2);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        else
        {
            msg = "Not Data Found";
        }


        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult cme()
    {
        return View();
    }
    public ActionResult status_comp2021()
    {
        return View();
    }

    public ActionResult ForgetEmailPasswordProv()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public dynamic getForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB)
    {
        //select pu.First_Name,pu.Last_Name,pu.email,pu.Mobile from pisl_users as pu inner join pisl_prov_regi_qual_mst as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type where pu.Regd_ID = 18430 and pu.DOB = '1991-10-26' and pfq.passing_date = 2016 and pfq.quali_course = 'M.B.B.S.'
        List<dynamic> OBJ = new List<dynamic>();
        string dob = lk.convertdate1(txt_DOB);
        try
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else {
                db = "pisl_fresh_regi_qual_mst";
            }

            DataTable dt1 = dal.GetList("pisl_users as pu inner join "+db+" as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType.ToUpper() + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                OBJ.Add(MRPLookup.Convert_DatatableToList(dt1).ToList());
                return Json(OBJ, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        catch (Exception)
        {

            return null;
        }
        
    }

    public string otpForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail)
    {
        string message = string.Empty;
        string dob = lk.convertdate1(txt_DOB);
        string db = "";
        if (txtRegType.ToUpper() == "PROV")
        {
            db = "pisl_prov_regi_qual_mst";
        }
        else
        {
            db = "pisl_fresh_regi_qual_mst";
        }
        DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
        if (dt1.Rows.Count > 0)
        {
            MailFormat mf = new MailFormat();
            string code = MRPLookup.RandamStringGenerator1();
            Session["provotp"] = code;
            string mailBody = "Your OTP is: " + code + ". DMC";
            string sendmailStatus= MRPLookup.sendMail(txtEmail.Trim(), "DMC | OTP Verification", mailBody, "", "");


            //string mailBody = mf.SendCodeOnMail(dt1.Rows[0]["First_Name"].ToString(), code);
            //string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(),"Reset Password Code" + System.DateTime.Now + "", mailBody, "", "");
            if (sendmailStatus != "Technical issue! Please try agiain")
            {
                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

            }
            else
            {
                message = sendmailStatus;
            }


            return message;
        }
        return "Some thing went wrong...!";
    }

    public string submitForgetEmailPasswordProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail, string txtMobileNo,string CaptchaCaseID,string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (Session["provotp"].ToString()!=txtCode)
        {
            return "Otp incorrect";
        }

        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact Captcha as written below.";
            // return message;
        }
        else
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else
            {
                db = "pisl_fresh_regi_qual_mst";
            }
            string dob = lk.convertdate1(txt_DOB);
            DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile,pu.Regd_ID,pu.Regd_Type", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                if (Convert.ToString(dt1.Rows[0]["Regd_ID"]) != "" && Convert.ToString(dt1.Rows[0]["Regd_Type"]) != "")
                {
                      string colValue = "Email='" + txtEmail.Trim() + "',Mobile='" + txtMobileNo.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                      updPassword = dal.Updation("pisl_users", colValue, "Regd_ID='"+dt1.Rows[0]["Regd_ID"].ToString()+ "' and Regd_Type='"+ dt1.Rows[0]["Regd_Type"].ToString() + "'");
               
                   
                     var tblCurrentStatuscolomns = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                     var Currentupdatestatuss = dal.Updation("pisl_temp_registrations", tblCurrentStatuscolomns, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");

                    var tblCurrentStatuscolomns1 = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                    var Currentupdatestatuss1 = dal.Updation("pisl_fresh_registration_mst", tblCurrentStatuscolomns1, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");



                    message = "Your Email and Mobile Changed successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                    //MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                   // Send SMS and mail for password reset.
                }
                else
                {
                    message = "Please try after some time";
                }
            }
            else
            {
                message = "Data Not found..!";
            }
        }
        return message;
    }
    public string sendOTP(string EmailId)
    {
        string message = "";
        string cond = "email='" + EmailId + "'";
        DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
        if (dtLogin.Rows.Count > 0)
        {
            string mobile = dtLogin.Rows[0]["Mobile"].ToString();
            Session["otp"] = GetRandomText();
            string OTP = Session["otp"].ToString();
            //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
            string mailBody = "Your OTP is: " + OTP + ". DMC";
            MRPLookup.sendMail(EmailId.Trim(), "DMC | OTP Verification", mailBody, "", "");
            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
            MRPLookup.SendSMS("otp", mobile.Trim(), "", "", OTP, "", "", "", "", "", "", "");
            message = "Please check your email or Mobile for OTP";
        }
        else
        {
            message = "Email not found, Please enter a valid email";
        }
        return message;
    }

    public ActionResult ChangePassward(FormCollection frm)
    {
        string Result = "";
        if (frm["txtOTP"].ToString() == Session["OTP"].ToString())
        {
            if (frm["txt_password"].Length >= 8 && frm["txt_password"].Length <= 18)
            {
                Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                Boolean foundMatch = regexObj.IsMatch(frm["txt_password"]);
                if (foundMatch == true)
                {
                    string where = "email='" + frm["txt_email"] + "'";// and Mobile='"+ frm["txt_contactno"] + "'";
                    DataTable dt_dr_details = dal.GetList("pisl_users", "*", where);
                    if (dt_dr_details != null)
                    {
                        if (dt_dr_details.Rows.Count > 0)
                        {
                            string pass = Encrypt(frm["txt_password"].Trim());
                            string col = " password='" + pass + "'";
                            var update = dal.Updation("pisl_users", col, "email='" + dt_dr_details.Rows[0]["email"].ToString() + "'");
                            if (update == 0)
                            {
                                string hostName = Dns.GetHostName();
                                string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                string colName = "activity,email,password,ip,system,description,date";
                                string colValue = "'Change Passs','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + frm["txt_password"].ToString().Trim() + "','" + IP + "','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + pass + "',getdate()";
                                int ins = dal.insertion("tbl_activity", colName, colValue);
                                string message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                MRPLookup.SendSMS("forgot_pwd", dt_dr_details.Rows[0]["Mobile"].ToString(), dt_dr_details.Rows[0]["First_Name"].ToString(), dt_dr_details.Rows[0]["Last_Name"].ToString(), "", "", dt_dr_details.Rows[0]["email"].ToString(), frm["txt_password"].ToString().Trim(), "", "", "", "");
                                Result = "0";
                            }
                            else
                            {
                                Result = "Somthing wrong Error !";
                            }
                        }
                        else
                        {
                            Result = "This is not registered email please check.";
                        }
                    }
                }
                else
                {
                    Result = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                }
            }
            else
            {
                Result = "Password Length must between 8 to 18 letters";
            }
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
    public ActionResult verifyOTP(string otp)
    {
        string Result = "";
        if (otp == Session["otp"].ToString())
        {
            Result = "DONE";
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
}
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using DelhimedicalcouncilORG;
using System.Data;
using System.Security.Cryptography;
using System.Text;
using System.IO;
using System.Drawing;
using System.Net;
using System.Net.Mail;

using System.Text.RegularExpressions;
using System.Data.SqlClient;
using System.Configuration;

namespace DelhimedicalcouncilORG.Controllers
{
public class homeController : Controller
{
    // GET: home
    DAL dal = new DAL();
    MRPLookup lk = new MRPLookup();
    MailFormat mf = new MailFormat();


    private string RetrieveContent(string webPage)
    {
        HttpWebResponse response = null;//used to get response
        StreamReader respStream = null;//used to read response into string
        try
        {
            //create a request object using the url passed in
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(webPage);
            request.Timeout = 10000;

            //go get a response from the page
            response = (HttpWebResponse)request.GetResponse();

            //create a streamreader object from the response
            respStream = new StreamReader(response.GetResponseStream());

            //get the contents of the page as a string and return it
            return respStream.ReadToEnd();
        }
        catch (Exception ex)//houston we have a problem!
        {
            throw ex;
        }
        finally
        {
            //close it down, we’re going home!
            response.Close();
            respStream.Close();
        }
    }

    //using a regular expression, find all of the href or urls
    //in the content of the page
    private void GetAllUrls(string content)
    {
        //regular expression
        string pattern = @"(?:href\s*=)(?:[\s""']*)(?.*?)(?:[\s>""'])";

        //Set up regex object
        Regex RegExpr = new Regex(pattern, RegexOptions.IgnoreCase);

        //get the first match
        Match match = RegExpr.Match(content);

        //loop through matches
        while (match.Success)
        {

            //output the match info
            Console.WriteLine("href match: " + match.Groups[0].Value);
            //WriteToLog(@"C:\matchlog.txt", "href match: " + match.Groups[0].Value + "\r\n");

            Console.WriteLine("Url match: " + match.Groups[1].Value);
            //WriteToLog(@"C:\matchlog.txt", "Url | Location | mailto match: " + match.Groups[1].Value + "\r\n");

            //get next match
            match = match.NextMatch();
        }
    }

    //Write to a log file
    //private void WriteToLog(string file, string message)
    //{
    //using (StreamWriter w = File.AppendText(file))
    //{
    //w.WriteLine(DateTime.Now.ToString() + ": " + message); w.Close();
    //}
    //}




    /// <summary>
    /// ////////////////////////
    /// </summary>
    /// <returns></returns>
    /// 

    public ActionResult Index()
    {




        return View();
    }
    //Start Login//
    public ActionResult login()
    {
        // Session["CAPTCHA"] = "111111";// GetRandomText();
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }

    
    public string Login_Form(string EmailId, string password, string ip, string captcha)
    
    {



        var dateTime = DateTime.Now;
        var tt = dateTime.Hour;


        var dayOfWeek = dateTime.DayOfWeek;
        var day = dayOfWeek.ToString();

        //Decrypt("","");
        //70789
        //554e981f4946f37a4818f1cea3928fe3
        //drtushargupta90@gmail.com
        string message = string.Empty;
        string clientCaptcha = captcha;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            ViewBag.CaptchaError = "Sorry, please write exact text as written above.";
            message = "11,11";
            return message;
        }
        else
            if (Session["checkSession"] == null)
        {
            ip = Request.ServerVariables["REMOTE_ADDR"].ToString();

            string pass = Encrypt(password);
            // string decoded = MRPLookup.Decrypt1(HttpUtility.UrlDecode(pass));
            string cond = "email='" + EmailId + "' and password='" + pass + "' and active!=3 ";//and active=1
            DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
            if (dtLogin.Rows.Count > 0)
            {
                if (Convert.ToString(dtLogin.Rows[0]["Regd_Type"]) == "PROV" && dtLogin.Rows.Count == 1)
                {
                    DataTable dt_temp_D = dal.GetList("pisl_temp_registrations", "Regd_ID,Regd_Type,Final_Status,Approved_By,date_approved,type", "email='" + EmailId.Trim() + "' order by ID desc");
                    for (int i = 0; i < dt_temp_D.Rows.Count; i++)
                    {
                        if (Convert.ToString(dt_temp_D.Rows[i]["Regd_Type"]) != "PROV" && Convert.ToString(dt_temp_D.Rows[i]["Final_Status"]) == "Approved" && Convert.ToString(dt_temp_D.Rows[i]["Approved_By"]) != null && Convert.ToString(dt_temp_D.Rows[i]["date_approved"]) != null && Convert.ToString(dt_temp_D.Rows[i]["type"]) != "service")
                        {



                            string colnameWithValue = "Regd_ID=" + Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]) + ",Regd_Type='" + dt_temp_D.Rows[i]["Regd_Type"].ToString() + "'";
                            string conditions = "S_No=" + Convert.ToInt32(dtLogin.Rows[0]["S_No"]) + "";
                            var Update_paymentUpdate = dal.Updation("pisl_users", colnameWithValue, conditions);
                            if (Update_paymentUpdate == 0)
                            {
                                dtLogin.Rows[0]["Regd_ID"] = Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]);
                                dtLogin.Rows[0]["Regd_Type"] = dt_temp_D.Rows[i]["Regd_Type"].ToString();

                            }
                            break;
                        }
                    }
                }


                for (int i = 0; i < dtLogin.Rows.Count; i++)
                {
                    string hash = Convert.ToString(dtLogin.Rows[i]["hash"]);
                    string decryptedstring = Decrypt(pass, hash);

                    string gid = Convert.ToString(dtLogin.Rows[i]["GID"]);
                    //string active = Convert.ToString(dtLogin.Rows[0]["active"]);
                    if (gid == "0")//Login for doctor
                    {
                        //DataTable dt_lastloginRecord = dal.GetList("pisl_users where email='" + EmailId + "' order by S_No desc", "TOP 1 *", "");
                        if (dtLogin != null && dtLogin.Rows.Count > 0)
                        {

                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[i]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[i]["Regd_Type"]);
                            }
                            else
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                            }
                            if (dtLogin.Rows[i]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[i]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }

                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                        }
                        else
                        {
                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[0]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            }
                            if (dtLogin.Rows[0]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }
                        }


                        message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 2;
                    }
                    else if (gid == "1")//Login for internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["isno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 1;
                            }
                            else
                            {
                                message = "0,6";
                            }
                        }

                        else
                        {
                            message = "0,5";
                        }
                    }
                    else if (gid == "2")//Login for admin and internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["asno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 3;
                            }
                            else
                            {
                                message = "0,6";
                            }

                        }
                        else
                        {
                            message = "0,5";
                        }
                    }
                }
            }
            else
            {
                message = "0,0";
            }
        }
        else
        {
            message = "10,10";
        }
        return message;
    }

    public string Encrypt(string password)
    {
        // Decrypt("", "");
        //string password = @"1234abcd";

        // byte array representation of that string
        byte[] encodedPassword = new UTF8Encoding().GetBytes(password);

        // need MD5 to calculate the hash
        byte[] hash = ((HashAlgorithm)CryptoConfig.CreateFromName("MD5")).ComputeHash(encodedPassword);

        // string representation (similar to UNIX format)
        string encoded = BitConverter.ToString(hash)
           // without dashes
           .Replace("-", string.Empty)
           // make lowercase
           .ToLower();
        return encoded;
    }
    public string Decrypt(string password, string hash1)
    {//https://md5decrypt.net/#answer
        string ss = "";
        string source = "zdNot3oAz5I%3DjRspJg78a%2FY%3D";// "Hello World!";
        MD5 md5 = System.Security.Cryptography.MD5.Create();
        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(password);
        byte[] hash = md5.ComputeHash(inputBytes);

        // step 2, convert byte array to hex string
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < hash.Length; i++)
        {
            sb.Append(hash[i].ToString("X2"));
        }
        return sb.ToString();
    }
    static string GetMd5Hash(MD5 md5Hash, string input)
    {

        // Convert the input string to a byte array and compute the hash.
        byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));

        // Create a new Stringbuilder to collect the bytes
        // and create a string.
        StringBuilder sBuilder = new StringBuilder();

        // Loop through each byte of the hashed data 
        // and format each one as a hexadecimal string.
        for (int i = 0; i < data.Length; i++)
        {
            sBuilder.Append(data[i].ToString("x2"));
        }

        // Return the hexadecimal string.
        return sBuilder.ToString();
    }
    public FileResult GetCaptchaImage()
    {
        MemoryStream ms = new MemoryStream();
        if (Session["CAPTCHA"] != null)
        {
            string text = Session["CAPTCHA"].ToString();

            //first, create a dummy bitmap just to get a graphics object
            Image img = new Bitmap(1, 1);
            Graphics drawing = Graphics.FromImage(img);

            Font font = new Font("Jokerman", 15);
            //measure the string to see how big the image needs to be
            SizeF textSize = drawing.MeasureString(text, font);

            //free up the dummy image and old graphics object
            img.Dispose();
            drawing.Dispose();

            //create a new image of the right size
            img = new Bitmap((int)textSize.Width + 40, (int)textSize.Height + 20);
            drawing = Graphics.FromImage(img);

            Color backColor = Color.SeaShell;
            Color textColor = Color.Red;
            //paint the background
            drawing.Clear(backColor);

            //create a brush for the text
            Brush textBrush = new SolidBrush(textColor);

            drawing.DrawString(text, font, textBrush, 20, 10);

            drawing.Save();

            font.Dispose();
            textBrush.Dispose();
            drawing.Dispose();


            img.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
            img.Dispose();

            return File(ms.ToArray(), "image/png");
        }
        else
        {
            return File(ms.ToArray(), "image/png");
        }
    }
    private string GetRandomText()
    {
        StringBuilder randomText = new StringBuilder();
        string alphabets = "12345679ABCEFGHKLMNPRSTUVWXZ";
        Random r = new Random();
        for (int j = 0; j <= 5; j++)
        {
            randomText.Append(alphabets[r.Next(alphabets.Length)]);
        }
        return randomText.ToString();
    }
    //End Login//
    public ActionResult signup()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    [HttpPost]
    public string sendotpsignup(string txt_Email, string txt_ContactNo)
    {
        string msg = "";
        try
        {
            var CheckEmail = IsEmailandMobileExists(txt_Email, "");
            var checkMobile = IsEmailandMobileExists("", txt_ContactNo);
            if (CheckEmail == false && checkMobile == false)
            {

                Session["otp"] = GetRandomText();
                string OTP = Session["otp"].ToString();
                //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
                string mailBody = "Your OTP is: " + OTP + ". DMC";
                MRPLookup.sendMail(txt_Email.Trim(), "DMC | OTP Verification", mailBody, "", "");

                //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
              

                MRPLookup.SendSMS("otp", txt_ContactNo.Trim(), "", "", OTP, "", "", "", "", "", "", "");
                msg = "0";
            }
            else if (CheckEmail == true && checkMobile == true)
            {
                msg = "Email and Mobile no. are already exists!!";
            }
            else
            {
                if (checkMobile == true && CheckEmail == false)
                {
                    msg = "Mobile No. is Already Exists!!";
                }
                else if (CheckEmail == true && checkMobile == false)
                {
                    msg = "Email Address is Already Exists!!";
                }


            }
        }
        catch (Exception ex)
        {
            msg = "1";
        }
        return msg;
    }
    public bool IsEmailandMobileExists(string email, string mobile)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        try
        {
            tableName = "pisl_users";
            colname = "*";
            if (!string.IsNullOrEmpty(email))
            {
                cond = "email='" + email + "'";
            }
            if (!string.IsNullOrEmpty(mobile))
            {
                cond = "mobile='" + mobile + "'";
            }
            //cond=
            DataTable dt_datacheck = dal.GetList(tableName, colname, cond);
            if (dt_datacheck != null && dt_datacheck.Rows.Count > 0)
            {
                IsExists = true;
            }

        }
        catch (Exception ex)
        {
            IsExists = false;
            throw;
        }
        return IsExists;
    }

    public ActionResult IsDocDataExists(string regd_type, string regd_no, string DOB, string PassingYear)
    {
        //List<dynamic> list = new List<dynamic>();
        string message = "";
        try
        {
            var tbl_name = "";

            var userExists = IsRegd_Exists(regd_type, regd_no, DOB, PassingYear, out tbl_name);
            if (userExists == true && tbl_name == "pisl_users")
            {

                message = "Already Registered With us. Please Login With Your Credential";
            }
            else
                if (userExists == true && tbl_name == "pisl_fresh_registration_mst")
            {
                message = "Your Registration No. is Expired. Please SignUp Again.";
            }
            else
            {
                message = "NotExists";
                //message = "Your Registration No. is Not Exists!";
            }
        }
        catch (Exception ex)
        {

        }
        return Json(message, JsonRequestBehavior.AllowGet);
    }
    public bool IsRegd_Exists(string regd_type, string regd_no, string DOB, string PassingYear, out string Tbl_Name)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        Tbl_Name = "";
        DataTable dt_UserCheck = null;
        try
        {
            tableName = "pisl_users";
            colname = "*";
            cond = "Regd_Type='" + regd_type + "' and Regd_ID='" + regd_no.Trim() + "'";
            dt_UserCheck = dal.GetList(tableName, colname, cond);
            if (dt_UserCheck == null || dt_UserCheck.Rows.Count == 0)
            {
                tableName = "pisl_fresh_regi_qual_mst";
                colname = "*";
                cond = "quali_type='Basic Qualification' AND Regd_ID='" + regd_no + "' "
                    + "AND Regd_Type='" + regd_type + "' AND passing_date =  '" + PassingYear.Trim() + "'";
                dt_UserCheck = dal.GetList(tableName, colname, cond);
                if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                {
                    Tbl_Name = "pisl_fresh_regi_qual_mst";

                    tableName = "pisl_fresh_registration_mst";
                    colname = "*";
                    cond = "Regd_ID='" + regd_no + "' AND Regd_Type='" + regd_type + "'";
                    dt_UserCheck = dal.GetList(tableName, colname, cond);
                    if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                    {
                        Tbl_Name = "pisl_fresh_registration_mst";
                        IsExists = true;
                    }
                    else
                    {
                        IsExists = false;
                    }
                }
                else
                {

                    IsExists = false;
                }
            }
            else
            {
                Tbl_Name = "pisl_users";
                IsExists = true;
            }
        }
        catch (Exception ex)
        {


            throw;
        }
        return IsExists;
    }

    [HttpPost]
    public string createsignup(string txt_Email, string txt_ContactNo, string txt_FirstName, string txt_MiddleName,
        string txt_LastName, string txt_Password, string txt_ConfirmPassword, string txt_DOB, bool chk_TermCondition,
        string Captcha, string Regd_ID, string txtOTP, string ddl_regType, string txt_oldData, string passingYear)
    {
        string message = "";
        string dob = lk.convertdate1(txt_DOB);
        string Tbl_Name = "";
        try
        {
            if (!IsEmailandMobileExists(txt_Email, ""))
            {
                if (!IsEmailandMobileExists("", txt_ContactNo))
                {
                    if (ddl_regType == "FRS" || ddl_regType == "RRE")
                    {
                        if (IsRegd_Exists(ddl_regType, Regd_ID, dob, passingYear, out Tbl_Name))
                        {
                            Tbl_Name = Tbl_Name;
                            if (Tbl_Name == "pisl_users")
                            {
                                //if Pisl_user Table Record Exists but no Email and Mobile No exists
                                //in this case update the Email and Mobile No.
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        DataTable dt_Email_Mobile_Check = dal.GetList("pisl_users",
                                                        "top 1*", " Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                        if (dt_Email_Mobile_Check != null)
                                                        {
                                                            if (dt_Email_Mobile_Check.Rows.Count > 0)
                                                            {
                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_Email_Mobile_Check.Rows[0]["email"])))
                                                                {
                                                                    string pass = Encrypt(txt_Password.Trim());
                                                                    string hash = Encrypt(MRPLookup.RandamStringGenerator1());
                                                                    var updateDt = dal.Updation("pisl_users",
                                                                        "email='" + txt_Email.Trim() + "',mobile='" + txt_ContactNo.Trim() + "',password='" + pass + "',hash='" + hash + "'",
                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                    if (updateDt == 0)
                                                                    {
                                                                        DataTable dt_fresh_Check = dal.GetList("pisl_fresh_registration_mst",
                                                                            "top 1 * ",
                                                                            "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                        if (dt_fresh_Check != null)
                                                                        {
                                                                            if (dt_fresh_Check.Rows.Count > 0)
                                                                            {
                                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_fresh_Check.Rows[0]["Email"])))
                                                                                {
                                                                                    var updateDt_fresh = dal.Updation("pisl_fresh_registration_mst",
                                                                                        "Email='" + txt_Email.Trim() + "',Mobile='" + txt_ContactNo.Trim() + "'",
                                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");

                                                                                    if (updateDt_fresh != 0)
                                                                                    {
                                                                                        message = "Error!!";
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                                        MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                                        message = "Please, Check Your Mail For Login Details";
                                                                        //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                                        MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                                    }
                                                                    else
                                                                    {
                                                                        message = "Error!!";
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    message = "Your record are already Exists with us!!";
                                                                }
                                                            }
                                                        } //End Updation
                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }
                            else if (Tbl_Name == "pisl_fresh_regi_qual_mst" || Tbl_Name == "pisl_fresh_registration_mst")
                            {
                                //Insert Login Record in Pisl_Users
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        string pass = Encrypt(txt_Password.Trim());
                                                        string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                        if (string.IsNullOrEmpty(Regd_ID))
                                                        {
                                                            Regd_ID = "0";
                                                        }
                                                        //if (txt_oldData != "")
                                                        //{
                                                        //    string colnamemst = "*";
                                                        //    string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        //    DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        //    if (dtrmst.Rows.Count > 0)
                                                        //    {
                                                        //        string oldtype = "";
                                                        //        if (ddl_regType == "FRS")
                                                        //        {
                                                        //            oldtype = "service";
                                                        //        }
                                                        //        else if (ddl_regType == "RRE")
                                                        //        {
                                                        //            oldtype = "reregi";
                                                        //        }
                                                        //        var corrAddress1 = dtrmst.Rows[0]["Corr_Add_Line_1"].ToString();
                                                        //        var corrAddress2 = dtrmst.Rows[0]["Corr_Add_Line_2"].ToString();
                                                        //        var perAddress1 = dtrmst.Rows[0]["Per_Add_Line_1"].ToString();
                                                        //        var perAddress2 = dtrmst.Rows[0]["Per_Add_Line_2"].ToString();

                                                        //        string colNameold = "Regd_ID,Regd_Type,type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,date_entered,Father_Name,POB,Gender,Nationality,Corr_Add_Line_1,Corr_Add_Line_2,Corr_Add_State,Corr_Add_Pincode,Corr_Add_Country,Per_Add_Line_1,Per_Add_Line_2,Per_Add_Line_State,Per_Add_Line_Pincode,Per_Add_Line_Country";

                                                        //        string colValueold = "'" + Regd_ID + "','" + ddl_regType + "','" + oldtype + "','" + txt_FirstName + "','" + txt_MiddleName + "','"  + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "', '"+ lk.GetDateTime()+ "' ,'"+ dtrmst.Rows[0]["Father_Name"] + "','" + dtrmst.Rows[0]["POB"] + "','" + dtrmst.Rows[0]["Gender"] + "','" + dtrmst.Rows[0]["Nationality"] + "','" + corrAddress1 + "','" + corrAddress2 + "','" + dtrmst.Rows[0]["Corr_Add_State"] + "','" + dtrmst.Rows[0]["Corr_Add_Pincode"] + "','" + dtrmst.Rows[0]["Corr_Add_Country"] + "','" + perAddress1 + "','" + perAddress2 + "','" + dtrmst.Rows[0]["Per_Add_Line_State"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Pincode"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Country"] + "'";
                                                        //        int insold = dal.insertion("pisl_temp_registrations", colNameold, colValueold);
                                                        //    }
                                                        //}
                                                        Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                        string colnamemst = "*";
                                                        string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        DateTime txtdob1 = Convert.ToDateTime(dtrmst.Rows[0]["DOB"]);
                                                        string txtdob = txtdob1.ToShortDateString();

                                                        string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                            + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                        string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + dtrmst.Rows[0]["First_Name"].ToString() + "','" + dtrmst.Rows[0]["Middle_Name"].ToString() + "',"
                                                            + "'" + dtrmst.Rows[0]["Last_Name"].ToString() + "','" + txtdob + "','" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                            + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                        int ins = dal.insertion("pisl_users", colName, colValue);
                                                        if (ins == 0)
                                                        {
                                                            string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                            MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                            message = "Please, Check Your Mail For Login Details";
                                                            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                            MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                        }
                                                        else
                                                        {
                                                            message = "Try after some time";
                                                        }

                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }

                        }
                        else
                        {
                            message = "Your Registration No and Passing Year is Not Exist with Us";
                        }
                    }
                    else
                    {
                        //Insert Login Record in Pisl_Users
                        if (chk_TermCondition == true)
                        {
                            if (txtOTP == Session["otp"].ToString())
                            {
                                if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                {
                                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                    Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                    if (foundMatch == true)
                                    {
                                        if (txt_Password == txt_ConfirmPassword)
                                        {
                                            if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                            {
                                                //if (Tbl_Name== "pisl_users") { }
                                                string pass = Encrypt(txt_Password.Trim());
                                                string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                if (string.IsNullOrEmpty(Regd_ID))
                                                {
                                                    Regd_ID = "0";
                                                }
                                                Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                if (ddl_regType == "-1")
                                                {
                                                    ddl_regType = "";
                                                }


                                                string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                    + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                int ins = dal.insertion("pisl_users", colName, colValue);
                                                if (ins == 0)
                                                {
                                                    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                    message = "Please, Check Your Mail";
                                                    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                }
                                                else
                                                {
                                                    message = "Try after some time";
                                                }

                                                //string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                //    + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                //string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                //    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                //    + "1,0,0,'"+ lk.GetDateTime()+ "','','" + Regd_ID1 + "'";
                                                //int ins = dal.insertion("pisl_users", colName, colValue);
                                                //if (ins == 0)
                                                //{
                                                //    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                //    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                //    message = "Please, Check Your Mail";
                                                //    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                //    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                //}
                                                //else
                                                //{
                                                //    message = "Try after some time";
                                                //}
                                            }
                                            else
                                            {
                                                message = "Enter A Valid Email";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password and Confrim Password is Not Same";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                    }
                                }
                                else
                                {
                                    message = "Password Length must between 8 to 18 letters";
                                }
                            }
                            else
                            {
                                message = "Enter the Valid OTP";
                            }
                        }
                        else
                        {
                            message = "Please check the Terms and Conditions";
                        }

                        //}
                    }
                }
                else
                {
                    message = "Mobile No. is Already Exists";
                }
            }
            else
            {
                message = "Email Already exists!!";
            }
            //
            //Cut the Code From There

        }
        catch
        {

        }
        return message;
    }

    public ActionResult SignupVerification()
    {
        string message = "";
        try
        {
            if (Request.QueryString["email"] != null && Request.QueryString["hash"] != null)
            {
                string email = Request.QueryString["email"];
                string hash = Request.QueryString["hash"];
                string cond = "Email='" + email.Trim() + "' and Hash='" + hash.Trim() + "' and Active=0";
                DataTable dt = dal.GetList("pisl_users", "*", cond);
                if (dt.Rows.Count > 0)
                {
                    int upd = dal.Updation("pisl_users", "Active=1", cond);
                    if (upd == 0)
                    {
                        message = "Your account has been activated, you can now login";
                    }
                    else
                    {
                        message = "Try after some time";
                    }
                }
                else
                {
                    message = "The url is either invalid or you already have activated your account.";
                }
            }
            else
            {
                message = "Invalid approach, please use the link that has been send to your email.";
            }
        }
        catch
        { }
        ViewBag.lbl_status = message;
        return View();
    }
    public ActionResult contact()
    {
        return View();
    }

    public ActionResult about()
    {
        return View();
    }
    public ActionResult faqs()
    {
        return View();
    }
    // Start forgot password
    public ActionResult forgotpassword()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public string sendCode(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        string message = string.Empty;
        try
        {
            string clientCaptcha = CaptchaCaseID;
            string serverCaptcha = Session["CAPTCHA"].ToString();
            if (!clientCaptcha.Equals(serverCaptcha))
            {
                ViewBag.ShowCAPTCHA = serverCaptcha;
                message = "Sorry, please write exact text as written below.";
            }
            else
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' ";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string name = Convert.ToString(dt.Rows[0]["First_Name"]);
                                        string Mobile = Convert.ToString(dt.Rows[0]["Mobile"]);

                                        MailFormat mf = new MailFormat();
                                        string code = MRPLookup.RandamStringGenerator1();
                                        string mailBody = mf.SendCodeOnMail(name, code);
                                        MRPLookup.SendSMS("otp", Mobile, "", "", code, "", "", "", "", "", "", "");
                                        string colValue = "Code='" + code.Trim() + "'";
                                        int updCode = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "'");
                                        if (updCode == 0)
                                        {
                                            string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(), "Reset Password Code " + System.DateTime.Now + "", mailBody, "", "");
                                            if (sendmailStatus != "Technical issue! Please try agiain")
                                            {
                                                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

                                            }
                                            else
                                            {
                                                message = sendmailStatus;
                                            }
                                        }
                                        else
                                        {
                                            message = "Please try after some time.";
                                        }

                                    }
                                    else
                                    {
                                        message = "Enter a New Password.";
                                    }
                                }
                                else
                                {
                                    message = "Your Email And Mobile Number Do not Match with DMC Registered Users.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
        }
        catch (Exception ex)
        {

        }
        return message;
    }
    public string forgotpasswordCaseID(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact text as written below.";
            // return message;
        }
        else
        {
            if (txtCode != "0")
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string mobile = Convert.ToString(dt.Rows[0]["Mobile"]);
                                    string firstName = Convert.ToString(dt.Rows[0]["First_Name"]);
                                    string lastName = Convert.ToString(dt.Rows[0]["Last_Name"]);
                                    //string new_password = Encrypt(MRPLookup.RandamStringGenerator1());
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string colValue = "password='" + new_PasswordMD5.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                                        updPassword = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                        if (updPassword == 0)
                                        {
                                            updPassword = dal.Updation("pisl_users", "Code='0'", "Email='" + txtEmail.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                            string hostName = Dns.GetHostName();
                                            string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                            string colName = "activity,email,password,ip,system,description,date";
                                            colValue = "'Change Passs','" + txtEmail + "','" + txtPassword + "','" + IP + "','" + mobile + "','" + new_PasswordMD5 + "',getdate()";
                                            int ins = dal.insertion("tbl_activity", colName, colValue);
                                            message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                            MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                                            // Send SMS and mail for password reset.
                                            

                                        }
                                        else
                                        {
                                            message = "Please try after some time";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please try another password.";
                                    }

                                }
                                else
                                {
                                    message = "Your Details Dont Match or You have NOT registered with DMC.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
            else
            {
                message = "Code not match";
            }
        }
        return message;
    }

    public ActionResult introduction()
    {
        return View();
    }

    public ActionResult powers()
    {
        return View();
    }

    public ActionResult thecouncil()
    {
        return View();
    }

    //public ActionResult gallery()
    //{
    //    return View();
    //}
    public ActionResult Gallery()
    {
        return View();
    }

    public ActionResult accomplishments()
    {
        return View();
    }

    public ActionResult registration()
    {
        return View();
    }
    public ActionResult cmeperforma()
    {
        return View();
    }
    public ActionResult cmeonline()
    {
        return View();
    }
    public ActionResult cmerequirements()
    {
        return View();
    }
    public ActionResult cmepassbook()
    {
        return View();
    }
    public ActionResult duties()
    {
        return View();
    }
    public ActionResult inst_general()
    {
        return View();
    }

    public ActionResult inst_fees()
    {
        return View();
    }
    public ActionResult inst_docupload()
    {
        return View();
    }
    public ActionResult disclaimer()
    {
        return View();
    }
    public ActionResult feestructure()
    {
        return View();
    }
    public ActionResult privacypolicy()
    {
        return View();
    }
    public ActionResult termofuse()
    {
        return View();
    }

    public ActionResult litigations()
    {
        return View();
    }


    public ActionResult council_meeting()
    {
        return View();
    }
    public ActionResult Cme_workshop_Conference()
    {
        return View();
    }

    public ActionResult Media_room()
    {
        return View();
    }
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    public ActionResult LogOut()
    {
        Session.Abandon();
        return RedirectToAction("Index", "Home");
    }
    public ActionResult SearchElectrolData(string regid)
    {
        string msg = "";
        DataTable dtSearch = dal.GetList("tbl_electrolData", "*", "RegNo='" + regid.Trim() + "'");
        if (dtSearch.Rows.Count > 0)
        {
            return Json(MRPLookup.DataTableToJSONWithJSONNet(dtSearch), JsonRequestBehavior.AllowGet);
        }
        else
        {
            msg = "Data not found";
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
    }
    public ActionResult SearchElectrolDataUpdate(string regid)
    {
        int upd = 1;
        upd = dal.Updation("tbl_electrolData", "Status='Completed',Date='" + lk.GetDateTime() + "'", "ID='" + regid.Trim() + "'");
        if (upd == 0)
        {

            return Json(upd, JsonRequestBehavior.AllowGet);
        }
        else
        {
            return Json(upd, JsonRequestBehavior.AllowGet);
        }
    }

    public ActionResult TotalCount()
    {
        DataTable dtcntCompleted = dal.GetList("tbl_electrolData", "count(*) as cntCompleted", "status='Completed'");
        DataTable dtcntNotCompleted = dal.GetList("tbl_electrolData", "count(*) as cntNotCompleted", "status ='Valid'");
        string totalCmpleteStatus = "Completed: " + Convert.ToString(dtcntCompleted.Rows[0]["cntCompleted"]) + "  Not Completed: " + Convert.ToString(dtcntNotCompleted.Rows[0]["cntNotCompleted"]);
        return Json(totalCmpleteStatus, JsonRequestBehavior.AllowGet);
    }
    public ActionResult Renewal_Reminder(string key)
    {
        string msg = "";
        try
        {

            key = "1111";
            string validKey = "1111";
            // MRPLookup.SendSMS("Renewal_expired_tdy", "9899849487", "Dinesh", "", "", "", "", "", "", "", "", "");
            if (key == validKey)
            {
                string expiry_frtyfive = Convert.ToDateTime(DateTime.Now.AddDays(30)).ToString("yyyy-MM-dd");//date(('Y-m-d'), strtotime('+30 days'));
                string expiry_tdy = Convert.ToDateTime(DateTime.Now).ToString("yyyy-MM-dd");//date('Y-m-d');
                string expiry_pastfifty = Convert.ToDateTime(DateTime.Now.AddDays(-50)).ToString("yyyy-MM-dd");// date(('Y-m-d'), strtotime('-50 days'));
                string cond = "(Expiry_Date = '" + expiry_frtyfive + "' OR  Expiry_Date = '" + expiry_tdy + "' OR Expiry_Date = '" + expiry_pastfifty + " ') AND (Mobile !='' OR  Email !='')";
                //DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", cond);
                string strConnString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                SqlConnection con = new SqlConnection(strConnString);
                //SqlConnection con = new SqlConnection(@"Data Source=103.20.212.254,1232;Initial Catalog=dmcaws_New;User Id=sa;Password=bD$x89K3$@K9UaQsKQ");
                //SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-PKTADCN;Initial Catalog=dmcaws1;integrated security=true");
                con.Open();
                SqlCommand cmd = new SqlCommand("select * from pisl_fresh_registration_mst where " + cond + "", con);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                con.Close();
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string First_Name = Convert.ToString(dt.Rows[i]["First_Name"]);
                        string Last_Name = Convert.ToString(dt.Rows[i]["Last_Name"]);
                        string Regd_ID = Convert.ToString(dt.Rows[i]["Regd_ID"]);
                        string Regd_Type = Convert.ToString(dt.Rows[i]["Regd_Type"]);
                        string Mobile = Convert.ToString(dt.Rows[i]["Mobile"]);
                        string Expiry_Date = Convert.ToDateTime(dt.Rows[i]["Expiry_Date"]).ToString("yyyy-MM-dd");
                        string date_approved = Convert.ToDateTime(dt.Rows[i]["date_approved"]).ToString("yyyy-MM-dd");
                        string tdydate = Convert.ToDateTime(System.DateTime.Now).ToString("yyyy-MM-dd");
                        string to = Convert.ToString(dt.Rows[i]["Email"]);

                        string subject1 = "Renewal of Registration with Delhi Medical Council"; //// Give the email a subject
                        string subject2 = "Expiry of Registration with Delhi Medical Council";
                        string subject3 = "Deletion of Regd Number with Delhi Medical Council";
                        string message1 = "";
                        message1 += "Dear Dr " + First_Name + " " + Last_Name + ",";
                        message1 += "Greetings from Delhi Medical Council!!";

                        message1 += "   This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council is due for renewal.";
                        message1 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting ";
                        message1 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message1 += "For inclusion of any additional qualification, please produce the original degree at the office of Delhi Medical Council, so that your additional ";
                        message1 += "qualification certificate can be verified with the original document. The original degree / diploma Certificate will be returned immediately after verification. ";

                        message1 += "<b>This is a system generated email and we request you not to reply to this email. Please ignore if already applied.</b>";

                        message1 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message1 += "Warm Regards,";

                        message1 += "Delhi Medical Council.";
                        message1 += "Ground Floor, B Wing, B Block-1";
                        message1 += "DMCR IT Park, Shastri Park";
                        message1 += "New Delhi-110053";
                        message1 += "Tel: +91-011-46621000";
                        message1 += "Website - www.delhimedicalcouncil.org	 ";

                        string message2 = "";
                        message2 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message2 += "Greetings from Delhi Medical Council!!";

                        message2 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council expired on " + Expiry_Date + " and  is due for renewal. ";

                        message2 += "We request you to kindly renew your registration within thirty days and keep your registration in force. You can renew your registration online by visiting ";
                        message2 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message2 += "Please take note that in case you do not apply for renewal of registration within the stipulated period, your name shall be removed from the State Medical ";
                        message2 += "Register maintained by the Delhi Medical Council in accordance with the provisions of Section 22 of the Delhi Medical Council Act, 1997 which will debar";
                        message2 += "you from practicing Allopathic in the state of Delhi.";

                        message2 += "<b>Kindly ignore this email, in case you have already applied for renewal of registration</b>";

                        message2 += "This is a system generated email and we request you not to reply to this email.";

                        message2 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message2 += "Warm Regards,";

                        message2 += "Delhi Medical Council.";
                        message2 += "Ground Floor, B Wing, B Block-1";
                        message2 += "DMCR IT Park, Shastri Park";
                        message2 += "New Delhi-110053";
                        message2 += "Tel: +91-011-46621000";
                        message2 += "Website - www.delhimedicalcouncil.org";

                        string message3 = "";
                        message3 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message3 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council has expired on " + Expiry_Date + ". You ";
                        message3 += "failed to renew the registration with Delhi Medical Council, in spite of notices/Emails (public / individual) issued for renewal. Hence, in accordance with the ";
                        message3 += "provisions of section 22(3) of Delhi Medical Council Act, 1997; your name under Registration number " + Regd_ID + "-" + Regd_Type + "  has been removed from the State ";
                        message3 += "Medical Register of Delhi Medical Council.";

                        message3 += "Please note that if you wish to have your name re-entered in the State Medical Register of Delhi Medical Council, you may do so, by paying fees as detailed herein below,";
                        message3 += "in addition to fee for renewal of registration (Rs. 2000/-)";

                        message3 += "Late fees for non-renewal of registration:-";
                        message3 += "(a) upto six months from the date from 		Rs. 1000/- (Rupees One Thousand only)";
                        message3 += "    which registration is due for renewal";
                        message3 += "(b) for period more than six months 	    Rs. 2000/- (Rupees One Thousand only)";
                        message3 += "     but upto one year";
                        message3 += "(c) for period more than one year 			Rs. 1000/- (Rupees One Thousand per year and Part thereof)";

                        message3 += "Please also note that any person servicing or practicing modern scientific system of medicine (allopathy) in Delhi without holding valid registration with Delhi Medical Council is liable for action under the provisions of Delhi Medical Council Act, 1997.";
                        message3 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting www.delhimedicalcouncil.org and apply under Online Renewal & Services.";

                        message3 += "<b>Kindly ignore this letter, in case you have already applied for renewal of registration</b>";

                        message3 += "This is a system generated email and we request you not to reply to this email.";

                        message3 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message3 += "Warm Regards,";

                        message3 += "Delhi Medical Council.";
                        message3 += "Ground Floor, B Wing, B Block-1";
                        message3 += "DMCR IT Park, Shastri Park";
                        message3 += "New Delhi-110053";
                        message3 += "Tel: +91-011-46621000";
                        message3 += "Website - www.delhimedicalcouncil.org,";

                        string headers = "From: DMC Registration System <registration@delhimedicalcouncil.org>' . '\r\n'"; // Set from headers

                        string message = "";
                        string subject = "";
                        string trigger = "";
                        string msgtxt = "";
                        if (Convert.ToDateTime(Expiry_Date) > Convert.ToDateTime(tdydate))
                        {
                            message = message1;
                            subject = subject1;
                            trigger = "Renewal_due_reminder";
                            msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Renewal of your DMC Regd No " + Regd_ID + " - " + Regd_Type + " is due. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }

                        }
                        else if (Convert.ToDateTime(Expiry_Date) == Convert.ToDateTime(tdydate))
                        {
                            message = message2;
                            subject = subject2;
                            trigger = "Renewal_expired_tdy";
                            // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Registration of DMC Regd No " + Regd_ID + " - " + Regd_Type + " expired today. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }
                        }
                        //else if (Convert.ToDateTime(Expiry_Date) < Convert.ToDateTime(tdydate))
                        //{
                        //    message = message2;
                        //    subject = subject2;
                        //    trigger = "Renewal_expired_fifty";
                        //   // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Your  ID " + Regd_ID + " - " + Regd_Type + " has been removed from the State Medical Register of DMC . Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                        //    if (!string.IsNullOrEmpty(to))
                        //    {
                        //       // MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //    if (!string.IsNullOrEmpty(Mobile))
                        //    {
                        //       // MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(to))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(Mobile))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}

                    }
                }

            }
            else
            {
                msg = "Key not match";
                string path = "C:\\TestService\\ServiceLog.txt";
                using (StreamWriter writer = new StreamWriter(path, true))
                {
                    writer.WriteLine(string.Format(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt"), DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt")));
                    writer.Close();
                }
            }
        }
        catch
        {

        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult certverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["cert"];
            string Regd_type = "";
            string regd_id = "";

            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["cert"]);
            var splitedString = decodedstr.Split('-');
            Regd_type = splitedString[0];
            regd_id = splitedString[1];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            switch (Regd_type)
            {
                case "RRE":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "FRS":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "PROV":
                    db = "pisl_prov_registration_mst";
                    qual_db = "pisl_prov_regi_qual_mst";
                    break;

                default:
                    Message = "This certificate cannnot be verified";
                    break;

            }

            var check_namechange = dal.GetList("tbl_NameChangeHistory_New", "CaseID,Name=(case when (New_MiddleName is null or  New_MiddleName='') then New_FirstName+' '+New_LastName when (New_MiddleName is null or  New_MiddleName='') and (New_LastName is null or New_LastName='') then New_FirstName else New_FirstName+' '+New_MiddleName+' '+New_LastName end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_namechange.Rows.Count > 0)
            {
                string CaseID = check_namechange.Rows[0]["CaseID"].ToString();
                ViewBag.Name = check_namechange.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                if (check_Doctordata.Rows.Count > 0)
                {
                    string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
                    ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                    DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                    DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                    DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                    ViewBag.qual = dt_qual;
                    ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                    ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                    Message = "success";
                }
                else
                {
                    Message = "This Entry Cannot be Verified";
                }
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;

        return View();
    }
    public ActionResult VeryfyCertificate(string value)
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        var qstring = value;
        var decodedStr = MRPLookup.Decrypt1(qstring);
        var splitedString = decodedStr.Split('-');
        var Regd_type = splitedString[0];
        var regd_id = splitedString[1];
        var db = "";
        var qual_db = "";
        //string regdtype=
        switch (Regd_type)
        {
            case "RRE":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "FRS":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "PROV":
                db = "pisl_prov_registration_mst";
                qual_db = "pisl_prov_regi_qual_mst";
                break;

            default:
                Message = "This certificate cannnot be verified";
                break;

        }
        var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
        if (check_Doctordata.Rows.Count > 0)
        {
            string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
            DataTable dt_Documents = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
            DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign' ");

        }
        else
        {
            Message = "This Entry Cannot be Verified";
        }
        return Json("", JsonRequestBehavior.AllowGet);
    }
    public ActionResult letterverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["letter"];
            string Regd_type = "";
            string regd_id = "";
            string ID = "";
            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["letter"]);
            var splitedString = decodedstr.Split('-');
            ID = splitedString[0];
            Regd_type = splitedString[1];
            regd_id = splitedString[2];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            //switch ()
            //{
            //    case "RRE":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "FRS":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "PROV":
            //        db = "pisl_prov_registration_mst";
            //        qual_db = "pisl_prov_regi_qual_mst";
            //        break;

            //    default:
            //        Message = "This certificate cannnot be verified";
            //        break;

            //}
            var letter_type = "";
            var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,date_approved,drg_from,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "ID='" + ID + "' and Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_Doctordata.Rows.Count > 0)
            {
                switch (check_Doctordata.Rows[0]["drg_from"].ToString())
                {
                    case "noc":
                        letter_type = "No Objection Certificate";
                        break;

                    case "gdst":
                        letter_type = "Good Standing Certificate";
                        break;
                }
                ViewBag.lettertype = letter_type;
                ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("pisl_fresh_regi_qual_mst", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='Sign'");
                if (!string.IsNullOrEmpty(check_Doctordata.Rows[0]["date_approved"].ToString()))
                {
                    ViewBag.DateApproved = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).ToString("dd MMMM,yyyy");
                    ViewBag.expiry = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).AddDays(-1).AddMonths(6).ToString("dd MMMM, yyyy");
                }
                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(ID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                Message = "This Entry Cannot be Verified";
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;
        return View();
    }
    public ActionResult Regi_search()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public ActionResult search_ur_dr()
    {

        return View();
    }
    public ActionResult regi_search_submit(string Regid, string Types)
    {
        try
        {


            string regid = Request.QueryString["Regd_ID"];
            string type = Request.QueryString["Type"]; ;
            //string type = frm["type"].Trim();
            //string regid = frm["regid"].Trim();
            string colname = "*";
            string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "' ORDER BY S_No DESC";
            DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
            if (dt.Rows.Count > 0)
            {
                DateTime ddob = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                DateTime dapproved = Convert.ToDateTime(dt.Rows[0]["date_approved"].ToString());
                DateTime dexpiry = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                ViewBag.dateapproved = dapproved.ToShortDateString();
                ViewBag.expirydate = dexpiry.ToShortDateString();
                ViewBag.dob = ddob.ToShortDateString();
                ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


                DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
                if (result_remarks.Rows.Count > 0)
                {
                    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    {
                        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    }
                }
                DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
                if (qualificationdt.Rows.Count > 0)
                {
                    ViewBag.qualdata = qualificationdt;
                }

            }
            return View();
        }
        catch (Exception ex)
        {
            return View();
        }
    }
    public ActionResult regi_search_submits(FormCollection frm)
    {

        string clientCaptcha = frm["CL_CAPCHA"].ToString();
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;

            return Json("-1");
        }
        string msg = "";
        //string type = Regd_ID;
        //string regid = Type;
        string type = frm["type"].Trim();
        string regid = frm["regid"].Trim();
        string colname = "*";
        string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
        if (dt.Rows.Count > 0)
        {
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
            if (result_remarks.Rows.Count > 0)
            {
                for (int i = 0; i < result_remarks.Rows.Count; i++)
                {
                    ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                }
            }
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult search_ur_dr_submit(FormCollection frm)
    {
        try
        {



            string First_Name = Request.QueryString["First_Name"];
            string Last_Name = frm["Last_Name"];
            string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
            string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
            string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
            string Mobile = Request.QueryString["Mobile"];
            string Email = Request.QueryString["Email"];

            if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Last_Name) && !string.IsNullOrEmpty(Corr_Add_Line_1) && !string.IsNullOrEmpty(Corr_Add_Line_2) && !string.IsNullOrEmpty(Corr_Add_Pincode) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Mobile='" + Mobile + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}

                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "Email='" + Email + "' and Mobile='" + Mobile + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }


            return View();
        }
        catch (Exception ex)
        {
            return View();

        }
    }


    public ActionResult search_ur_dr_submit2(FormCollection frm)
    {
        string msg = "";
        string First_Name = frm["First_Name"];
        string Last_Name = frm["Last_Name"];
        string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
        string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
        string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
        string Mobile = frm["Mobile"];
        string Email = frm["Email"];

        string condtions = "First_Name='" + First_Name.Trim() + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
        if (dt.Rows.Count > 0)
        {
            //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
            //if (result_remarks.Rows.Count > 0)
            //{
            //    for (int i = 0; i < result_remarks.Rows.Count; i++)
            //    {
            //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
            //    }
            //}
            string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", condtions2);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        else
        {
            msg = "Not Data Found";
        }


        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult cme()
    {
        return View();
    }
    public ActionResult status_comp2021()
    {
        return View();
    }

    public ActionResult ForgetEmailPasswordProv()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public dynamic getForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB)
    {
        //select pu.First_Name,pu.Last_Name,pu.email,pu.Mobile from pisl_users as pu inner join pisl_prov_regi_qual_mst as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type where pu.Regd_ID = 18430 and pu.DOB = '1991-10-26' and pfq.passing_date = 2016 and pfq.quali_course = 'M.B.B.S.'
        List<dynamic> OBJ = new List<dynamic>();
        string dob = lk.convertdate1(txt_DOB);
        try
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else {
                db = "pisl_fresh_regi_qual_mst";
            }

            DataTable dt1 = dal.GetList("pisl_users as pu inner join "+db+" as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType.ToUpper() + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                OBJ.Add(MRPLookup.Convert_DatatableToList(dt1).ToList());
                return Json(OBJ, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        catch (Exception)
        {

            return null;
        }
        
    }

    public string otpForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail)
    {
        string message = string.Empty;
        string dob = lk.convertdate1(txt_DOB);
        string db = "";
        if (txtRegType.ToUpper() == "PROV")
        {
            db = "pisl_prov_regi_qual_mst";
        }
        else
        {
            db = "pisl_fresh_regi_qual_mst";
        }
        DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
        if (dt1.Rows.Count > 0)
        {
            MailFormat mf = new MailFormat();
            string code = MRPLookup.RandamStringGenerator1();
            Session["provotp"] = code;
            string mailBody = "Your OTP is: " + code + ". DMC";
            string sendmailStatus= MRPLookup.sendMail(txtEmail.Trim(), "DMC | OTP Verification", mailBody, "", "");


            //string mailBody = mf.SendCodeOnMail(dt1.Rows[0]["First_Name"].ToString(), code);
            //string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(),"Reset Password Code" + System.DateTime.Now + "", mailBody, "", "");
            if (sendmailStatus != "Technical issue! Please try agiain")
            {
                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

            }
            else
            {
                message = sendmailStatus;
            }


            return message;
        }
        return "Some thing went wrong...!";
    }

    public string submitForgetEmailPasswordProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail, string txtMobileNo,string CaptchaCaseID,string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (Session["provotp"].ToString()!=txtCode)
        {
            return "Otp incorrect";
        }

        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact Captcha as written below.";
            // return message;
        }
        else
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else
            {
                db = "pisl_fresh_regi_qual_mst";
            }
            string dob = lk.convertdate1(txt_DOB);
            DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile,pu.Regd_ID,pu.Regd_Type", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                if (Convert.ToString(dt1.Rows[0]["Regd_ID"]) != "" && Convert.ToString(dt1.Rows[0]["Regd_Type"]) != "")
                {
                      string colValue = "Email='" + txtEmail.Trim() + "',Mobile='" + txtMobileNo.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                      updPassword = dal.Updation("pisl_users", colValue, "Regd_ID='"+dt1.Rows[0]["Regd_ID"].ToString()+ "' and Regd_Type='"+ dt1.Rows[0]["Regd_Type"].ToString() + "'");
               
                   
                     var tblCurrentStatuscolomns = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                     var Currentupdatestatuss = dal.Updation("pisl_temp_registrations", tblCurrentStatuscolomns, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");

                    var tblCurrentStatuscolomns1 = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                    var Currentupdatestatuss1 = dal.Updation("pisl_fresh_registration_mst", tblCurrentStatuscolomns1, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");



                    message = "Your Email and Mobile Changed successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                    //MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                   // Send SMS and mail for password reset.
                }
                else
                {
                    message = "Please try after some time";
                }
            }
            else
            {
                message = "Data Not found..!";
            }
        }
        return message;
    }
    public string sendOTP(string EmailId)
    {
        string message = "";
        string cond = "email='" + EmailId + "'";
        DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
        if (dtLogin.Rows.Count > 0)
        {
            string mobile = dtLogin.Rows[0]["Mobile"].ToString();
            Session["otp"] = GetRandomText();
            string OTP = Session["otp"].ToString();
            //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
            string mailBody = "Your OTP is: " + OTP + ". DMC";
            MRPLookup.sendMail(EmailId.Trim(), "DMC | OTP Verification", mailBody, "", "");
            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
            MRPLookup.SendSMS("otp", mobile.Trim(), "", "", OTP, "", "", "", "", "", "", "");
            message = "Please check your email or Mobile for OTP";
        }
        else
        {
            message = "Email not found, Please enter a valid email";
        }
        return message;
    }

    public ActionResult ChangePassward(FormCollection frm)
    {
        string Result = "";
        if (frm["txtOTP"].ToString() == Session["OTP"].ToString())
        {
            if (frm["txt_password"].Length >= 8 && frm["txt_password"].Length <= 18)
            {
                Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                Boolean foundMatch = regexObj.IsMatch(frm["txt_password"]);
                if (foundMatch == true)
                {
                    string where = "email='" + frm["txt_email"] + "'";// and Mobile='"+ frm["txt_contactno"] + "'";
                    DataTable dt_dr_details = dal.GetList("pisl_users", "*", where);
                    if (dt_dr_details != null)
                    {
                        if (dt_dr_details.Rows.Count > 0)
                        {
                            string pass = Encrypt(frm["txt_password"].Trim());
                            string col = " password='" + pass + "'";
                            var update = dal.Updation("pisl_users", col, "email='" + dt_dr_details.Rows[0]["email"].ToString() + "'");
                            if (update == 0)
                            {
                                string hostName = Dns.GetHostName();
                                string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                string colName = "activity,email,password,ip,system,description,date";
                                string colValue = "'Change Passs','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + frm["txt_password"].ToString().Trim() + "','" + IP + "','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + pass + "',getdate()";
                                int ins = dal.insertion("tbl_activity", colName, colValue);
                                string message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                MRPLookup.SendSMS("forgot_pwd", dt_dr_details.Rows[0]["Mobile"].ToString(), dt_dr_details.Rows[0]["First_Name"].ToString(), dt_dr_details.Rows[0]["Last_Name"].ToString(), "", "", dt_dr_details.Rows[0]["email"].ToString(), frm["txt_password"].ToString().Trim(), "", "", "", "");
                                Result = "0";
                            }
                            else
                            {
                                Result = "Somthing wrong Error !";
                            }
                        }
                        else
                        {
                            Result = "This is not registered email please check.";
                        }
                    }
                }
                else
                {
                    Result = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                }
            }
            else
            {
                Result = "Password Length must between 8 to 18 letters";
            }
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
    public ActionResult verifyOTP(string otp)
    {
        string Result = "";
        if (otp == Session["otp"].ToString())
        {
            Result = "DONE";
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
}
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using DelhimedicalcouncilORG;
using System.Data;
using System.Security.Cryptography;
using System.Text;
using System.IO;
using System.Drawing;
using System.Net;
using System.Net.Mail;

using System.Text.RegularExpressions;
using System.Data.SqlClient;
using System.Configuration;

namespace DelhimedicalcouncilORG.Controllers
{
public class homeController : Controller
{
    // GET: home
    DAL dal = new DAL();
    MRPLookup lk = new MRPLookup();
    MailFormat mf = new MailFormat();


    private string RetrieveContent(string webPage)
    {
        HttpWebResponse response = null;//used to get response
        StreamReader respStream = null;//used to read response into string
        try
        {
            //create a request object using the url passed in
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(webPage);
            request.Timeout = 10000;

            //go get a response from the page
            response = (HttpWebResponse)request.GetResponse();

            //create a streamreader object from the response
            respStream = new StreamReader(response.GetResponseStream());

            //get the contents of the page as a string and return it
            return respStream.ReadToEnd();
        }
        catch (Exception ex)//houston we have a problem!
        {
            throw ex;
        }
        finally
        {
            //close it down, we’re going home!
            response.Close();
            respStream.Close();
        }
    }

    //using a regular expression, find all of the href or urls
    //in the content of the page
    private void GetAllUrls(string content)
    {
        //regular expression
        string pattern = @"(?:href\s*=)(?:[\s""']*)(?.*?)(?:[\s>""'])";

        //Set up regex object
        Regex RegExpr = new Regex(pattern, RegexOptions.IgnoreCase);

        //get the first match
        Match match = RegExpr.Match(content);

        //loop through matches
        while (match.Success)
        {

            //output the match info
            Console.WriteLine("href match: " + match.Groups[0].Value);
            //WriteToLog(@"C:\matchlog.txt", "href match: " + match.Groups[0].Value + "\r\n");

            Console.WriteLine("Url match: " + match.Groups[1].Value);
            //WriteToLog(@"C:\matchlog.txt", "Url | Location | mailto match: " + match.Groups[1].Value + "\r\n");

            //get next match
            match = match.NextMatch();
        }
    }

    //Write to a log file
    //private void WriteToLog(string file, string message)
    //{
    //using (StreamWriter w = File.AppendText(file))
    //{
    //w.WriteLine(DateTime.Now.ToString() + ": " + message); w.Close();
    //}
    //}




    /// <summary>
    /// ////////////////////////
    /// </summary>
    /// <returns></returns>
    /// 

    public ActionResult Index()
    {




        return View();
    }
    //Start Login//
    public ActionResult login()
    {
        // Session["CAPTCHA"] = "111111";// GetRandomText();
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }

    
    public string Login_Form(string EmailId, string password, string ip, string captcha)
    
    {



        var dateTime = DateTime.Now;
        var tt = dateTime.Hour;


        var dayOfWeek = dateTime.DayOfWeek;
        var day = dayOfWeek.ToString();

        //Decrypt("","");
        //70789
        //554e981f4946f37a4818f1cea3928fe3
        //drtushargupta90@gmail.com
        string message = string.Empty;
        string clientCaptcha = captcha;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            ViewBag.CaptchaError = "Sorry, please write exact text as written above.";
            message = "11,11";
            return message;
        }
        else
            if (Session["checkSession"] == null)
        {
            ip = Request.ServerVariables["REMOTE_ADDR"].ToString();

            string pass = Encrypt(password);
            // string decoded = MRPLookup.Decrypt1(HttpUtility.UrlDecode(pass));
            string cond = "email='" + EmailId + "' and password='" + pass + "' and active!=3 ";//and active=1
            DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
            if (dtLogin.Rows.Count > 0)
            {
                if (Convert.ToString(dtLogin.Rows[0]["Regd_Type"]) == "PROV" && dtLogin.Rows.Count == 1)
                {
                    DataTable dt_temp_D = dal.GetList("pisl_temp_registrations", "Regd_ID,Regd_Type,Final_Status,Approved_By,date_approved,type", "email='" + EmailId.Trim() + "' order by ID desc");
                    for (int i = 0; i < dt_temp_D.Rows.Count; i++)
                    {
                        if (Convert.ToString(dt_temp_D.Rows[i]["Regd_Type"]) != "PROV" && Convert.ToString(dt_temp_D.Rows[i]["Final_Status"]) == "Approved" && Convert.ToString(dt_temp_D.Rows[i]["Approved_By"]) != null && Convert.ToString(dt_temp_D.Rows[i]["date_approved"]) != null && Convert.ToString(dt_temp_D.Rows[i]["type"]) != "service")
                        {



                            string colnameWithValue = "Regd_ID=" + Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]) + ",Regd_Type='" + dt_temp_D.Rows[i]["Regd_Type"].ToString() + "'";
                            string conditions = "S_No=" + Convert.ToInt32(dtLogin.Rows[0]["S_No"]) + "";
                            var Update_paymentUpdate = dal.Updation("pisl_users", colnameWithValue, conditions);
                            if (Update_paymentUpdate == 0)
                            {
                                dtLogin.Rows[0]["Regd_ID"] = Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]);
                                dtLogin.Rows[0]["Regd_Type"] = dt_temp_D.Rows[i]["Regd_Type"].ToString();

                            }
                            break;
                        }
                    }
                }


                for (int i = 0; i < dtLogin.Rows.Count; i++)
                {
                    string hash = Convert.ToString(dtLogin.Rows[i]["hash"]);
                    string decryptedstring = Decrypt(pass, hash);

                    string gid = Convert.ToString(dtLogin.Rows[i]["GID"]);
                    //string active = Convert.ToString(dtLogin.Rows[0]["active"]);
                    if (gid == "0")//Login for doctor
                    {
                        //DataTable dt_lastloginRecord = dal.GetList("pisl_users where email='" + EmailId + "' order by S_No desc", "TOP 1 *", "");
                        if (dtLogin != null && dtLogin.Rows.Count > 0)
                        {

                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[i]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[i]["Regd_Type"]);
                            }
                            else
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                            }
                            if (dtLogin.Rows[i]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[i]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }

                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                        }
                        else
                        {
                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[0]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            }
                            if (dtLogin.Rows[0]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }
                        }


                        message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 2;
                    }
                    else if (gid == "1")//Login for internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["isno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 1;
                            }
                            else
                            {
                                message = "0,6";
                            }
                        }

                        else
                        {
                            message = "0,5";
                        }
                    }
                    else if (gid == "2")//Login for admin and internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["asno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 3;
                            }
                            else
                            {
                                message = "0,6";
                            }

                        }
                        else
                        {
                            message = "0,5";
                        }
                    }
                }
            }
            else
            {
                message = "0,0";
            }
        }
        else
        {
            message = "10,10";
        }
        return message;
    }

    public string Encrypt(string password)
    {
        // Decrypt("", "");
        //string password = @"1234abcd";

        // byte array representation of that string
        byte[] encodedPassword = new UTF8Encoding().GetBytes(password);

        // need MD5 to calculate the hash
        byte[] hash = ((HashAlgorithm)CryptoConfig.CreateFromName("MD5")).ComputeHash(encodedPassword);

        // string representation (similar to UNIX format)
        string encoded = BitConverter.ToString(hash)
           // without dashes
           .Replace("-", string.Empty)
           // make lowercase
           .ToLower();
        return encoded;
    }
    public string Decrypt(string password, string hash1)
    {//https://md5decrypt.net/#answer
        string ss = "";
        string source = "zdNot3oAz5I%3DjRspJg78a%2FY%3D";// "Hello World!";
        MD5 md5 = System.Security.Cryptography.MD5.Create();
        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(password);
        byte[] hash = md5.ComputeHash(inputBytes);

        // step 2, convert byte array to hex string
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < hash.Length; i++)
        {
            sb.Append(hash[i].ToString("X2"));
        }
        return sb.ToString();
    }
    static string GetMd5Hash(MD5 md5Hash, string input)
    {

        // Convert the input string to a byte array and compute the hash.
        byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));

        // Create a new Stringbuilder to collect the bytes
        // and create a string.
        StringBuilder sBuilder = new StringBuilder();

        // Loop through each byte of the hashed data 
        // and format each one as a hexadecimal string.
        for (int i = 0; i < data.Length; i++)
        {
            sBuilder.Append(data[i].ToString("x2"));
        }

        // Return the hexadecimal string.
        return sBuilder.ToString();
    }
    public FileResult GetCaptchaImage()
    {
        MemoryStream ms = new MemoryStream();
        if (Session["CAPTCHA"] != null)
        {
            string text = Session["CAPTCHA"].ToString();

            //first, create a dummy bitmap just to get a graphics object
            Image img = new Bitmap(1, 1);
            Graphics drawing = Graphics.FromImage(img);

            Font font = new Font("Jokerman", 15);
            //measure the string to see how big the image needs to be
            SizeF textSize = drawing.MeasureString(text, font);

            //free up the dummy image and old graphics object
            img.Dispose();
            drawing.Dispose();

            //create a new image of the right size
            img = new Bitmap((int)textSize.Width + 40, (int)textSize.Height + 20);
            drawing = Graphics.FromImage(img);

            Color backColor = Color.SeaShell;
            Color textColor = Color.Red;
            //paint the background
            drawing.Clear(backColor);

            //create a brush for the text
            Brush textBrush = new SolidBrush(textColor);

            drawing.DrawString(text, font, textBrush, 20, 10);

            drawing.Save();

            font.Dispose();
            textBrush.Dispose();
            drawing.Dispose();


            img.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
            img.Dispose();

            return File(ms.ToArray(), "image/png");
        }
        else
        {
            return File(ms.ToArray(), "image/png");
        }
    }
    private string GetRandomText()
    {
        StringBuilder randomText = new StringBuilder();
        string alphabets = "12345679ABCEFGHKLMNPRSTUVWXZ";
        Random r = new Random();
        for (int j = 0; j <= 5; j++)
        {
            randomText.Append(alphabets[r.Next(alphabets.Length)]);
        }
        return randomText.ToString();
    }
    //End Login//
    public ActionResult signup()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    [HttpPost]
    public string sendotpsignup(string txt_Email, string txt_ContactNo)
    {
        string msg = "";
        try
        {
            var CheckEmail = IsEmailandMobileExists(txt_Email, "");
            var checkMobile = IsEmailandMobileExists("", txt_ContactNo);
            if (CheckEmail == false && checkMobile == false)
            {

                Session["otp"] = GetRandomText();
                string OTP = Session["otp"].ToString();
                //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
                string mailBody = "Your OTP is: " + OTP + ". DMC";
                MRPLookup.sendMail(txt_Email.Trim(), "DMC | OTP Verification", mailBody, "", "");

                //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
              

                MRPLookup.SendSMS("otp", txt_ContactNo.Trim(), "", "", OTP, "", "", "", "", "", "", "");
                msg = "0";
            }
            else if (CheckEmail == true && checkMobile == true)
            {
                msg = "Email and Mobile no. are already exists!!";
            }
            else
            {
                if (checkMobile == true && CheckEmail == false)
                {
                    msg = "Mobile No. is Already Exists!!";
                }
                else if (CheckEmail == true && checkMobile == false)
                {
                    msg = "Email Address is Already Exists!!";
                }


            }
        }
        catch (Exception ex)
        {
            msg = "1";
        }
        return msg;
    }
    public bool IsEmailandMobileExists(string email, string mobile)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        try
        {
            tableName = "pisl_users";
            colname = "*";
            if (!string.IsNullOrEmpty(email))
            {
                cond = "email='" + email + "'";
            }
            if (!string.IsNullOrEmpty(mobile))
            {
                cond = "mobile='" + mobile + "'";
            }
            //cond=
            DataTable dt_datacheck = dal.GetList(tableName, colname, cond);
            if (dt_datacheck != null && dt_datacheck.Rows.Count > 0)
            {
                IsExists = true;
            }

        }
        catch (Exception ex)
        {
            IsExists = false;
            throw;
        }
        return IsExists;
    }

    public ActionResult IsDocDataExists(string regd_type, string regd_no, string DOB, string PassingYear)
    {
        //List<dynamic> list = new List<dynamic>();
        string message = "";
        try
        {
            var tbl_name = "";

            var userExists = IsRegd_Exists(regd_type, regd_no, DOB, PassingYear, out tbl_name);
            if (userExists == true && tbl_name == "pisl_users")
            {

                message = "Already Registered With us. Please Login With Your Credential";
            }
            else
                if (userExists == true && tbl_name == "pisl_fresh_registration_mst")
            {
                message = "Your Registration No. is Expired. Please SignUp Again.";
            }
            else
            {
                message = "NotExists";
                //message = "Your Registration No. is Not Exists!";
            }
        }
        catch (Exception ex)
        {

        }
        return Json(message, JsonRequestBehavior.AllowGet);
    }
    public bool IsRegd_Exists(string regd_type, string regd_no, string DOB, string PassingYear, out string Tbl_Name)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        Tbl_Name = "";
        DataTable dt_UserCheck = null;
        try
        {
            tableName = "pisl_users";
            colname = "*";
            cond = "Regd_Type='" + regd_type + "' and Regd_ID='" + regd_no.Trim() + "'";
            dt_UserCheck = dal.GetList(tableName, colname, cond);
            if (dt_UserCheck == null || dt_UserCheck.Rows.Count == 0)
            {
                tableName = "pisl_fresh_regi_qual_mst";
                colname = "*";
                cond = "quali_type='Basic Qualification' AND Regd_ID='" + regd_no + "' "
                    + "AND Regd_Type='" + regd_type + "' AND passing_date =  '" + PassingYear.Trim() + "'";
                dt_UserCheck = dal.GetList(tableName, colname, cond);
                if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                {
                    Tbl_Name = "pisl_fresh_regi_qual_mst";

                    tableName = "pisl_fresh_registration_mst";
                    colname = "*";
                    cond = "Regd_ID='" + regd_no + "' AND Regd_Type='" + regd_type + "'";
                    dt_UserCheck = dal.GetList(tableName, colname, cond);
                    if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                    {
                        Tbl_Name = "pisl_fresh_registration_mst";
                        IsExists = true;
                    }
                    else
                    {
                        IsExists = false;
                    }
                }
                else
                {

                    IsExists = false;
                }
            }
            else
            {
                Tbl_Name = "pisl_users";
                IsExists = true;
            }
        }
        catch (Exception ex)
        {


            throw;
        }
        return IsExists;
    }

    [HttpPost]
    public string createsignup(string txt_Email, string txt_ContactNo, string txt_FirstName, string txt_MiddleName,
        string txt_LastName, string txt_Password, string txt_ConfirmPassword, string txt_DOB, bool chk_TermCondition,
        string Captcha, string Regd_ID, string txtOTP, string ddl_regType, string txt_oldData, string passingYear)
    {
        string message = "";
        string dob = lk.convertdate1(txt_DOB);
        string Tbl_Name = "";
        try
        {
            if (!IsEmailandMobileExists(txt_Email, ""))
            {
                if (!IsEmailandMobileExists("", txt_ContactNo))
                {
                    if (ddl_regType == "FRS" || ddl_regType == "RRE")
                    {
                        if (IsRegd_Exists(ddl_regType, Regd_ID, dob, passingYear, out Tbl_Name))
                        {
                            Tbl_Name = Tbl_Name;
                            if (Tbl_Name == "pisl_users")
                            {
                                //if Pisl_user Table Record Exists but no Email and Mobile No exists
                                //in this case update the Email and Mobile No.
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        DataTable dt_Email_Mobile_Check = dal.GetList("pisl_users",
                                                        "top 1*", " Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                        if (dt_Email_Mobile_Check != null)
                                                        {
                                                            if (dt_Email_Mobile_Check.Rows.Count > 0)
                                                            {
                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_Email_Mobile_Check.Rows[0]["email"])))
                                                                {
                                                                    string pass = Encrypt(txt_Password.Trim());
                                                                    string hash = Encrypt(MRPLookup.RandamStringGenerator1());
                                                                    var updateDt = dal.Updation("pisl_users",
                                                                        "email='" + txt_Email.Trim() + "',mobile='" + txt_ContactNo.Trim() + "',password='" + pass + "',hash='" + hash + "'",
                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                    if (updateDt == 0)
                                                                    {
                                                                        DataTable dt_fresh_Check = dal.GetList("pisl_fresh_registration_mst",
                                                                            "top 1 * ",
                                                                            "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                        if (dt_fresh_Check != null)
                                                                        {
                                                                            if (dt_fresh_Check.Rows.Count > 0)
                                                                            {
                                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_fresh_Check.Rows[0]["Email"])))
                                                                                {
                                                                                    var updateDt_fresh = dal.Updation("pisl_fresh_registration_mst",
                                                                                        "Email='" + txt_Email.Trim() + "',Mobile='" + txt_ContactNo.Trim() + "'",
                                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");

                                                                                    if (updateDt_fresh != 0)
                                                                                    {
                                                                                        message = "Error!!";
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                                        MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                                        message = "Please, Check Your Mail For Login Details";
                                                                        //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                                        MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                                    }
                                                                    else
                                                                    {
                                                                        message = "Error!!";
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    message = "Your record are already Exists with us!!";
                                                                }
                                                            }
                                                        } //End Updation
                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }
                            else if (Tbl_Name == "pisl_fresh_regi_qual_mst" || Tbl_Name == "pisl_fresh_registration_mst")
                            {
                                //Insert Login Record in Pisl_Users
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        string pass = Encrypt(txt_Password.Trim());
                                                        string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                        if (string.IsNullOrEmpty(Regd_ID))
                                                        {
                                                            Regd_ID = "0";
                                                        }
                                                        //if (txt_oldData != "")
                                                        //{
                                                        //    string colnamemst = "*";
                                                        //    string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        //    DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        //    if (dtrmst.Rows.Count > 0)
                                                        //    {
                                                        //        string oldtype = "";
                                                        //        if (ddl_regType == "FRS")
                                                        //        {
                                                        //            oldtype = "service";
                                                        //        }
                                                        //        else if (ddl_regType == "RRE")
                                                        //        {
                                                        //            oldtype = "reregi";
                                                        //        }
                                                        //        var corrAddress1 = dtrmst.Rows[0]["Corr_Add_Line_1"].ToString();
                                                        //        var corrAddress2 = dtrmst.Rows[0]["Corr_Add_Line_2"].ToString();
                                                        //        var perAddress1 = dtrmst.Rows[0]["Per_Add_Line_1"].ToString();
                                                        //        var perAddress2 = dtrmst.Rows[0]["Per_Add_Line_2"].ToString();

                                                        //        string colNameold = "Regd_ID,Regd_Type,type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,date_entered,Father_Name,POB,Gender,Nationality,Corr_Add_Line_1,Corr_Add_Line_2,Corr_Add_State,Corr_Add_Pincode,Corr_Add_Country,Per_Add_Line_1,Per_Add_Line_2,Per_Add_Line_State,Per_Add_Line_Pincode,Per_Add_Line_Country";

                                                        //        string colValueold = "'" + Regd_ID + "','" + ddl_regType + "','" + oldtype + "','" + txt_FirstName + "','" + txt_MiddleName + "','"  + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "', '"+ lk.GetDateTime()+ "' ,'"+ dtrmst.Rows[0]["Father_Name"] + "','" + dtrmst.Rows[0]["POB"] + "','" + dtrmst.Rows[0]["Gender"] + "','" + dtrmst.Rows[0]["Nationality"] + "','" + corrAddress1 + "','" + corrAddress2 + "','" + dtrmst.Rows[0]["Corr_Add_State"] + "','" + dtrmst.Rows[0]["Corr_Add_Pincode"] + "','" + dtrmst.Rows[0]["Corr_Add_Country"] + "','" + perAddress1 + "','" + perAddress2 + "','" + dtrmst.Rows[0]["Per_Add_Line_State"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Pincode"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Country"] + "'";
                                                        //        int insold = dal.insertion("pisl_temp_registrations", colNameold, colValueold);
                                                        //    }
                                                        //}
                                                        Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                        string colnamemst = "*";
                                                        string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        DateTime txtdob1 = Convert.ToDateTime(dtrmst.Rows[0]["DOB"]);
                                                        string txtdob = txtdob1.ToShortDateString();

                                                        string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                            + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                        string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + dtrmst.Rows[0]["First_Name"].ToString() + "','" + dtrmst.Rows[0]["Middle_Name"].ToString() + "',"
                                                            + "'" + dtrmst.Rows[0]["Last_Name"].ToString() + "','" + txtdob + "','" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                            + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                        int ins = dal.insertion("pisl_users", colName, colValue);
                                                        if (ins == 0)
                                                        {
                                                            string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                            MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                            message = "Please, Check Your Mail For Login Details";
                                                            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                            MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                        }
                                                        else
                                                        {
                                                            message = "Try after some time";
                                                        }

                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }

                        }
                        else
                        {
                            message = "Your Registration No and Passing Year is Not Exist with Us";
                        }
                    }
                    else
                    {
                        //Insert Login Record in Pisl_Users
                        if (chk_TermCondition == true)
                        {
                            if (txtOTP == Session["otp"].ToString())
                            {
                                if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                {
                                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                    Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                    if (foundMatch == true)
                                    {
                                        if (txt_Password == txt_ConfirmPassword)
                                        {
                                            if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                            {
                                                //if (Tbl_Name== "pisl_users") { }
                                                string pass = Encrypt(txt_Password.Trim());
                                                string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                if (string.IsNullOrEmpty(Regd_ID))
                                                {
                                                    Regd_ID = "0";
                                                }
                                                Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                if (ddl_regType == "-1")
                                                {
                                                    ddl_regType = "";
                                                }


                                                string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                    + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                int ins = dal.insertion("pisl_users", colName, colValue);
                                                if (ins == 0)
                                                {
                                                    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                    message = "Please, Check Your Mail";
                                                    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                }
                                                else
                                                {
                                                    message = "Try after some time";
                                                }

                                                //string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                //    + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                //string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                //    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                //    + "1,0,0,'"+ lk.GetDateTime()+ "','','" + Regd_ID1 + "'";
                                                //int ins = dal.insertion("pisl_users", colName, colValue);
                                                //if (ins == 0)
                                                //{
                                                //    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                //    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                //    message = "Please, Check Your Mail";
                                                //    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                //    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                //}
                                                //else
                                                //{
                                                //    message = "Try after some time";
                                                //}
                                            }
                                            else
                                            {
                                                message = "Enter A Valid Email";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password and Confrim Password is Not Same";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                    }
                                }
                                else
                                {
                                    message = "Password Length must between 8 to 18 letters";
                                }
                            }
                            else
                            {
                                message = "Enter the Valid OTP";
                            }
                        }
                        else
                        {
                            message = "Please check the Terms and Conditions";
                        }

                        //}
                    }
                }
                else
                {
                    message = "Mobile No. is Already Exists";
                }
            }
            else
            {
                message = "Email Already exists!!";
            }
            //
            //Cut the Code From There

        }
        catch
        {

        }
        return message;
    }

    public ActionResult SignupVerification()
    {
        string message = "";
        try
        {
            if (Request.QueryString["email"] != null && Request.QueryString["hash"] != null)
            {
                string email = Request.QueryString["email"];
                string hash = Request.QueryString["hash"];
                string cond = "Email='" + email.Trim() + "' and Hash='" + hash.Trim() + "' and Active=0";
                DataTable dt = dal.GetList("pisl_users", "*", cond);
                if (dt.Rows.Count > 0)
                {
                    int upd = dal.Updation("pisl_users", "Active=1", cond);
                    if (upd == 0)
                    {
                        message = "Your account has been activated, you can now login";
                    }
                    else
                    {
                        message = "Try after some time";
                    }
                }
                else
                {
                    message = "The url is either invalid or you already have activated your account.";
                }
            }
            else
            {
                message = "Invalid approach, please use the link that has been send to your email.";
            }
        }
        catch
        { }
        ViewBag.lbl_status = message;
        return View();
    }
    public ActionResult contact()
    {
        return View();
    }

    public ActionResult about()
    {
        return View();
    }
    public ActionResult faqs()
    {
        return View();
    }
    // Start forgot password
    public ActionResult forgotpassword()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public string sendCode(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        string message = string.Empty;
        try
        {
            string clientCaptcha = CaptchaCaseID;
            string serverCaptcha = Session["CAPTCHA"].ToString();
            if (!clientCaptcha.Equals(serverCaptcha))
            {
                ViewBag.ShowCAPTCHA = serverCaptcha;
                message = "Sorry, please write exact text as written below.";
            }
            else
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' ";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string name = Convert.ToString(dt.Rows[0]["First_Name"]);
                                        string Mobile = Convert.ToString(dt.Rows[0]["Mobile"]);

                                        MailFormat mf = new MailFormat();
                                        string code = MRPLookup.RandamStringGenerator1();
                                        string mailBody = mf.SendCodeOnMail(name, code);
                                        MRPLookup.SendSMS("otp", Mobile, "", "", code, "", "", "", "", "", "", "");
                                        string colValue = "Code='" + code.Trim() + "'";
                                        int updCode = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "'");
                                        if (updCode == 0)
                                        {
                                            string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(), "Reset Password Code " + System.DateTime.Now + "", mailBody, "", "");
                                            if (sendmailStatus != "Technical issue! Please try agiain")
                                            {
                                                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

                                            }
                                            else
                                            {
                                                message = sendmailStatus;
                                            }
                                        }
                                        else
                                        {
                                            message = "Please try after some time.";
                                        }

                                    }
                                    else
                                    {
                                        message = "Enter a New Password.";
                                    }
                                }
                                else
                                {
                                    message = "Your Email And Mobile Number Do not Match with DMC Registered Users.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
        }
        catch (Exception ex)
        {

        }
        return message;
    }
    public string forgotpasswordCaseID(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact text as written below.";
            // return message;
        }
        else
        {
            if (txtCode != "0")
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string mobile = Convert.ToString(dt.Rows[0]["Mobile"]);
                                    string firstName = Convert.ToString(dt.Rows[0]["First_Name"]);
                                    string lastName = Convert.ToString(dt.Rows[0]["Last_Name"]);
                                    //string new_password = Encrypt(MRPLookup.RandamStringGenerator1());
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string colValue = "password='" + new_PasswordMD5.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                                        updPassword = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                        if (updPassword == 0)
                                        {
                                            updPassword = dal.Updation("pisl_users", "Code='0'", "Email='" + txtEmail.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                            string hostName = Dns.GetHostName();
                                            string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                            string colName = "activity,email,password,ip,system,description,date";
                                            colValue = "'Change Passs','" + txtEmail + "','" + txtPassword + "','" + IP + "','" + mobile + "','" + new_PasswordMD5 + "',getdate()";
                                            int ins = dal.insertion("tbl_activity", colName, colValue);
                                            message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                            MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                                            // Send SMS and mail for password reset.
                                            

                                        }
                                        else
                                        {
                                            message = "Please try after some time";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please try another password.";
                                    }

                                }
                                else
                                {
                                    message = "Your Details Dont Match or You have NOT registered with DMC.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
            else
            {
                message = "Code not match";
            }
        }
        return message;
    }

    public ActionResult introduction()
    {
        return View();
    }

    public ActionResult powers()
    {
        return View();
    }

    public ActionResult thecouncil()
    {
        return View();
    }

    //public ActionResult gallery()
    //{
    //    return View();
    //}
    public ActionResult Gallery()
    {
        return View();
    }

    public ActionResult accomplishments()
    {
        return View();
    }

    public ActionResult registration()
    {
        return View();
    }
    public ActionResult cmeperforma()
    {
        return View();
    }
    public ActionResult cmeonline()
    {
        return View();
    }
    public ActionResult cmerequirements()
    {
        return View();
    }
    public ActionResult cmepassbook()
    {
        return View();
    }
    public ActionResult duties()
    {
        return View();
    }
    public ActionResult inst_general()
    {
        return View();
    }

    public ActionResult inst_fees()
    {
        return View();
    }
    public ActionResult inst_docupload()
    {
        return View();
    }
    public ActionResult disclaimer()
    {
        return View();
    }
    public ActionResult feestructure()
    {
        return View();
    }
    public ActionResult privacypolicy()
    {
        return View();
    }
    public ActionResult termofuse()
    {
        return View();
    }

    public ActionResult litigations()
    {
        return View();
    }


    public ActionResult council_meeting()
    {
        return View();
    }
    public ActionResult Cme_workshop_Conference()
    {
        return View();
    }

    public ActionResult Media_room()
    {
        return View();
    }
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    public ActionResult LogOut()
    {
        Session.Abandon();
        return RedirectToAction("Index", "Home");
    }
    public ActionResult SearchElectrolData(string regid)
    {
        string msg = "";
        DataTable dtSearch = dal.GetList("tbl_electrolData", "*", "RegNo='" + regid.Trim() + "'");
        if (dtSearch.Rows.Count > 0)
        {
            return Json(MRPLookup.DataTableToJSONWithJSONNet(dtSearch), JsonRequestBehavior.AllowGet);
        }
        else
        {
            msg = "Data not found";
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
    }
    public ActionResult SearchElectrolDataUpdate(string regid)
    {
        int upd = 1;
        upd = dal.Updation("tbl_electrolData", "Status='Completed',Date='" + lk.GetDateTime() + "'", "ID='" + regid.Trim() + "'");
        if (upd == 0)
        {

            return Json(upd, JsonRequestBehavior.AllowGet);
        }
        else
        {
            return Json(upd, JsonRequestBehavior.AllowGet);
        }
    }

    public ActionResult TotalCount()
    {
        DataTable dtcntCompleted = dal.GetList("tbl_electrolData", "count(*) as cntCompleted", "status='Completed'");
        DataTable dtcntNotCompleted = dal.GetList("tbl_electrolData", "count(*) as cntNotCompleted", "status ='Valid'");
        string totalCmpleteStatus = "Completed: " + Convert.ToString(dtcntCompleted.Rows[0]["cntCompleted"]) + "  Not Completed: " + Convert.ToString(dtcntNotCompleted.Rows[0]["cntNotCompleted"]);
        return Json(totalCmpleteStatus, JsonRequestBehavior.AllowGet);
    }
    public ActionResult Renewal_Reminder(string key)
    {
        string msg = "";
        try
        {

            key = "1111";
            string validKey = "1111";
            // MRPLookup.SendSMS("Renewal_expired_tdy", "9899849487", "Dinesh", "", "", "", "", "", "", "", "", "");
            if (key == validKey)
            {
                string expiry_frtyfive = Convert.ToDateTime(DateTime.Now.AddDays(30)).ToString("yyyy-MM-dd");//date(('Y-m-d'), strtotime('+30 days'));
                string expiry_tdy = Convert.ToDateTime(DateTime.Now).ToString("yyyy-MM-dd");//date('Y-m-d');
                string expiry_pastfifty = Convert.ToDateTime(DateTime.Now.AddDays(-50)).ToString("yyyy-MM-dd");// date(('Y-m-d'), strtotime('-50 days'));
                string cond = "(Expiry_Date = '" + expiry_frtyfive + "' OR  Expiry_Date = '" + expiry_tdy + "' OR Expiry_Date = '" + expiry_pastfifty + " ') AND (Mobile !='' OR  Email !='')";
                //DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", cond);
                string strConnString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                SqlConnection con = new SqlConnection(strConnString);
                //SqlConnection con = new SqlConnection(@"Data Source=103.20.212.254,1232;Initial Catalog=dmcaws_New;User Id=sa;Password=bD$x89K3$@K9UaQsKQ");
                //SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-PKTADCN;Initial Catalog=dmcaws1;integrated security=true");
                con.Open();
                SqlCommand cmd = new SqlCommand("select * from pisl_fresh_registration_mst where " + cond + "", con);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                con.Close();
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string First_Name = Convert.ToString(dt.Rows[i]["First_Name"]);
                        string Last_Name = Convert.ToString(dt.Rows[i]["Last_Name"]);
                        string Regd_ID = Convert.ToString(dt.Rows[i]["Regd_ID"]);
                        string Regd_Type = Convert.ToString(dt.Rows[i]["Regd_Type"]);
                        string Mobile = Convert.ToString(dt.Rows[i]["Mobile"]);
                        string Expiry_Date = Convert.ToDateTime(dt.Rows[i]["Expiry_Date"]).ToString("yyyy-MM-dd");
                        string date_approved = Convert.ToDateTime(dt.Rows[i]["date_approved"]).ToString("yyyy-MM-dd");
                        string tdydate = Convert.ToDateTime(System.DateTime.Now).ToString("yyyy-MM-dd");
                        string to = Convert.ToString(dt.Rows[i]["Email"]);

                        string subject1 = "Renewal of Registration with Delhi Medical Council"; //// Give the email a subject
                        string subject2 = "Expiry of Registration with Delhi Medical Council";
                        string subject3 = "Deletion of Regd Number with Delhi Medical Council";
                        string message1 = "";
                        message1 += "Dear Dr " + First_Name + " " + Last_Name + ",";
                        message1 += "Greetings from Delhi Medical Council!!";

                        message1 += "   This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council is due for renewal.";
                        message1 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting ";
                        message1 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message1 += "For inclusion of any additional qualification, please produce the original degree at the office of Delhi Medical Council, so that your additional ";
                        message1 += "qualification certificate can be verified with the original document. The original degree / diploma Certificate will be returned immediately after verification. ";

                        message1 += "<b>This is a system generated email and we request you not to reply to this email. Please ignore if already applied.</b>";

                        message1 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message1 += "Warm Regards,";

                        message1 += "Delhi Medical Council.";
                        message1 += "Ground Floor, B Wing, B Block-1";
                        message1 += "DMCR IT Park, Shastri Park";
                        message1 += "New Delhi-110053";
                        message1 += "Tel: +91-011-46621000";
                        message1 += "Website - www.delhimedicalcouncil.org	 ";

                        string message2 = "";
                        message2 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message2 += "Greetings from Delhi Medical Council!!";

                        message2 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council expired on " + Expiry_Date + " and  is due for renewal. ";

                        message2 += "We request you to kindly renew your registration within thirty days and keep your registration in force. You can renew your registration online by visiting ";
                        message2 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message2 += "Please take note that in case you do not apply for renewal of registration within the stipulated period, your name shall be removed from the State Medical ";
                        message2 += "Register maintained by the Delhi Medical Council in accordance with the provisions of Section 22 of the Delhi Medical Council Act, 1997 which will debar";
                        message2 += "you from practicing Allopathic in the state of Delhi.";

                        message2 += "<b>Kindly ignore this email, in case you have already applied for renewal of registration</b>";

                        message2 += "This is a system generated email and we request you not to reply to this email.";

                        message2 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message2 += "Warm Regards,";

                        message2 += "Delhi Medical Council.";
                        message2 += "Ground Floor, B Wing, B Block-1";
                        message2 += "DMCR IT Park, Shastri Park";
                        message2 += "New Delhi-110053";
                        message2 += "Tel: +91-011-46621000";
                        message2 += "Website - www.delhimedicalcouncil.org";

                        string message3 = "";
                        message3 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message3 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council has expired on " + Expiry_Date + ". You ";
                        message3 += "failed to renew the registration with Delhi Medical Council, in spite of notices/Emails (public / individual) issued for renewal. Hence, in accordance with the ";
                        message3 += "provisions of section 22(3) of Delhi Medical Council Act, 1997; your name under Registration number " + Regd_ID + "-" + Regd_Type + "  has been removed from the State ";
                        message3 += "Medical Register of Delhi Medical Council.";

                        message3 += "Please note that if you wish to have your name re-entered in the State Medical Register of Delhi Medical Council, you may do so, by paying fees as detailed herein below,";
                        message3 += "in addition to fee for renewal of registration (Rs. 2000/-)";

                        message3 += "Late fees for non-renewal of registration:-";
                        message3 += "(a) upto six months from the date from 		Rs. 1000/- (Rupees One Thousand only)";
                        message3 += "    which registration is due for renewal";
                        message3 += "(b) for period more than six months 	    Rs. 2000/- (Rupees One Thousand only)";
                        message3 += "     but upto one year";
                        message3 += "(c) for period more than one year 			Rs. 1000/- (Rupees One Thousand per year and Part thereof)";

                        message3 += "Please also note that any person servicing or practicing modern scientific system of medicine (allopathy) in Delhi without holding valid registration with Delhi Medical Council is liable for action under the provisions of Delhi Medical Council Act, 1997.";
                        message3 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting www.delhimedicalcouncil.org and apply under Online Renewal & Services.";

                        message3 += "<b>Kindly ignore this letter, in case you have already applied for renewal of registration</b>";

                        message3 += "This is a system generated email and we request you not to reply to this email.";

                        message3 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message3 += "Warm Regards,";

                        message3 += "Delhi Medical Council.";
                        message3 += "Ground Floor, B Wing, B Block-1";
                        message3 += "DMCR IT Park, Shastri Park";
                        message3 += "New Delhi-110053";
                        message3 += "Tel: +91-011-46621000";
                        message3 += "Website - www.delhimedicalcouncil.org,";

                        string headers = "From: DMC Registration System <registration@delhimedicalcouncil.org>' . '\r\n'"; // Set from headers

                        string message = "";
                        string subject = "";
                        string trigger = "";
                        string msgtxt = "";
                        if (Convert.ToDateTime(Expiry_Date) > Convert.ToDateTime(tdydate))
                        {
                            message = message1;
                            subject = subject1;
                            trigger = "Renewal_due_reminder";
                            msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Renewal of your DMC Regd No " + Regd_ID + " - " + Regd_Type + " is due. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }

                        }
                        else if (Convert.ToDateTime(Expiry_Date) == Convert.ToDateTime(tdydate))
                        {
                            message = message2;
                            subject = subject2;
                            trigger = "Renewal_expired_tdy";
                            // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Registration of DMC Regd No " + Regd_ID + " - " + Regd_Type + " expired today. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }
                        }
                        //else if (Convert.ToDateTime(Expiry_Date) < Convert.ToDateTime(tdydate))
                        //{
                        //    message = message2;
                        //    subject = subject2;
                        //    trigger = "Renewal_expired_fifty";
                        //   // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Your  ID " + Regd_ID + " - " + Regd_Type + " has been removed from the State Medical Register of DMC . Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                        //    if (!string.IsNullOrEmpty(to))
                        //    {
                        //       // MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //    if (!string.IsNullOrEmpty(Mobile))
                        //    {
                        //       // MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(to))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(Mobile))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}

                    }
                }

            }
            else
            {
                msg = "Key not match";
                string path = "C:\\TestService\\ServiceLog.txt";
                using (StreamWriter writer = new StreamWriter(path, true))
                {
                    writer.WriteLine(string.Format(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt"), DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt")));
                    writer.Close();
                }
            }
        }
        catch
        {

        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult certverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["cert"];
            string Regd_type = "";
            string regd_id = "";

            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["cert"]);
            var splitedString = decodedstr.Split('-');
            Regd_type = splitedString[0];
            regd_id = splitedString[1];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            switch (Regd_type)
            {
                case "RRE":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "FRS":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "PROV":
                    db = "pisl_prov_registration_mst";
                    qual_db = "pisl_prov_regi_qual_mst";
                    break;

                default:
                    Message = "This certificate cannnot be verified";
                    break;

            }

            var check_namechange = dal.GetList("tbl_NameChangeHistory_New", "CaseID,Name=(case when (New_MiddleName is null or  New_MiddleName='') then New_FirstName+' '+New_LastName when (New_MiddleName is null or  New_MiddleName='') and (New_LastName is null or New_LastName='') then New_FirstName else New_FirstName+' '+New_MiddleName+' '+New_LastName end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_namechange.Rows.Count > 0)
            {
                string CaseID = check_namechange.Rows[0]["CaseID"].ToString();
                ViewBag.Name = check_namechange.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                if (check_Doctordata.Rows.Count > 0)
                {
                    string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
                    ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                    DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                    DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                    DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                    ViewBag.qual = dt_qual;
                    ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                    ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                    Message = "success";
                }
                else
                {
                    Message = "This Entry Cannot be Verified";
                }
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;

        return View();
    }
    public ActionResult VeryfyCertificate(string value)
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        var qstring = value;
        var decodedStr = MRPLookup.Decrypt1(qstring);
        var splitedString = decodedStr.Split('-');
        var Regd_type = splitedString[0];
        var regd_id = splitedString[1];
        var db = "";
        var qual_db = "";
        //string regdtype=
        switch (Regd_type)
        {
            case "RRE":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "FRS":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "PROV":
                db = "pisl_prov_registration_mst";
                qual_db = "pisl_prov_regi_qual_mst";
                break;

            default:
                Message = "This certificate cannnot be verified";
                break;

        }
        var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
        if (check_Doctordata.Rows.Count > 0)
        {
            string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
            DataTable dt_Documents = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
            DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign' ");

        }
        else
        {
            Message = "This Entry Cannot be Verified";
        }
        return Json("", JsonRequestBehavior.AllowGet);
    }
    public ActionResult letterverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["letter"];
            string Regd_type = "";
            string regd_id = "";
            string ID = "";
            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["letter"]);
            var splitedString = decodedstr.Split('-');
            ID = splitedString[0];
            Regd_type = splitedString[1];
            regd_id = splitedString[2];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            //switch ()
            //{
            //    case "RRE":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "FRS":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "PROV":
            //        db = "pisl_prov_registration_mst";
            //        qual_db = "pisl_prov_regi_qual_mst";
            //        break;

            //    default:
            //        Message = "This certificate cannnot be verified";
            //        break;

            //}
            var letter_type = "";
            var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,date_approved,drg_from,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "ID='" + ID + "' and Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_Doctordata.Rows.Count > 0)
            {
                switch (check_Doctordata.Rows[0]["drg_from"].ToString())
                {
                    case "noc":
                        letter_type = "No Objection Certificate";
                        break;

                    case "gdst":
                        letter_type = "Good Standing Certificate";
                        break;
                }
                ViewBag.lettertype = letter_type;
                ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("pisl_fresh_regi_qual_mst", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='Sign'");
                if (!string.IsNullOrEmpty(check_Doctordata.Rows[0]["date_approved"].ToString()))
                {
                    ViewBag.DateApproved = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).ToString("dd MMMM,yyyy");
                    ViewBag.expiry = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).AddDays(-1).AddMonths(6).ToString("dd MMMM, yyyy");
                }
                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(ID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                Message = "This Entry Cannot be Verified";
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;
        return View();
    }
    public ActionResult Regi_search()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public ActionResult search_ur_dr()
    {

        return View();
    }
    public ActionResult regi_search_submit(string Regid, string Types)
    {
        try
        {


            string regid = Request.QueryString["Regd_ID"];
            string type = Request.QueryString["Type"]; ;
            //string type = frm["type"].Trim();
            //string regid = frm["regid"].Trim();
            string colname = "*";
            string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "' ORDER BY S_No DESC";
            DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
            if (dt.Rows.Count > 0)
            {
                DateTime ddob = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                DateTime dapproved = Convert.ToDateTime(dt.Rows[0]["date_approved"].ToString());
                DateTime dexpiry = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                ViewBag.dateapproved = dapproved.ToShortDateString();
                ViewBag.expirydate = dexpiry.ToShortDateString();
                ViewBag.dob = ddob.ToShortDateString();
                ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


                DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
                if (result_remarks.Rows.Count > 0)
                {
                    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    {
                        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    }
                }
                DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
                if (qualificationdt.Rows.Count > 0)
                {
                    ViewBag.qualdata = qualificationdt;
                }

            }
            return View();
        }
        catch (Exception ex)
        {
            return View();
        }
    }
    public ActionResult regi_search_submits(FormCollection frm)
    {

        string clientCaptcha = frm["CL_CAPCHA"].ToString();
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;

            return Json("-1");
        }
        string msg = "";
        //string type = Regd_ID;
        //string regid = Type;
        string type = frm["type"].Trim();
        string regid = frm["regid"].Trim();
        string colname = "*";
        string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
        if (dt.Rows.Count > 0)
        {
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
            if (result_remarks.Rows.Count > 0)
            {
                for (int i = 0; i < result_remarks.Rows.Count; i++)
                {
                    ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                }
            }
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult search_ur_dr_submit(FormCollection frm)
    {
        try
        {



            string First_Name = Request.QueryString["First_Name"];
            string Last_Name = frm["Last_Name"];
            string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
            string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
            string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
            string Mobile = Request.QueryString["Mobile"];
            string Email = Request.QueryString["Email"];

            if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Last_Name) && !string.IsNullOrEmpty(Corr_Add_Line_1) && !string.IsNullOrEmpty(Corr_Add_Line_2) && !string.IsNullOrEmpty(Corr_Add_Pincode) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Mobile='" + Mobile + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}

                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "Email='" + Email + "' and Mobile='" + Mobile + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }


            return View();
        }
        catch (Exception ex)
        {
            return View();

        }
    }


    public ActionResult search_ur_dr_submit2(FormCollection frm)
    {
        string msg = "";
        string First_Name = frm["First_Name"];
        string Last_Name = frm["Last_Name"];
        string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
        string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
        string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
        string Mobile = frm["Mobile"];
        string Email = frm["Email"];

        string condtions = "First_Name='" + First_Name.Trim() + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
        if (dt.Rows.Count > 0)
        {
            //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
            //if (result_remarks.Rows.Count > 0)
            //{
            //    for (int i = 0; i < result_remarks.Rows.Count; i++)
            //    {
            //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
            //    }
            //}
            string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", condtions2);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        else
        {
            msg = "Not Data Found";
        }


        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult cme()
    {
        return View();
    }
    public ActionResult status_comp2021()
    {
        return View();
    }

    public ActionResult ForgetEmailPasswordProv()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public dynamic getForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB)
    {
        //select pu.First_Name,pu.Last_Name,pu.email,pu.Mobile from pisl_users as pu inner join pisl_prov_regi_qual_mst as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type where pu.Regd_ID = 18430 and pu.DOB = '1991-10-26' and pfq.passing_date = 2016 and pfq.quali_course = 'M.B.B.S.'
        List<dynamic> OBJ = new List<dynamic>();
        string dob = lk.convertdate1(txt_DOB);
        try
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else {
                db = "pisl_fresh_regi_qual_mst";
            }

            DataTable dt1 = dal.GetList("pisl_users as pu inner join "+db+" as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType.ToUpper() + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                OBJ.Add(MRPLookup.Convert_DatatableToList(dt1).ToList());
                return Json(OBJ, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        catch (Exception)
        {

            return null;
        }
        
    }

    public string otpForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail)
    {
        string message = string.Empty;
        string dob = lk.convertdate1(txt_DOB);
        string db = "";
        if (txtRegType.ToUpper() == "PROV")
        {
            db = "pisl_prov_regi_qual_mst";
        }
        else
        {
            db = "pisl_fresh_regi_qual_mst";
        }
        DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
        if (dt1.Rows.Count > 0)
        {
            MailFormat mf = new MailFormat();
            string code = MRPLookup.RandamStringGenerator1();
            Session["provotp"] = code;
            string mailBody = "Your OTP is: " + code + ". DMC";
            string sendmailStatus= MRPLookup.sendMail(txtEmail.Trim(), "DMC | OTP Verification", mailBody, "", "");


            //string mailBody = mf.SendCodeOnMail(dt1.Rows[0]["First_Name"].ToString(), code);
            //string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(),"Reset Password Code" + System.DateTime.Now + "", mailBody, "", "");
            if (sendmailStatus != "Technical issue! Please try agiain")
            {
                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

            }
            else
            {
                message = sendmailStatus;
            }


            return message;
        }
        return "Some thing went wrong...!";
    }

    public string submitForgetEmailPasswordProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail, string txtMobileNo,string CaptchaCaseID,string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (Session["provotp"].ToString()!=txtCode)
        {
            return "Otp incorrect";
        }

        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact Captcha as written below.";
            // return message;
        }
        else
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else
            {
                db = "pisl_fresh_regi_qual_mst";
            }
            string dob = lk.convertdate1(txt_DOB);
            DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile,pu.Regd_ID,pu.Regd_Type", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                if (Convert.ToString(dt1.Rows[0]["Regd_ID"]) != "" && Convert.ToString(dt1.Rows[0]["Regd_Type"]) != "")
                {
                      string colValue = "Email='" + txtEmail.Trim() + "',Mobile='" + txtMobileNo.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                      updPassword = dal.Updation("pisl_users", colValue, "Regd_ID='"+dt1.Rows[0]["Regd_ID"].ToString()+ "' and Regd_Type='"+ dt1.Rows[0]["Regd_Type"].ToString() + "'");
               
                   
                     var tblCurrentStatuscolomns = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                     var Currentupdatestatuss = dal.Updation("pisl_temp_registrations", tblCurrentStatuscolomns, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");

                    var tblCurrentStatuscolomns1 = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                    var Currentupdatestatuss1 = dal.Updation("pisl_fresh_registration_mst", tblCurrentStatuscolomns1, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");



                    message = "Your Email and Mobile Changed successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                    //MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                   // Send SMS and mail for password reset.
                }
                else
                {
                    message = "Please try after some time";
                }
            }
            else
            {
                message = "Data Not found..!";
            }
        }
        return message;
    }
    public string sendOTP(string EmailId)
    {
        string message = "";
        string cond = "email='" + EmailId + "'";
        DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
        if (dtLogin.Rows.Count > 0)
        {
            string mobile = dtLogin.Rows[0]["Mobile"].ToString();
            Session["otp"] = GetRandomText();
            string OTP = Session["otp"].ToString();
            //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
            string mailBody = "Your OTP is: " + OTP + ". DMC";
            MRPLookup.sendMail(EmailId.Trim(), "DMC | OTP Verification", mailBody, "", "");
            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
            MRPLookup.SendSMS("otp", mobile.Trim(), "", "", OTP, "", "", "", "", "", "", "");
            message = "Please check your email or Mobile for OTP";
        }
        else
        {
            message = "Email not found, Please enter a valid email";
        }
        return message;
    }

    public ActionResult ChangePassward(FormCollection frm)
    {
        string Result = "";
        if (frm["txtOTP"].ToString() == Session["OTP"].ToString())
        {
            if (frm["txt_password"].Length >= 8 && frm["txt_password"].Length <= 18)
            {
                Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                Boolean foundMatch = regexObj.IsMatch(frm["txt_password"]);
                if (foundMatch == true)
                {
                    string where = "email='" + frm["txt_email"] + "'";// and Mobile='"+ frm["txt_contactno"] + "'";
                    DataTable dt_dr_details = dal.GetList("pisl_users", "*", where);
                    if (dt_dr_details != null)
                    {
                        if (dt_dr_details.Rows.Count > 0)
                        {
                            string pass = Encrypt(frm["txt_password"].Trim());
                            string col = " password='" + pass + "'";
                            var update = dal.Updation("pisl_users", col, "email='" + dt_dr_details.Rows[0]["email"].ToString() + "'");
                            if (update == 0)
                            {
                                string hostName = Dns.GetHostName();
                                string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                string colName = "activity,email,password,ip,system,description,date";
                                string colValue = "'Change Passs','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + frm["txt_password"].ToString().Trim() + "','" + IP + "','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + pass + "',getdate()";
                                int ins = dal.insertion("tbl_activity", colName, colValue);
                                string message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                MRPLookup.SendSMS("forgot_pwd", dt_dr_details.Rows[0]["Mobile"].ToString(), dt_dr_details.Rows[0]["First_Name"].ToString(), dt_dr_details.Rows[0]["Last_Name"].ToString(), "", "", dt_dr_details.Rows[0]["email"].ToString(), frm["txt_password"].ToString().Trim(), "", "", "", "");
                                Result = "0";
                            }
                            else
                            {
                                Result = "Somthing wrong Error !";
                            }
                        }
                        else
                        {
                            Result = "This is not registered email please check.";
                        }
                    }
                }
                else
                {
                    Result = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                }
            }
            else
            {
                Result = "Password Length must between 8 to 18 letters";
            }
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
    public ActionResult verifyOTP(string otp)
    {
        string Result = "";
        if (otp == Session["otp"].ToString())
        {
            Result = "DONE";
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
}
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using DelhimedicalcouncilORG;
using System.Data;
using System.Security.Cryptography;
using System.Text;
using System.IO;
using System.Drawing;
using System.Net;
using System.Net.Mail;

using System.Text.RegularExpressions;
using System.Data.SqlClient;
using System.Configuration;

namespace DelhimedicalcouncilORG.Controllers
{
public class homeController : Controller
{
    // GET: home
    DAL dal = new DAL();
    MRPLookup lk = new MRPLookup();
    MailFormat mf = new MailFormat();


    private string RetrieveContent(string webPage)
    {
        HttpWebResponse response = null;//used to get response
        StreamReader respStream = null;//used to read response into string
        try
        {
            //create a request object using the url passed in
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(webPage);
            request.Timeout = 10000;

            //go get a response from the page
            response = (HttpWebResponse)request.GetResponse();

            //create a streamreader object from the response
            respStream = new StreamReader(response.GetResponseStream());

            //get the contents of the page as a string and return it
            return respStream.ReadToEnd();
        }
        catch (Exception ex)//houston we have a problem!
        {
            throw ex;
        }
        finally
        {
            //close it down, we’re going home!
            response.Close();
            respStream.Close();
        }
    }

    //using a regular expression, find all of the href or urls
    //in the content of the page
    private void GetAllUrls(string content)
    {
        //regular expression
        string pattern = @"(?:href\s*=)(?:[\s""']*)(?.*?)(?:[\s>""'])";

        //Set up regex object
        Regex RegExpr = new Regex(pattern, RegexOptions.IgnoreCase);

        //get the first match
        Match match = RegExpr.Match(content);

        //loop through matches
        while (match.Success)
        {

            //output the match info
            Console.WriteLine("href match: " + match.Groups[0].Value);
            //WriteToLog(@"C:\matchlog.txt", "href match: " + match.Groups[0].Value + "\r\n");

            Console.WriteLine("Url match: " + match.Groups[1].Value);
            //WriteToLog(@"C:\matchlog.txt", "Url | Location | mailto match: " + match.Groups[1].Value + "\r\n");

            //get next match
            match = match.NextMatch();
        }
    }

    //Write to a log file
    //private void WriteToLog(string file, string message)
    //{
    //using (StreamWriter w = File.AppendText(file))
    //{
    //w.WriteLine(DateTime.Now.ToString() + ": " + message); w.Close();
    //}
    //}




    /// <summary>
    /// ////////////////////////
    /// </summary>
    /// <returns></returns>
    /// 

    public ActionResult Index()
    {




        return View();
    }
    //Start Login//
    public ActionResult login()
    {
        // Session["CAPTCHA"] = "111111";// GetRandomText();
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }

    
    public string Login_Form(string EmailId, string password, string ip, string captcha)
    
    {



        var dateTime = DateTime.Now;
        var tt = dateTime.Hour;


        var dayOfWeek = dateTime.DayOfWeek;
        var day = dayOfWeek.ToString();

        //Decrypt("","");
        //70789
        //554e981f4946f37a4818f1cea3928fe3
        //drtushargupta90@gmail.com
        string message = string.Empty;
        string clientCaptcha = captcha;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            ViewBag.CaptchaError = "Sorry, please write exact text as written above.";
            message = "11,11";
            return message;
        }
        else
            if (Session["checkSession"] == null)
        {
            ip = Request.ServerVariables["REMOTE_ADDR"].ToString();

            string pass = Encrypt(password);
            // string decoded = MRPLookup.Decrypt1(HttpUtility.UrlDecode(pass));
            string cond = "email='" + EmailId + "' and password='" + pass + "' and active!=3 ";//and active=1
            DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
            if (dtLogin.Rows.Count > 0)
            {
                if (Convert.ToString(dtLogin.Rows[0]["Regd_Type"]) == "PROV" && dtLogin.Rows.Count == 1)
                {
                    DataTable dt_temp_D = dal.GetList("pisl_temp_registrations", "Regd_ID,Regd_Type,Final_Status,Approved_By,date_approved,type", "email='" + EmailId.Trim() + "' order by ID desc");
                    for (int i = 0; i < dt_temp_D.Rows.Count; i++)
                    {
                        if (Convert.ToString(dt_temp_D.Rows[i]["Regd_Type"]) != "PROV" && Convert.ToString(dt_temp_D.Rows[i]["Final_Status"]) == "Approved" && Convert.ToString(dt_temp_D.Rows[i]["Approved_By"]) != null && Convert.ToString(dt_temp_D.Rows[i]["date_approved"]) != null && Convert.ToString(dt_temp_D.Rows[i]["type"]) != "service")
                        {



                            string colnameWithValue = "Regd_ID=" + Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]) + ",Regd_Type='" + dt_temp_D.Rows[i]["Regd_Type"].ToString() + "'";
                            string conditions = "S_No=" + Convert.ToInt32(dtLogin.Rows[0]["S_No"]) + "";
                            var Update_paymentUpdate = dal.Updation("pisl_users", colnameWithValue, conditions);
                            if (Update_paymentUpdate == 0)
                            {
                                dtLogin.Rows[0]["Regd_ID"] = Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]);
                                dtLogin.Rows[0]["Regd_Type"] = dt_temp_D.Rows[i]["Regd_Type"].ToString();

                            }
                            break;
                        }
                    }
                }


                for (int i = 0; i < dtLogin.Rows.Count; i++)
                {
                    string hash = Convert.ToString(dtLogin.Rows[i]["hash"]);
                    string decryptedstring = Decrypt(pass, hash);

                    string gid = Convert.ToString(dtLogin.Rows[i]["GID"]);
                    //string active = Convert.ToString(dtLogin.Rows[0]["active"]);
                    if (gid == "0")//Login for doctor
                    {
                        //DataTable dt_lastloginRecord = dal.GetList("pisl_users where email='" + EmailId + "' order by S_No desc", "TOP 1 *", "");
                        if (dtLogin != null && dtLogin.Rows.Count > 0)
                        {

                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[i]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[i]["Regd_Type"]);
                            }
                            else
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                            }
                            if (dtLogin.Rows[i]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[i]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }

                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                        }
                        else
                        {
                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[0]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            }
                            if (dtLogin.Rows[0]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }
                        }


                        message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 2;
                    }
                    else if (gid == "1")//Login for internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["isno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 1;
                            }
                            else
                            {
                                message = "0,6";
                            }
                        }

                        else
                        {
                            message = "0,5";
                        }
                    }
                    else if (gid == "2")//Login for admin and internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["asno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 3;
                            }
                            else
                            {
                                message = "0,6";
                            }

                        }
                        else
                        {
                            message = "0,5";
                        }
                    }
                }
            }
            else
            {
                message = "0,0";
            }
        }
        else
        {
            message = "10,10";
        }
        return message;
    }

    public string Encrypt(string password)
    {
        // Decrypt("", "");
        //string password = @"1234abcd";

        // byte array representation of that string
        byte[] encodedPassword = new UTF8Encoding().GetBytes(password);

        // need MD5 to calculate the hash
        byte[] hash = ((HashAlgorithm)CryptoConfig.CreateFromName("MD5")).ComputeHash(encodedPassword);

        // string representation (similar to UNIX format)
        string encoded = BitConverter.ToString(hash)
           // without dashes
           .Replace("-", string.Empty)
           // make lowercase
           .ToLower();
        return encoded;
    }
    public string Decrypt(string password, string hash1)
    {//https://md5decrypt.net/#answer
        string ss = "";
        string source = "zdNot3oAz5I%3DjRspJg78a%2FY%3D";// "Hello World!";
        MD5 md5 = System.Security.Cryptography.MD5.Create();
        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(password);
        byte[] hash = md5.ComputeHash(inputBytes);

        // step 2, convert byte array to hex string
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < hash.Length; i++)
        {
            sb.Append(hash[i].ToString("X2"));
        }
        return sb.ToString();
    }
    static string GetMd5Hash(MD5 md5Hash, string input)
    {

        // Convert the input string to a byte array and compute the hash.
        byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));

        // Create a new Stringbuilder to collect the bytes
        // and create a string.
        StringBuilder sBuilder = new StringBuilder();

        // Loop through each byte of the hashed data 
        // and format each one as a hexadecimal string.
        for (int i = 0; i < data.Length; i++)
        {
            sBuilder.Append(data[i].ToString("x2"));
        }

        // Return the hexadecimal string.
        return sBuilder.ToString();
    }
    public FileResult GetCaptchaImage()
    {
        MemoryStream ms = new MemoryStream();
        if (Session["CAPTCHA"] != null)
        {
            string text = Session["CAPTCHA"].ToString();

            //first, create a dummy bitmap just to get a graphics object
            Image img = new Bitmap(1, 1);
            Graphics drawing = Graphics.FromImage(img);

            Font font = new Font("Jokerman", 15);
            //measure the string to see how big the image needs to be
            SizeF textSize = drawing.MeasureString(text, font);

            //free up the dummy image and old graphics object
            img.Dispose();
            drawing.Dispose();

            //create a new image of the right size
            img = new Bitmap((int)textSize.Width + 40, (int)textSize.Height + 20);
            drawing = Graphics.FromImage(img);

            Color backColor = Color.SeaShell;
            Color textColor = Color.Red;
            //paint the background
            drawing.Clear(backColor);

            //create a brush for the text
            Brush textBrush = new SolidBrush(textColor);

            drawing.DrawString(text, font, textBrush, 20, 10);

            drawing.Save();

            font.Dispose();
            textBrush.Dispose();
            drawing.Dispose();


            img.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
            img.Dispose();

            return File(ms.ToArray(), "image/png");
        }
        else
        {
            return File(ms.ToArray(), "image/png");
        }
    }
    private string GetRandomText()
    {
        StringBuilder randomText = new StringBuilder();
        string alphabets = "12345679ABCEFGHKLMNPRSTUVWXZ";
        Random r = new Random();
        for (int j = 0; j <= 5; j++)
        {
            randomText.Append(alphabets[r.Next(alphabets.Length)]);
        }
        return randomText.ToString();
    }
    //End Login//
    public ActionResult signup()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    [HttpPost]
    public string sendotpsignup(string txt_Email, string txt_ContactNo)
    {
        string msg = "";
        try
        {
            var CheckEmail = IsEmailandMobileExists(txt_Email, "");
            var checkMobile = IsEmailandMobileExists("", txt_ContactNo);
            if (CheckEmail == false && checkMobile == false)
            {

                Session["otp"] = GetRandomText();
                string OTP = Session["otp"].ToString();
                //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
                string mailBody = "Your OTP is: " + OTP + ". DMC";
                MRPLookup.sendMail(txt_Email.Trim(), "DMC | OTP Verification", mailBody, "", "");

                //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
              

                MRPLookup.SendSMS("otp", txt_ContactNo.Trim(), "", "", OTP, "", "", "", "", "", "", "");
                msg = "0";
            }
            else if (CheckEmail == true && checkMobile == true)
            {
                msg = "Email and Mobile no. are already exists!!";
            }
            else
            {
                if (checkMobile == true && CheckEmail == false)
                {
                    msg = "Mobile No. is Already Exists!!";
                }
                else if (CheckEmail == true && checkMobile == false)
                {
                    msg = "Email Address is Already Exists!!";
                }


            }
        }
        catch (Exception ex)
        {
            msg = "1";
        }
        return msg;
    }
    public bool IsEmailandMobileExists(string email, string mobile)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        try
        {
            tableName = "pisl_users";
            colname = "*";
            if (!string.IsNullOrEmpty(email))
            {
                cond = "email='" + email + "'";
            }
            if (!string.IsNullOrEmpty(mobile))
            {
                cond = "mobile='" + mobile + "'";
            }
            //cond=
            DataTable dt_datacheck = dal.GetList(tableName, colname, cond);
            if (dt_datacheck != null && dt_datacheck.Rows.Count > 0)
            {
                IsExists = true;
            }

        }
        catch (Exception ex)
        {
            IsExists = false;
            throw;
        }
        return IsExists;
    }

    public ActionResult IsDocDataExists(string regd_type, string regd_no, string DOB, string PassingYear)
    {
        //List<dynamic> list = new List<dynamic>();
        string message = "";
        try
        {
            var tbl_name = "";

            var userExists = IsRegd_Exists(regd_type, regd_no, DOB, PassingYear, out tbl_name);
            if (userExists == true && tbl_name == "pisl_users")
            {

                message = "Already Registered With us. Please Login With Your Credential";
            }
            else
                if (userExists == true && tbl_name == "pisl_fresh_registration_mst")
            {
                message = "Your Registration No. is Expired. Please SignUp Again.";
            }
            else
            {
                message = "NotExists";
                //message = "Your Registration No. is Not Exists!";
            }
        }
        catch (Exception ex)
        {

        }
        return Json(message, JsonRequestBehavior.AllowGet);
    }
    public bool IsRegd_Exists(string regd_type, string regd_no, string DOB, string PassingYear, out string Tbl_Name)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        Tbl_Name = "";
        DataTable dt_UserCheck = null;
        try
        {
            tableName = "pisl_users";
            colname = "*";
            cond = "Regd_Type='" + regd_type + "' and Regd_ID='" + regd_no.Trim() + "'";
            dt_UserCheck = dal.GetList(tableName, colname, cond);
            if (dt_UserCheck == null || dt_UserCheck.Rows.Count == 0)
            {
                tableName = "pisl_fresh_regi_qual_mst";
                colname = "*";
                cond = "quali_type='Basic Qualification' AND Regd_ID='" + regd_no + "' "
                    + "AND Regd_Type='" + regd_type + "' AND passing_date =  '" + PassingYear.Trim() + "'";
                dt_UserCheck = dal.GetList(tableName, colname, cond);
                if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                {
                    Tbl_Name = "pisl_fresh_regi_qual_mst";

                    tableName = "pisl_fresh_registration_mst";
                    colname = "*";
                    cond = "Regd_ID='" + regd_no + "' AND Regd_Type='" + regd_type + "'";
                    dt_UserCheck = dal.GetList(tableName, colname, cond);
                    if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                    {
                        Tbl_Name = "pisl_fresh_registration_mst";
                        IsExists = true;
                    }
                    else
                    {
                        IsExists = false;
                    }
                }
                else
                {

                    IsExists = false;
                }
            }
            else
            {
                Tbl_Name = "pisl_users";
                IsExists = true;
            }
        }
        catch (Exception ex)
        {


            throw;
        }
        return IsExists;
    }

    [HttpPost]
    public string createsignup(string txt_Email, string txt_ContactNo, string txt_FirstName, string txt_MiddleName,
        string txt_LastName, string txt_Password, string txt_ConfirmPassword, string txt_DOB, bool chk_TermCondition,
        string Captcha, string Regd_ID, string txtOTP, string ddl_regType, string txt_oldData, string passingYear)
    {
        string message = "";
        string dob = lk.convertdate1(txt_DOB);
        string Tbl_Name = "";
        try
        {
            if (!IsEmailandMobileExists(txt_Email, ""))
            {
                if (!IsEmailandMobileExists("", txt_ContactNo))
                {
                    if (ddl_regType == "FRS" || ddl_regType == "RRE")
                    {
                        if (IsRegd_Exists(ddl_regType, Regd_ID, dob, passingYear, out Tbl_Name))
                        {
                            Tbl_Name = Tbl_Name;
                            if (Tbl_Name == "pisl_users")
                            {
                                //if Pisl_user Table Record Exists but no Email and Mobile No exists
                                //in this case update the Email and Mobile No.
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        DataTable dt_Email_Mobile_Check = dal.GetList("pisl_users",
                                                        "top 1*", " Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                        if (dt_Email_Mobile_Check != null)
                                                        {
                                                            if (dt_Email_Mobile_Check.Rows.Count > 0)
                                                            {
                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_Email_Mobile_Check.Rows[0]["email"])))
                                                                {
                                                                    string pass = Encrypt(txt_Password.Trim());
                                                                    string hash = Encrypt(MRPLookup.RandamStringGenerator1());
                                                                    var updateDt = dal.Updation("pisl_users",
                                                                        "email='" + txt_Email.Trim() + "',mobile='" + txt_ContactNo.Trim() + "',password='" + pass + "',hash='" + hash + "'",
                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                    if (updateDt == 0)
                                                                    {
                                                                        DataTable dt_fresh_Check = dal.GetList("pisl_fresh_registration_mst",
                                                                            "top 1 * ",
                                                                            "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                        if (dt_fresh_Check != null)
                                                                        {
                                                                            if (dt_fresh_Check.Rows.Count > 0)
                                                                            {
                                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_fresh_Check.Rows[0]["Email"])))
                                                                                {
                                                                                    var updateDt_fresh = dal.Updation("pisl_fresh_registration_mst",
                                                                                        "Email='" + txt_Email.Trim() + "',Mobile='" + txt_ContactNo.Trim() + "'",
                                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");

                                                                                    if (updateDt_fresh != 0)
                                                                                    {
                                                                                        message = "Error!!";
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                                        MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                                        message = "Please, Check Your Mail For Login Details";
                                                                        //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                                        MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                                    }
                                                                    else
                                                                    {
                                                                        message = "Error!!";
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    message = "Your record are already Exists with us!!";
                                                                }
                                                            }
                                                        } //End Updation
                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }
                            else if (Tbl_Name == "pisl_fresh_regi_qual_mst" || Tbl_Name == "pisl_fresh_registration_mst")
                            {
                                //Insert Login Record in Pisl_Users
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        string pass = Encrypt(txt_Password.Trim());
                                                        string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                        if (string.IsNullOrEmpty(Regd_ID))
                                                        {
                                                            Regd_ID = "0";
                                                        }
                                                        //if (txt_oldData != "")
                                                        //{
                                                        //    string colnamemst = "*";
                                                        //    string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        //    DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        //    if (dtrmst.Rows.Count > 0)
                                                        //    {
                                                        //        string oldtype = "";
                                                        //        if (ddl_regType == "FRS")
                                                        //        {
                                                        //            oldtype = "service";
                                                        //        }
                                                        //        else if (ddl_regType == "RRE")
                                                        //        {
                                                        //            oldtype = "reregi";
                                                        //        }
                                                        //        var corrAddress1 = dtrmst.Rows[0]["Corr_Add_Line_1"].ToString();
                                                        //        var corrAddress2 = dtrmst.Rows[0]["Corr_Add_Line_2"].ToString();
                                                        //        var perAddress1 = dtrmst.Rows[0]["Per_Add_Line_1"].ToString();
                                                        //        var perAddress2 = dtrmst.Rows[0]["Per_Add_Line_2"].ToString();

                                                        //        string colNameold = "Regd_ID,Regd_Type,type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,date_entered,Father_Name,POB,Gender,Nationality,Corr_Add_Line_1,Corr_Add_Line_2,Corr_Add_State,Corr_Add_Pincode,Corr_Add_Country,Per_Add_Line_1,Per_Add_Line_2,Per_Add_Line_State,Per_Add_Line_Pincode,Per_Add_Line_Country";

                                                        //        string colValueold = "'" + Regd_ID + "','" + ddl_regType + "','" + oldtype + "','" + txt_FirstName + "','" + txt_MiddleName + "','"  + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "', '"+ lk.GetDateTime()+ "' ,'"+ dtrmst.Rows[0]["Father_Name"] + "','" + dtrmst.Rows[0]["POB"] + "','" + dtrmst.Rows[0]["Gender"] + "','" + dtrmst.Rows[0]["Nationality"] + "','" + corrAddress1 + "','" + corrAddress2 + "','" + dtrmst.Rows[0]["Corr_Add_State"] + "','" + dtrmst.Rows[0]["Corr_Add_Pincode"] + "','" + dtrmst.Rows[0]["Corr_Add_Country"] + "','" + perAddress1 + "','" + perAddress2 + "','" + dtrmst.Rows[0]["Per_Add_Line_State"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Pincode"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Country"] + "'";
                                                        //        int insold = dal.insertion("pisl_temp_registrations", colNameold, colValueold);
                                                        //    }
                                                        //}
                                                        Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                        string colnamemst = "*";
                                                        string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        DateTime txtdob1 = Convert.ToDateTime(dtrmst.Rows[0]["DOB"]);
                                                        string txtdob = txtdob1.ToShortDateString();

                                                        string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                            + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                        string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + dtrmst.Rows[0]["First_Name"].ToString() + "','" + dtrmst.Rows[0]["Middle_Name"].ToString() + "',"
                                                            + "'" + dtrmst.Rows[0]["Last_Name"].ToString() + "','" + txtdob + "','" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                            + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                        int ins = dal.insertion("pisl_users", colName, colValue);
                                                        if (ins == 0)
                                                        {
                                                            string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                            MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                            message = "Please, Check Your Mail For Login Details";
                                                            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                            MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                        }
                                                        else
                                                        {
                                                            message = "Try after some time";
                                                        }

                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }

                        }
                        else
                        {
                            message = "Your Registration No and Passing Year is Not Exist with Us";
                        }
                    }
                    else
                    {
                        //Insert Login Record in Pisl_Users
                        if (chk_TermCondition == true)
                        {
                            if (txtOTP == Session["otp"].ToString())
                            {
                                if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                {
                                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                    Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                    if (foundMatch == true)
                                    {
                                        if (txt_Password == txt_ConfirmPassword)
                                        {
                                            if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                            {
                                                //if (Tbl_Name== "pisl_users") { }
                                                string pass = Encrypt(txt_Password.Trim());
                                                string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                if (string.IsNullOrEmpty(Regd_ID))
                                                {
                                                    Regd_ID = "0";
                                                }
                                                Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                if (ddl_regType == "-1")
                                                {
                                                    ddl_regType = "";
                                                }


                                                string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                    + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                int ins = dal.insertion("pisl_users", colName, colValue);
                                                if (ins == 0)
                                                {
                                                    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                    message = "Please, Check Your Mail";
                                                    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                }
                                                else
                                                {
                                                    message = "Try after some time";
                                                }

                                                //string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                //    + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                //string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                //    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                //    + "1,0,0,'"+ lk.GetDateTime()+ "','','" + Regd_ID1 + "'";
                                                //int ins = dal.insertion("pisl_users", colName, colValue);
                                                //if (ins == 0)
                                                //{
                                                //    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                //    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                //    message = "Please, Check Your Mail";
                                                //    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                //    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                //}
                                                //else
                                                //{
                                                //    message = "Try after some time";
                                                //}
                                            }
                                            else
                                            {
                                                message = "Enter A Valid Email";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password and Confrim Password is Not Same";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                    }
                                }
                                else
                                {
                                    message = "Password Length must between 8 to 18 letters";
                                }
                            }
                            else
                            {
                                message = "Enter the Valid OTP";
                            }
                        }
                        else
                        {
                            message = "Please check the Terms and Conditions";
                        }

                        //}
                    }
                }
                else
                {
                    message = "Mobile No. is Already Exists";
                }
            }
            else
            {
                message = "Email Already exists!!";
            }
            //
            //Cut the Code From There

        }
        catch
        {

        }
        return message;
    }

    public ActionResult SignupVerification()
    {
        string message = "";
        try
        {
            if (Request.QueryString["email"] != null && Request.QueryString["hash"] != null)
            {
                string email = Request.QueryString["email"];
                string hash = Request.QueryString["hash"];
                string cond = "Email='" + email.Trim() + "' and Hash='" + hash.Trim() + "' and Active=0";
                DataTable dt = dal.GetList("pisl_users", "*", cond);
                if (dt.Rows.Count > 0)
                {
                    int upd = dal.Updation("pisl_users", "Active=1", cond);
                    if (upd == 0)
                    {
                        message = "Your account has been activated, you can now login";
                    }
                    else
                    {
                        message = "Try after some time";
                    }
                }
                else
                {
                    message = "The url is either invalid or you already have activated your account.";
                }
            }
            else
            {
                message = "Invalid approach, please use the link that has been send to your email.";
            }
        }
        catch
        { }
        ViewBag.lbl_status = message;
        return View();
    }
    public ActionResult contact()
    {
        return View();
    }

    public ActionResult about()
    {
        return View();
    }
    public ActionResult faqs()
    {
        return View();
    }
    // Start forgot password
    public ActionResult forgotpassword()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public string sendCode(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        string message = string.Empty;
        try
        {
            string clientCaptcha = CaptchaCaseID;
            string serverCaptcha = Session["CAPTCHA"].ToString();
            if (!clientCaptcha.Equals(serverCaptcha))
            {
                ViewBag.ShowCAPTCHA = serverCaptcha;
                message = "Sorry, please write exact text as written below.";
            }
            else
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' ";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string name = Convert.ToString(dt.Rows[0]["First_Name"]);
                                        string Mobile = Convert.ToString(dt.Rows[0]["Mobile"]);

                                        MailFormat mf = new MailFormat();
                                        string code = MRPLookup.RandamStringGenerator1();
                                        string mailBody = mf.SendCodeOnMail(name, code);
                                        MRPLookup.SendSMS("otp", Mobile, "", "", code, "", "", "", "", "", "", "");
                                        string colValue = "Code='" + code.Trim() + "'";
                                        int updCode = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "'");
                                        if (updCode == 0)
                                        {
                                            string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(), "Reset Password Code " + System.DateTime.Now + "", mailBody, "", "");
                                            if (sendmailStatus != "Technical issue! Please try agiain")
                                            {
                                                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

                                            }
                                            else
                                            {
                                                message = sendmailStatus;
                                            }
                                        }
                                        else
                                        {
                                            message = "Please try after some time.";
                                        }

                                    }
                                    else
                                    {
                                        message = "Enter a New Password.";
                                    }
                                }
                                else
                                {
                                    message = "Your Email And Mobile Number Do not Match with DMC Registered Users.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
        }
        catch (Exception ex)
        {

        }
        return message;
    }
    public string forgotpasswordCaseID(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact text as written below.";
            // return message;
        }
        else
        {
            if (txtCode != "0")
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string mobile = Convert.ToString(dt.Rows[0]["Mobile"]);
                                    string firstName = Convert.ToString(dt.Rows[0]["First_Name"]);
                                    string lastName = Convert.ToString(dt.Rows[0]["Last_Name"]);
                                    //string new_password = Encrypt(MRPLookup.RandamStringGenerator1());
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string colValue = "password='" + new_PasswordMD5.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                                        updPassword = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                        if (updPassword == 0)
                                        {
                                            updPassword = dal.Updation("pisl_users", "Code='0'", "Email='" + txtEmail.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                            string hostName = Dns.GetHostName();
                                            string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                            string colName = "activity,email,password,ip,system,description,date";
                                            colValue = "'Change Passs','" + txtEmail + "','" + txtPassword + "','" + IP + "','" + mobile + "','" + new_PasswordMD5 + "',getdate()";
                                            int ins = dal.insertion("tbl_activity", colName, colValue);
                                            message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                            MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                                            // Send SMS and mail for password reset.
                                            

                                        }
                                        else
                                        {
                                            message = "Please try after some time";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please try another password.";
                                    }

                                }
                                else
                                {
                                    message = "Your Details Dont Match or You have NOT registered with DMC.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
            else
            {
                message = "Code not match";
            }
        }
        return message;
    }

    public ActionResult introduction()
    {
        return View();
    }

    public ActionResult powers()
    {
        return View();
    }

    public ActionResult thecouncil()
    {
        return View();
    }

    //public ActionResult gallery()
    //{
    //    return View();
    //}
    public ActionResult Gallery()
    {
        return View();
    }

    public ActionResult accomplishments()
    {
        return View();
    }

    public ActionResult registration()
    {
        return View();
    }
    public ActionResult cmeperforma()
    {
        return View();
    }
    public ActionResult cmeonline()
    {
        return View();
    }
    public ActionResult cmerequirements()
    {
        return View();
    }
    public ActionResult cmepassbook()
    {
        return View();
    }
    public ActionResult duties()
    {
        return View();
    }
    public ActionResult inst_general()
    {
        return View();
    }

    public ActionResult inst_fees()
    {
        return View();
    }
    public ActionResult inst_docupload()
    {
        return View();
    }
    public ActionResult disclaimer()
    {
        return View();
    }
    public ActionResult feestructure()
    {
        return View();
    }
    public ActionResult privacypolicy()
    {
        return View();
    }
    public ActionResult termofuse()
    {
        return View();
    }

    public ActionResult litigations()
    {
        return View();
    }


    public ActionResult council_meeting()
    {
        return View();
    }
    public ActionResult Cme_workshop_Conference()
    {
        return View();
    }

    public ActionResult Media_room()
    {
        return View();
    }
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    public ActionResult LogOut()
    {
        Session.Abandon();
        return RedirectToAction("Index", "Home");
    }
    public ActionResult SearchElectrolData(string regid)
    {
        string msg = "";
        DataTable dtSearch = dal.GetList("tbl_electrolData", "*", "RegNo='" + regid.Trim() + "'");
        if (dtSearch.Rows.Count > 0)
        {
            return Json(MRPLookup.DataTableToJSONWithJSONNet(dtSearch), JsonRequestBehavior.AllowGet);
        }
        else
        {
            msg = "Data not found";
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
    }
    public ActionResult SearchElectrolDataUpdate(string regid)
    {
        int upd = 1;
        upd = dal.Updation("tbl_electrolData", "Status='Completed',Date='" + lk.GetDateTime() + "'", "ID='" + regid.Trim() + "'");
        if (upd == 0)
        {

            return Json(upd, JsonRequestBehavior.AllowGet);
        }
        else
        {
            return Json(upd, JsonRequestBehavior.AllowGet);
        }
    }

    public ActionResult TotalCount()
    {
        DataTable dtcntCompleted = dal.GetList("tbl_electrolData", "count(*) as cntCompleted", "status='Completed'");
        DataTable dtcntNotCompleted = dal.GetList("tbl_electrolData", "count(*) as cntNotCompleted", "status ='Valid'");
        string totalCmpleteStatus = "Completed: " + Convert.ToString(dtcntCompleted.Rows[0]["cntCompleted"]) + "  Not Completed: " + Convert.ToString(dtcntNotCompleted.Rows[0]["cntNotCompleted"]);
        return Json(totalCmpleteStatus, JsonRequestBehavior.AllowGet);
    }
    public ActionResult Renewal_Reminder(string key)
    {
        string msg = "";
        try
        {

            key = "1111";
            string validKey = "1111";
            // MRPLookup.SendSMS("Renewal_expired_tdy", "9899849487", "Dinesh", "", "", "", "", "", "", "", "", "");
            if (key == validKey)
            {
                string expiry_frtyfive = Convert.ToDateTime(DateTime.Now.AddDays(30)).ToString("yyyy-MM-dd");//date(('Y-m-d'), strtotime('+30 days'));
                string expiry_tdy = Convert.ToDateTime(DateTime.Now).ToString("yyyy-MM-dd");//date('Y-m-d');
                string expiry_pastfifty = Convert.ToDateTime(DateTime.Now.AddDays(-50)).ToString("yyyy-MM-dd");// date(('Y-m-d'), strtotime('-50 days'));
                string cond = "(Expiry_Date = '" + expiry_frtyfive + "' OR  Expiry_Date = '" + expiry_tdy + "' OR Expiry_Date = '" + expiry_pastfifty + " ') AND (Mobile !='' OR  Email !='')";
                //DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", cond);
                string strConnString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                SqlConnection con = new SqlConnection(strConnString);
                //SqlConnection con = new SqlConnection(@"Data Source=103.20.212.254,1232;Initial Catalog=dmcaws_New;User Id=sa;Password=bD$x89K3$@K9UaQsKQ");
                //SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-PKTADCN;Initial Catalog=dmcaws1;integrated security=true");
                con.Open();
                SqlCommand cmd = new SqlCommand("select * from pisl_fresh_registration_mst where " + cond + "", con);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                con.Close();
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string First_Name = Convert.ToString(dt.Rows[i]["First_Name"]);
                        string Last_Name = Convert.ToString(dt.Rows[i]["Last_Name"]);
                        string Regd_ID = Convert.ToString(dt.Rows[i]["Regd_ID"]);
                        string Regd_Type = Convert.ToString(dt.Rows[i]["Regd_Type"]);
                        string Mobile = Convert.ToString(dt.Rows[i]["Mobile"]);
                        string Expiry_Date = Convert.ToDateTime(dt.Rows[i]["Expiry_Date"]).ToString("yyyy-MM-dd");
                        string date_approved = Convert.ToDateTime(dt.Rows[i]["date_approved"]).ToString("yyyy-MM-dd");
                        string tdydate = Convert.ToDateTime(System.DateTime.Now).ToString("yyyy-MM-dd");
                        string to = Convert.ToString(dt.Rows[i]["Email"]);

                        string subject1 = "Renewal of Registration with Delhi Medical Council"; //// Give the email a subject
                        string subject2 = "Expiry of Registration with Delhi Medical Council";
                        string subject3 = "Deletion of Regd Number with Delhi Medical Council";
                        string message1 = "";
                        message1 += "Dear Dr " + First_Name + " " + Last_Name + ",";
                        message1 += "Greetings from Delhi Medical Council!!";

                        message1 += "   This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council is due for renewal.";
                        message1 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting ";
                        message1 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message1 += "For inclusion of any additional qualification, please produce the original degree at the office of Delhi Medical Council, so that your additional ";
                        message1 += "qualification certificate can be verified with the original document. The original degree / diploma Certificate will be returned immediately after verification. ";

                        message1 += "<b>This is a system generated email and we request you not to reply to this email. Please ignore if already applied.</b>";

                        message1 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message1 += "Warm Regards,";

                        message1 += "Delhi Medical Council.";
                        message1 += "Ground Floor, B Wing, B Block-1";
                        message1 += "DMCR IT Park, Shastri Park";
                        message1 += "New Delhi-110053";
                        message1 += "Tel: +91-011-46621000";
                        message1 += "Website - www.delhimedicalcouncil.org	 ";

                        string message2 = "";
                        message2 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message2 += "Greetings from Delhi Medical Council!!";

                        message2 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council expired on " + Expiry_Date + " and  is due for renewal. ";

                        message2 += "We request you to kindly renew your registration within thirty days and keep your registration in force. You can renew your registration online by visiting ";
                        message2 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message2 += "Please take note that in case you do not apply for renewal of registration within the stipulated period, your name shall be removed from the State Medical ";
                        message2 += "Register maintained by the Delhi Medical Council in accordance with the provisions of Section 22 of the Delhi Medical Council Act, 1997 which will debar";
                        message2 += "you from practicing Allopathic in the state of Delhi.";

                        message2 += "<b>Kindly ignore this email, in case you have already applied for renewal of registration</b>";

                        message2 += "This is a system generated email and we request you not to reply to this email.";

                        message2 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message2 += "Warm Regards,";

                        message2 += "Delhi Medical Council.";
                        message2 += "Ground Floor, B Wing, B Block-1";
                        message2 += "DMCR IT Park, Shastri Park";
                        message2 += "New Delhi-110053";
                        message2 += "Tel: +91-011-46621000";
                        message2 += "Website - www.delhimedicalcouncil.org";

                        string message3 = "";
                        message3 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message3 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council has expired on " + Expiry_Date + ". You ";
                        message3 += "failed to renew the registration with Delhi Medical Council, in spite of notices/Emails (public / individual) issued for renewal. Hence, in accordance with the ";
                        message3 += "provisions of section 22(3) of Delhi Medical Council Act, 1997; your name under Registration number " + Regd_ID + "-" + Regd_Type + "  has been removed from the State ";
                        message3 += "Medical Register of Delhi Medical Council.";

                        message3 += "Please note that if you wish to have your name re-entered in the State Medical Register of Delhi Medical Council, you may do so, by paying fees as detailed herein below,";
                        message3 += "in addition to fee for renewal of registration (Rs. 2000/-)";

                        message3 += "Late fees for non-renewal of registration:-";
                        message3 += "(a) upto six months from the date from 		Rs. 1000/- (Rupees One Thousand only)";
                        message3 += "    which registration is due for renewal";
                        message3 += "(b) for period more than six months 	    Rs. 2000/- (Rupees One Thousand only)";
                        message3 += "     but upto one year";
                        message3 += "(c) for period more than one year 			Rs. 1000/- (Rupees One Thousand per year and Part thereof)";

                        message3 += "Please also note that any person servicing or practicing modern scientific system of medicine (allopathy) in Delhi without holding valid registration with Delhi Medical Council is liable for action under the provisions of Delhi Medical Council Act, 1997.";
                        message3 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting www.delhimedicalcouncil.org and apply under Online Renewal & Services.";

                        message3 += "<b>Kindly ignore this letter, in case you have already applied for renewal of registration</b>";

                        message3 += "This is a system generated email and we request you not to reply to this email.";

                        message3 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message3 += "Warm Regards,";

                        message3 += "Delhi Medical Council.";
                        message3 += "Ground Floor, B Wing, B Block-1";
                        message3 += "DMCR IT Park, Shastri Park";
                        message3 += "New Delhi-110053";
                        message3 += "Tel: +91-011-46621000";
                        message3 += "Website - www.delhimedicalcouncil.org,";

                        string headers = "From: DMC Registration System <registration@delhimedicalcouncil.org>' . '\r\n'"; // Set from headers

                        string message = "";
                        string subject = "";
                        string trigger = "";
                        string msgtxt = "";
                        if (Convert.ToDateTime(Expiry_Date) > Convert.ToDateTime(tdydate))
                        {
                            message = message1;
                            subject = subject1;
                            trigger = "Renewal_due_reminder";
                            msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Renewal of your DMC Regd No " + Regd_ID + " - " + Regd_Type + " is due. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }

                        }
                        else if (Convert.ToDateTime(Expiry_Date) == Convert.ToDateTime(tdydate))
                        {
                            message = message2;
                            subject = subject2;
                            trigger = "Renewal_expired_tdy";
                            // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Registration of DMC Regd No " + Regd_ID + " - " + Regd_Type + " expired today. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }
                        }
                        //else if (Convert.ToDateTime(Expiry_Date) < Convert.ToDateTime(tdydate))
                        //{
                        //    message = message2;
                        //    subject = subject2;
                        //    trigger = "Renewal_expired_fifty";
                        //   // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Your  ID " + Regd_ID + " - " + Regd_Type + " has been removed from the State Medical Register of DMC . Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                        //    if (!string.IsNullOrEmpty(to))
                        //    {
                        //       // MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //    if (!string.IsNullOrEmpty(Mobile))
                        //    {
                        //       // MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(to))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(Mobile))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}

                    }
                }

            }
            else
            {
                msg = "Key not match";
                string path = "C:\\TestService\\ServiceLog.txt";
                using (StreamWriter writer = new StreamWriter(path, true))
                {
                    writer.WriteLine(string.Format(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt"), DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt")));
                    writer.Close();
                }
            }
        }
        catch
        {

        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult certverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["cert"];
            string Regd_type = "";
            string regd_id = "";

            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["cert"]);
            var splitedString = decodedstr.Split('-');
            Regd_type = splitedString[0];
            regd_id = splitedString[1];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            switch (Regd_type)
            {
                case "RRE":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "FRS":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "PROV":
                    db = "pisl_prov_registration_mst";
                    qual_db = "pisl_prov_regi_qual_mst";
                    break;

                default:
                    Message = "This certificate cannnot be verified";
                    break;

            }

            var check_namechange = dal.GetList("tbl_NameChangeHistory_New", "CaseID,Name=(case when (New_MiddleName is null or  New_MiddleName='') then New_FirstName+' '+New_LastName when (New_MiddleName is null or  New_MiddleName='') and (New_LastName is null or New_LastName='') then New_FirstName else New_FirstName+' '+New_MiddleName+' '+New_LastName end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_namechange.Rows.Count > 0)
            {
                string CaseID = check_namechange.Rows[0]["CaseID"].ToString();
                ViewBag.Name = check_namechange.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                if (check_Doctordata.Rows.Count > 0)
                {
                    string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
                    ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                    DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                    DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                    DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                    ViewBag.qual = dt_qual;
                    ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                    ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                    Message = "success";
                }
                else
                {
                    Message = "This Entry Cannot be Verified";
                }
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;

        return View();
    }
    public ActionResult VeryfyCertificate(string value)
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        var qstring = value;
        var decodedStr = MRPLookup.Decrypt1(qstring);
        var splitedString = decodedStr.Split('-');
        var Regd_type = splitedString[0];
        var regd_id = splitedString[1];
        var db = "";
        var qual_db = "";
        //string regdtype=
        switch (Regd_type)
        {
            case "RRE":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "FRS":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "PROV":
                db = "pisl_prov_registration_mst";
                qual_db = "pisl_prov_regi_qual_mst";
                break;

            default:
                Message = "This certificate cannnot be verified";
                break;

        }
        var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
        if (check_Doctordata.Rows.Count > 0)
        {
            string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
            DataTable dt_Documents = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
            DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign' ");

        }
        else
        {
            Message = "This Entry Cannot be Verified";
        }
        return Json("", JsonRequestBehavior.AllowGet);
    }
    public ActionResult letterverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["letter"];
            string Regd_type = "";
            string regd_id = "";
            string ID = "";
            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["letter"]);
            var splitedString = decodedstr.Split('-');
            ID = splitedString[0];
            Regd_type = splitedString[1];
            regd_id = splitedString[2];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            //switch ()
            //{
            //    case "RRE":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "FRS":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "PROV":
            //        db = "pisl_prov_registration_mst";
            //        qual_db = "pisl_prov_regi_qual_mst";
            //        break;

            //    default:
            //        Message = "This certificate cannnot be verified";
            //        break;

            //}
            var letter_type = "";
            var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,date_approved,drg_from,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "ID='" + ID + "' and Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_Doctordata.Rows.Count > 0)
            {
                switch (check_Doctordata.Rows[0]["drg_from"].ToString())
                {
                    case "noc":
                        letter_type = "No Objection Certificate";
                        break;

                    case "gdst":
                        letter_type = "Good Standing Certificate";
                        break;
                }
                ViewBag.lettertype = letter_type;
                ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("pisl_fresh_regi_qual_mst", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='Sign'");
                if (!string.IsNullOrEmpty(check_Doctordata.Rows[0]["date_approved"].ToString()))
                {
                    ViewBag.DateApproved = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).ToString("dd MMMM,yyyy");
                    ViewBag.expiry = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).AddDays(-1).AddMonths(6).ToString("dd MMMM, yyyy");
                }
                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(ID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                Message = "This Entry Cannot be Verified";
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;
        return View();
    }
    public ActionResult Regi_search()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public ActionResult search_ur_dr()
    {

        return View();
    }
    public ActionResult regi_search_submit(string Regid, string Types)
    {
        try
        {


            string regid = Request.QueryString["Regd_ID"];
            string type = Request.QueryString["Type"]; ;
            //string type = frm["type"].Trim();
            //string regid = frm["regid"].Trim();
            string colname = "*";
            string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "' ORDER BY S_No DESC";
            DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
            if (dt.Rows.Count > 0)
            {
                DateTime ddob = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                DateTime dapproved = Convert.ToDateTime(dt.Rows[0]["date_approved"].ToString());
                DateTime dexpiry = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                ViewBag.dateapproved = dapproved.ToShortDateString();
                ViewBag.expirydate = dexpiry.ToShortDateString();
                ViewBag.dob = ddob.ToShortDateString();
                ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


                DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
                if (result_remarks.Rows.Count > 0)
                {
                    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    {
                        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    }
                }
                DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
                if (qualificationdt.Rows.Count > 0)
                {
                    ViewBag.qualdata = qualificationdt;
                }

            }
            return View();
        }
        catch (Exception ex)
        {
            return View();
        }
    }
    public ActionResult regi_search_submits(FormCollection frm)
    {

        string clientCaptcha = frm["CL_CAPCHA"].ToString();
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;

            return Json("-1");
        }
        string msg = "";
        //string type = Regd_ID;
        //string regid = Type;
        string type = frm["type"].Trim();
        string regid = frm["regid"].Trim();
        string colname = "*";
        string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
        if (dt.Rows.Count > 0)
        {
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
            if (result_remarks.Rows.Count > 0)
            {
                for (int i = 0; i < result_remarks.Rows.Count; i++)
                {
                    ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                }
            }
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult search_ur_dr_submit(FormCollection frm)
    {
        try
        {



            string First_Name = Request.QueryString["First_Name"];
            string Last_Name = frm["Last_Name"];
            string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
            string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
            string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
            string Mobile = Request.QueryString["Mobile"];
            string Email = Request.QueryString["Email"];

            if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Last_Name) && !string.IsNullOrEmpty(Corr_Add_Line_1) && !string.IsNullOrEmpty(Corr_Add_Line_2) && !string.IsNullOrEmpty(Corr_Add_Pincode) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Mobile='" + Mobile + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}

                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "Email='" + Email + "' and Mobile='" + Mobile + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }


            return View();
        }
        catch (Exception ex)
        {
            return View();

        }
    }


    public ActionResult search_ur_dr_submit2(FormCollection frm)
    {
        string msg = "";
        string First_Name = frm["First_Name"];
        string Last_Name = frm["Last_Name"];
        string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
        string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
        string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
        string Mobile = frm["Mobile"];
        string Email = frm["Email"];

        string condtions = "First_Name='" + First_Name.Trim() + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
        if (dt.Rows.Count > 0)
        {
            //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
            //if (result_remarks.Rows.Count > 0)
            //{
            //    for (int i = 0; i < result_remarks.Rows.Count; i++)
            //    {
            //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
            //    }
            //}
            string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", condtions2);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        else
        {
            msg = "Not Data Found";
        }


        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult cme()
    {
        return View();
    }
    public ActionResult status_comp2021()
    {
        return View();
    }

    public ActionResult ForgetEmailPasswordProv()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public dynamic getForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB)
    {
        //select pu.First_Name,pu.Last_Name,pu.email,pu.Mobile from pisl_users as pu inner join pisl_prov_regi_qual_mst as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type where pu.Regd_ID = 18430 and pu.DOB = '1991-10-26' and pfq.passing_date = 2016 and pfq.quali_course = 'M.B.B.S.'
        List<dynamic> OBJ = new List<dynamic>();
        string dob = lk.convertdate1(txt_DOB);
        try
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else {
                db = "pisl_fresh_regi_qual_mst";
            }

            DataTable dt1 = dal.GetList("pisl_users as pu inner join "+db+" as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType.ToUpper() + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                OBJ.Add(MRPLookup.Convert_DatatableToList(dt1).ToList());
                return Json(OBJ, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        catch (Exception)
        {

            return null;
        }
        
    }

    public string otpForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail)
    {
        string message = string.Empty;
        string dob = lk.convertdate1(txt_DOB);
        string db = "";
        if (txtRegType.ToUpper() == "PROV")
        {
            db = "pisl_prov_regi_qual_mst";
        }
        else
        {
            db = "pisl_fresh_regi_qual_mst";
        }
        DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
        if (dt1.Rows.Count > 0)
        {
            MailFormat mf = new MailFormat();
            string code = MRPLookup.RandamStringGenerator1();
            Session["provotp"] = code;
            string mailBody = "Your OTP is: " + code + ". DMC";
            string sendmailStatus= MRPLookup.sendMail(txtEmail.Trim(), "DMC | OTP Verification", mailBody, "", "");


            //string mailBody = mf.SendCodeOnMail(dt1.Rows[0]["First_Name"].ToString(), code);
            //string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(),"Reset Password Code" + System.DateTime.Now + "", mailBody, "", "");
            if (sendmailStatus != "Technical issue! Please try agiain")
            {
                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

            }
            else
            {
                message = sendmailStatus;
            }


            return message;
        }
        return "Some thing went wrong...!";
    }

    public string submitForgetEmailPasswordProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail, string txtMobileNo,string CaptchaCaseID,string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (Session["provotp"].ToString()!=txtCode)
        {
            return "Otp incorrect";
        }

        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact Captcha as written below.";
            // return message;
        }
        else
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else
            {
                db = "pisl_fresh_regi_qual_mst";
            }
            string dob = lk.convertdate1(txt_DOB);
            DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile,pu.Regd_ID,pu.Regd_Type", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                if (Convert.ToString(dt1.Rows[0]["Regd_ID"]) != "" && Convert.ToString(dt1.Rows[0]["Regd_Type"]) != "")
                {
                      string colValue = "Email='" + txtEmail.Trim() + "',Mobile='" + txtMobileNo.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                      updPassword = dal.Updation("pisl_users", colValue, "Regd_ID='"+dt1.Rows[0]["Regd_ID"].ToString()+ "' and Regd_Type='"+ dt1.Rows[0]["Regd_Type"].ToString() + "'");
               
                   
                     var tblCurrentStatuscolomns = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                     var Currentupdatestatuss = dal.Updation("pisl_temp_registrations", tblCurrentStatuscolomns, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");

                    var tblCurrentStatuscolomns1 = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                    var Currentupdatestatuss1 = dal.Updation("pisl_fresh_registration_mst", tblCurrentStatuscolomns1, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");



                    message = "Your Email and Mobile Changed successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                    //MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                   // Send SMS and mail for password reset.
                }
                else
                {
                    message = "Please try after some time";
                }
            }
            else
            {
                message = "Data Not found..!";
            }
        }
        return message;
    }
    public string sendOTP(string EmailId)
    {
        string message = "";
        string cond = "email='" + EmailId + "'";
        DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
        if (dtLogin.Rows.Count > 0)
        {
            string mobile = dtLogin.Rows[0]["Mobile"].ToString();
            Session["otp"] = GetRandomText();
            string OTP = Session["otp"].ToString();
            //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
            string mailBody = "Your OTP is: " + OTP + ". DMC";
            MRPLookup.sendMail(EmailId.Trim(), "DMC | OTP Verification", mailBody, "", "");
            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
            MRPLookup.SendSMS("otp", mobile.Trim(), "", "", OTP, "", "", "", "", "", "", "");
            message = "Please check your email or Mobile for OTP";
        }
        else
        {
            message = "Email not found, Please enter a valid email";
        }
        return message;
    }

    public ActionResult ChangePassward(FormCollection frm)
    {
        string Result = "";
        if (frm["txtOTP"].ToString() == Session["OTP"].ToString())
        {
            if (frm["txt_password"].Length >= 8 && frm["txt_password"].Length <= 18)
            {
                Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                Boolean foundMatch = regexObj.IsMatch(frm["txt_password"]);
                if (foundMatch == true)
                {
                    string where = "email='" + frm["txt_email"] + "'";// and Mobile='"+ frm["txt_contactno"] + "'";
                    DataTable dt_dr_details = dal.GetList("pisl_users", "*", where);
                    if (dt_dr_details != null)
                    {
                        if (dt_dr_details.Rows.Count > 0)
                        {
                            string pass = Encrypt(frm["txt_password"].Trim());
                            string col = " password='" + pass + "'";
                            var update = dal.Updation("pisl_users", col, "email='" + dt_dr_details.Rows[0]["email"].ToString() + "'");
                            if (update == 0)
                            {
                                string hostName = Dns.GetHostName();
                                string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                string colName = "activity,email,password,ip,system,description,date";
                                string colValue = "'Change Passs','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + frm["txt_password"].ToString().Trim() + "','" + IP + "','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + pass + "',getdate()";
                                int ins = dal.insertion("tbl_activity", colName, colValue);
                                string message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                MRPLookup.SendSMS("forgot_pwd", dt_dr_details.Rows[0]["Mobile"].ToString(), dt_dr_details.Rows[0]["First_Name"].ToString(), dt_dr_details.Rows[0]["Last_Name"].ToString(), "", "", dt_dr_details.Rows[0]["email"].ToString(), frm["txt_password"].ToString().Trim(), "", "", "", "");
                                Result = "0";
                            }
                            else
                            {
                                Result = "Somthing wrong Error !";
                            }
                        }
                        else
                        {
                            Result = "This is not registered email please check.";
                        }
                    }
                }
                else
                {
                    Result = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                }
            }
            else
            {
                Result = "Password Length must between 8 to 18 letters";
            }
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
    public ActionResult verifyOTP(string otp)
    {
        string Result = "";
        if (otp == Session["otp"].ToString())
        {
            Result = "DONE";
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
}
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using DelhimedicalcouncilORG;
using System.Data;
using System.Security.Cryptography;
using System.Text;
using System.IO;
using System.Drawing;
using System.Net;
using System.Net.Mail;

using System.Text.RegularExpressions;
using System.Data.SqlClient;
using System.Configuration;

namespace DelhimedicalcouncilORG.Controllers
{
public class homeController : Controller
{
    // GET: home
    DAL dal = new DAL();
    MRPLookup lk = new MRPLookup();
    MailFormat mf = new MailFormat();


    private string RetrieveContent(string webPage)
    {
        HttpWebResponse response = null;//used to get response
        StreamReader respStream = null;//used to read response into string
        try
        {
            //create a request object using the url passed in
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(webPage);
            request.Timeout = 10000;

            //go get a response from the page
            response = (HttpWebResponse)request.GetResponse();

            //create a streamreader object from the response
            respStream = new StreamReader(response.GetResponseStream());

            //get the contents of the page as a string and return it
            return respStream.ReadToEnd();
        }
        catch (Exception ex)//houston we have a problem!
        {
            throw ex;
        }
        finally
        {
            //close it down, we’re going home!
            response.Close();
            respStream.Close();
        }
    }

    //using a regular expression, find all of the href or urls
    //in the content of the page
    private void GetAllUrls(string content)
    {
        //regular expression
        string pattern = @"(?:href\s*=)(?:[\s""']*)(?.*?)(?:[\s>""'])";

        //Set up regex object
        Regex RegExpr = new Regex(pattern, RegexOptions.IgnoreCase);

        //get the first match
        Match match = RegExpr.Match(content);

        //loop through matches
        while (match.Success)
        {

            //output the match info
            Console.WriteLine("href match: " + match.Groups[0].Value);
            //WriteToLog(@"C:\matchlog.txt", "href match: " + match.Groups[0].Value + "\r\n");

            Console.WriteLine("Url match: " + match.Groups[1].Value);
            //WriteToLog(@"C:\matchlog.txt", "Url | Location | mailto match: " + match.Groups[1].Value + "\r\n");

            //get next match
            match = match.NextMatch();
        }
    }

    //Write to a log file
    //private void WriteToLog(string file, string message)
    //{
    //using (StreamWriter w = File.AppendText(file))
    //{
    //w.WriteLine(DateTime.Now.ToString() + ": " + message); w.Close();
    //}
    //}




    /// <summary>
    /// ////////////////////////
    /// </summary>
    /// <returns></returns>
    /// 

    public ActionResult Index()
    {




        return View();
    }
    //Start Login//
    public ActionResult login()
    {
        // Session["CAPTCHA"] = "111111";// GetRandomText();
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }

    
    public string Login_Form(string EmailId, string password, string ip, string captcha)
    
    {



        var dateTime = DateTime.Now;
        var tt = dateTime.Hour;


        var dayOfWeek = dateTime.DayOfWeek;
        var day = dayOfWeek.ToString();

        //Decrypt("","");
        //70789
        //554e981f4946f37a4818f1cea3928fe3
        //drtushargupta90@gmail.com
        string message = string.Empty;
        string clientCaptcha = captcha;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            ViewBag.CaptchaError = "Sorry, please write exact text as written above.";
            message = "11,11";
            return message;
        }
        else
            if (Session["checkSession"] == null)
        {
            ip = Request.ServerVariables["REMOTE_ADDR"].ToString();

            string pass = Encrypt(password);
            // string decoded = MRPLookup.Decrypt1(HttpUtility.UrlDecode(pass));
            string cond = "email='" + EmailId + "' and password='" + pass + "' and active!=3 ";//and active=1
            DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
            if (dtLogin.Rows.Count > 0)
            {
                if (Convert.ToString(dtLogin.Rows[0]["Regd_Type"]) == "PROV" && dtLogin.Rows.Count == 1)
                {
                    DataTable dt_temp_D = dal.GetList("pisl_temp_registrations", "Regd_ID,Regd_Type,Final_Status,Approved_By,date_approved,type", "email='" + EmailId.Trim() + "' order by ID desc");
                    for (int i = 0; i < dt_temp_D.Rows.Count; i++)
                    {
                        if (Convert.ToString(dt_temp_D.Rows[i]["Regd_Type"]) != "PROV" && Convert.ToString(dt_temp_D.Rows[i]["Final_Status"]) == "Approved" && Convert.ToString(dt_temp_D.Rows[i]["Approved_By"]) != null && Convert.ToString(dt_temp_D.Rows[i]["date_approved"]) != null && Convert.ToString(dt_temp_D.Rows[i]["type"]) != "service")
                        {



                            string colnameWithValue = "Regd_ID=" + Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]) + ",Regd_Type='" + dt_temp_D.Rows[i]["Regd_Type"].ToString() + "'";
                            string conditions = "S_No=" + Convert.ToInt32(dtLogin.Rows[0]["S_No"]) + "";
                            var Update_paymentUpdate = dal.Updation("pisl_users", colnameWithValue, conditions);
                            if (Update_paymentUpdate == 0)
                            {
                                dtLogin.Rows[0]["Regd_ID"] = Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]);
                                dtLogin.Rows[0]["Regd_Type"] = dt_temp_D.Rows[i]["Regd_Type"].ToString();

                            }
                            break;
                        }
                    }
                }


                for (int i = 0; i < dtLogin.Rows.Count; i++)
                {
                    string hash = Convert.ToString(dtLogin.Rows[i]["hash"]);
                    string decryptedstring = Decrypt(pass, hash);

                    string gid = Convert.ToString(dtLogin.Rows[i]["GID"]);
                    //string active = Convert.ToString(dtLogin.Rows[0]["active"]);
                    if (gid == "0")//Login for doctor
                    {
                        //DataTable dt_lastloginRecord = dal.GetList("pisl_users where email='" + EmailId + "' order by S_No desc", "TOP 1 *", "");
                        if (dtLogin != null && dtLogin.Rows.Count > 0)
                        {

                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[i]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[i]["Regd_Type"]);
                            }
                            else
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                            }
                            if (dtLogin.Rows[i]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[i]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }

                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                        }
                        else
                        {
                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[0]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            }
                            if (dtLogin.Rows[0]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }
                        }


                        message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 2;
                    }
                    else if (gid == "1")//Login for internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["isno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 1;
                            }
                            else
                            {
                                message = "0,6";
                            }
                        }

                        else
                        {
                            message = "0,5";
                        }
                    }
                    else if (gid == "2")//Login for admin and internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["asno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 3;
                            }
                            else
                            {
                                message = "0,6";
                            }

                        }
                        else
                        {
                            message = "0,5";
                        }
                    }
                }
            }
            else
            {
                message = "0,0";
            }
        }
        else
        {
            message = "10,10";
        }
        return message;
    }

    public string Encrypt(string password)
    {
        // Decrypt("", "");
        //string password = @"1234abcd";

        // byte array representation of that string
        byte[] encodedPassword = new UTF8Encoding().GetBytes(password);

        // need MD5 to calculate the hash
        byte[] hash = ((HashAlgorithm)CryptoConfig.CreateFromName("MD5")).ComputeHash(encodedPassword);

        // string representation (similar to UNIX format)
        string encoded = BitConverter.ToString(hash)
           // without dashes
           .Replace("-", string.Empty)
           // make lowercase
           .ToLower();
        return encoded;
    }
    public string Decrypt(string password, string hash1)
    {//https://md5decrypt.net/#answer
        string ss = "";
        string source = "zdNot3oAz5I%3DjRspJg78a%2FY%3D";// "Hello World!";
        MD5 md5 = System.Security.Cryptography.MD5.Create();
        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(password);
        byte[] hash = md5.ComputeHash(inputBytes);

        // step 2, convert byte array to hex string
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < hash.Length; i++)
        {
            sb.Append(hash[i].ToString("X2"));
        }
        return sb.ToString();
    }
    static string GetMd5Hash(MD5 md5Hash, string input)
    {

        // Convert the input string to a byte array and compute the hash.
        byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));

        // Create a new Stringbuilder to collect the bytes
        // and create a string.
        StringBuilder sBuilder = new StringBuilder();

        // Loop through each byte of the hashed data 
        // and format each one as a hexadecimal string.
        for (int i = 0; i < data.Length; i++)
        {
            sBuilder.Append(data[i].ToString("x2"));
        }

        // Return the hexadecimal string.
        return sBuilder.ToString();
    }
    public FileResult GetCaptchaImage()
    {
        MemoryStream ms = new MemoryStream();
        if (Session["CAPTCHA"] != null)
        {
            string text = Session["CAPTCHA"].ToString();

            //first, create a dummy bitmap just to get a graphics object
            Image img = new Bitmap(1, 1);
            Graphics drawing = Graphics.FromImage(img);

            Font font = new Font("Jokerman", 15);
            //measure the string to see how big the image needs to be
            SizeF textSize = drawing.MeasureString(text, font);

            //free up the dummy image and old graphics object
            img.Dispose();
            drawing.Dispose();

            //create a new image of the right size
            img = new Bitmap((int)textSize.Width + 40, (int)textSize.Height + 20);
            drawing = Graphics.FromImage(img);

            Color backColor = Color.SeaShell;
            Color textColor = Color.Red;
            //paint the background
            drawing.Clear(backColor);

            //create a brush for the text
            Brush textBrush = new SolidBrush(textColor);

            drawing.DrawString(text, font, textBrush, 20, 10);

            drawing.Save();

            font.Dispose();
            textBrush.Dispose();
            drawing.Dispose();


            img.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
            img.Dispose();

            return File(ms.ToArray(), "image/png");
        }
        else
        {
            return File(ms.ToArray(), "image/png");
        }
    }
    private string GetRandomText()
    {
        StringBuilder randomText = new StringBuilder();
        string alphabets = "12345679ABCEFGHKLMNPRSTUVWXZ";
        Random r = new Random();
        for (int j = 0; j <= 5; j++)
        {
            randomText.Append(alphabets[r.Next(alphabets.Length)]);
        }
        return randomText.ToString();
    }
    //End Login//
    public ActionResult signup()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    [HttpPost]
    public string sendotpsignup(string txt_Email, string txt_ContactNo)
    {
        string msg = "";
        try
        {
            var CheckEmail = IsEmailandMobileExists(txt_Email, "");
            var checkMobile = IsEmailandMobileExists("", txt_ContactNo);
            if (CheckEmail == false && checkMobile == false)
            {

                Session["otp"] = GetRandomText();
                string OTP = Session["otp"].ToString();
                //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
                string mailBody = "Your OTP is: " + OTP + ". DMC";
                MRPLookup.sendMail(txt_Email.Trim(), "DMC | OTP Verification", mailBody, "", "");

                //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
              

                MRPLookup.SendSMS("otp", txt_ContactNo.Trim(), "", "", OTP, "", "", "", "", "", "", "");
                msg = "0";
            }
            else if (CheckEmail == true && checkMobile == true)
            {
                msg = "Email and Mobile no. are already exists!!";
            }
            else
            {
                if (checkMobile == true && CheckEmail == false)
                {
                    msg = "Mobile No. is Already Exists!!";
                }
                else if (CheckEmail == true && checkMobile == false)
                {
                    msg = "Email Address is Already Exists!!";
                }


            }
        }
        catch (Exception ex)
        {
            msg = "1";
        }
        return msg;
    }
    public bool IsEmailandMobileExists(string email, string mobile)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        try
        {
            tableName = "pisl_users";
            colname = "*";
            if (!string.IsNullOrEmpty(email))
            {
                cond = "email='" + email + "'";
            }
            if (!string.IsNullOrEmpty(mobile))
            {
                cond = "mobile='" + mobile + "'";
            }
            //cond=
            DataTable dt_datacheck = dal.GetList(tableName, colname, cond);
            if (dt_datacheck != null && dt_datacheck.Rows.Count > 0)
            {
                IsExists = true;
            }

        }
        catch (Exception ex)
        {
            IsExists = false;
            throw;
        }
        return IsExists;
    }

    public ActionResult IsDocDataExists(string regd_type, string regd_no, string DOB, string PassingYear)
    {
        //List<dynamic> list = new List<dynamic>();
        string message = "";
        try
        {
            var tbl_name = "";

            var userExists = IsRegd_Exists(regd_type, regd_no, DOB, PassingYear, out tbl_name);
            if (userExists == true && tbl_name == "pisl_users")
            {

                message = "Already Registered With us. Please Login With Your Credential";
            }
            else
                if (userExists == true && tbl_name == "pisl_fresh_registration_mst")
            {
                message = "Your Registration No. is Expired. Please SignUp Again.";
            }
            else
            {
                message = "NotExists";
                //message = "Your Registration No. is Not Exists!";
            }
        }
        catch (Exception ex)
        {

        }
        return Json(message, JsonRequestBehavior.AllowGet);
    }
    public bool IsRegd_Exists(string regd_type, string regd_no, string DOB, string PassingYear, out string Tbl_Name)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        Tbl_Name = "";
        DataTable dt_UserCheck = null;
        try
        {
            tableName = "pisl_users";
            colname = "*";
            cond = "Regd_Type='" + regd_type + "' and Regd_ID='" + regd_no.Trim() + "'";
            dt_UserCheck = dal.GetList(tableName, colname, cond);
            if (dt_UserCheck == null || dt_UserCheck.Rows.Count == 0)
            {
                tableName = "pisl_fresh_regi_qual_mst";
                colname = "*";
                cond = "quali_type='Basic Qualification' AND Regd_ID='" + regd_no + "' "
                    + "AND Regd_Type='" + regd_type + "' AND passing_date =  '" + PassingYear.Trim() + "'";
                dt_UserCheck = dal.GetList(tableName, colname, cond);
                if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                {
                    Tbl_Name = "pisl_fresh_regi_qual_mst";

                    tableName = "pisl_fresh_registration_mst";
                    colname = "*";
                    cond = "Regd_ID='" + regd_no + "' AND Regd_Type='" + regd_type + "'";
                    dt_UserCheck = dal.GetList(tableName, colname, cond);
                    if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                    {
                        Tbl_Name = "pisl_fresh_registration_mst";
                        IsExists = true;
                    }
                    else
                    {
                        IsExists = false;
                    }
                }
                else
                {

                    IsExists = false;
                }
            }
            else
            {
                Tbl_Name = "pisl_users";
                IsExists = true;
            }
        }
        catch (Exception ex)
        {


            throw;
        }
        return IsExists;
    }

    [HttpPost]
    public string createsignup(string txt_Email, string txt_ContactNo, string txt_FirstName, string txt_MiddleName,
        string txt_LastName, string txt_Password, string txt_ConfirmPassword, string txt_DOB, bool chk_TermCondition,
        string Captcha, string Regd_ID, string txtOTP, string ddl_regType, string txt_oldData, string passingYear)
    {
        string message = "";
        string dob = lk.convertdate1(txt_DOB);
        string Tbl_Name = "";
        try
        {
            if (!IsEmailandMobileExists(txt_Email, ""))
            {
                if (!IsEmailandMobileExists("", txt_ContactNo))
                {
                    if (ddl_regType == "FRS" || ddl_regType == "RRE")
                    {
                        if (IsRegd_Exists(ddl_regType, Regd_ID, dob, passingYear, out Tbl_Name))
                        {
                            Tbl_Name = Tbl_Name;
                            if (Tbl_Name == "pisl_users")
                            {
                                //if Pisl_user Table Record Exists but no Email and Mobile No exists
                                //in this case update the Email and Mobile No.
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        DataTable dt_Email_Mobile_Check = dal.GetList("pisl_users",
                                                        "top 1*", " Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                        if (dt_Email_Mobile_Check != null)
                                                        {
                                                            if (dt_Email_Mobile_Check.Rows.Count > 0)
                                                            {
                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_Email_Mobile_Check.Rows[0]["email"])))
                                                                {
                                                                    string pass = Encrypt(txt_Password.Trim());
                                                                    string hash = Encrypt(MRPLookup.RandamStringGenerator1());
                                                                    var updateDt = dal.Updation("pisl_users",
                                                                        "email='" + txt_Email.Trim() + "',mobile='" + txt_ContactNo.Trim() + "',password='" + pass + "',hash='" + hash + "'",
                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                    if (updateDt == 0)
                                                                    {
                                                                        DataTable dt_fresh_Check = dal.GetList("pisl_fresh_registration_mst",
                                                                            "top 1 * ",
                                                                            "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                        if (dt_fresh_Check != null)
                                                                        {
                                                                            if (dt_fresh_Check.Rows.Count > 0)
                                                                            {
                                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_fresh_Check.Rows[0]["Email"])))
                                                                                {
                                                                                    var updateDt_fresh = dal.Updation("pisl_fresh_registration_mst",
                                                                                        "Email='" + txt_Email.Trim() + "',Mobile='" + txt_ContactNo.Trim() + "'",
                                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");

                                                                                    if (updateDt_fresh != 0)
                                                                                    {
                                                                                        message = "Error!!";
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                                        MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                                        message = "Please, Check Your Mail For Login Details";
                                                                        //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                                        MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                                    }
                                                                    else
                                                                    {
                                                                        message = "Error!!";
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    message = "Your record are already Exists with us!!";
                                                                }
                                                            }
                                                        } //End Updation
                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }
                            else if (Tbl_Name == "pisl_fresh_regi_qual_mst" || Tbl_Name == "pisl_fresh_registration_mst")
                            {
                                //Insert Login Record in Pisl_Users
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        string pass = Encrypt(txt_Password.Trim());
                                                        string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                        if (string.IsNullOrEmpty(Regd_ID))
                                                        {
                                                            Regd_ID = "0";
                                                        }
                                                        //if (txt_oldData != "")
                                                        //{
                                                        //    string colnamemst = "*";
                                                        //    string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        //    DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        //    if (dtrmst.Rows.Count > 0)
                                                        //    {
                                                        //        string oldtype = "";
                                                        //        if (ddl_regType == "FRS")
                                                        //        {
                                                        //            oldtype = "service";
                                                        //        }
                                                        //        else if (ddl_regType == "RRE")
                                                        //        {
                                                        //            oldtype = "reregi";
                                                        //        }
                                                        //        var corrAddress1 = dtrmst.Rows[0]["Corr_Add_Line_1"].ToString();
                                                        //        var corrAddress2 = dtrmst.Rows[0]["Corr_Add_Line_2"].ToString();
                                                        //        var perAddress1 = dtrmst.Rows[0]["Per_Add_Line_1"].ToString();
                                                        //        var perAddress2 = dtrmst.Rows[0]["Per_Add_Line_2"].ToString();

                                                        //        string colNameold = "Regd_ID,Regd_Type,type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,date_entered,Father_Name,POB,Gender,Nationality,Corr_Add_Line_1,Corr_Add_Line_2,Corr_Add_State,Corr_Add_Pincode,Corr_Add_Country,Per_Add_Line_1,Per_Add_Line_2,Per_Add_Line_State,Per_Add_Line_Pincode,Per_Add_Line_Country";

                                                        //        string colValueold = "'" + Regd_ID + "','" + ddl_regType + "','" + oldtype + "','" + txt_FirstName + "','" + txt_MiddleName + "','"  + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "', '"+ lk.GetDateTime()+ "' ,'"+ dtrmst.Rows[0]["Father_Name"] + "','" + dtrmst.Rows[0]["POB"] + "','" + dtrmst.Rows[0]["Gender"] + "','" + dtrmst.Rows[0]["Nationality"] + "','" + corrAddress1 + "','" + corrAddress2 + "','" + dtrmst.Rows[0]["Corr_Add_State"] + "','" + dtrmst.Rows[0]["Corr_Add_Pincode"] + "','" + dtrmst.Rows[0]["Corr_Add_Country"] + "','" + perAddress1 + "','" + perAddress2 + "','" + dtrmst.Rows[0]["Per_Add_Line_State"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Pincode"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Country"] + "'";
                                                        //        int insold = dal.insertion("pisl_temp_registrations", colNameold, colValueold);
                                                        //    }
                                                        //}
                                                        Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                        string colnamemst = "*";
                                                        string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        DateTime txtdob1 = Convert.ToDateTime(dtrmst.Rows[0]["DOB"]);
                                                        string txtdob = txtdob1.ToShortDateString();

                                                        string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                            + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                        string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + dtrmst.Rows[0]["First_Name"].ToString() + "','" + dtrmst.Rows[0]["Middle_Name"].ToString() + "',"
                                                            + "'" + dtrmst.Rows[0]["Last_Name"].ToString() + "','" + txtdob + "','" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                            + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                        int ins = dal.insertion("pisl_users", colName, colValue);
                                                        if (ins == 0)
                                                        {
                                                            string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                            MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                            message = "Please, Check Your Mail For Login Details";
                                                            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                            MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                        }
                                                        else
                                                        {
                                                            message = "Try after some time";
                                                        }

                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }

                        }
                        else
                        {
                            message = "Your Registration No and Passing Year is Not Exist with Us";
                        }
                    }
                    else
                    {
                        //Insert Login Record in Pisl_Users
                        if (chk_TermCondition == true)
                        {
                            if (txtOTP == Session["otp"].ToString())
                            {
                                if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                {
                                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                    Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                    if (foundMatch == true)
                                    {
                                        if (txt_Password == txt_ConfirmPassword)
                                        {
                                            if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                            {
                                                //if (Tbl_Name== "pisl_users") { }
                                                string pass = Encrypt(txt_Password.Trim());
                                                string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                if (string.IsNullOrEmpty(Regd_ID))
                                                {
                                                    Regd_ID = "0";
                                                }
                                                Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                if (ddl_regType == "-1")
                                                {
                                                    ddl_regType = "";
                                                }


                                                string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                    + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                int ins = dal.insertion("pisl_users", colName, colValue);
                                                if (ins == 0)
                                                {
                                                    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                    message = "Please, Check Your Mail";
                                                    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                }
                                                else
                                                {
                                                    message = "Try after some time";
                                                }

                                                //string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                //    + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                //string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                //    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                //    + "1,0,0,'"+ lk.GetDateTime()+ "','','" + Regd_ID1 + "'";
                                                //int ins = dal.insertion("pisl_users", colName, colValue);
                                                //if (ins == 0)
                                                //{
                                                //    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                //    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                //    message = "Please, Check Your Mail";
                                                //    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                //    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                //}
                                                //else
                                                //{
                                                //    message = "Try after some time";
                                                //}
                                            }
                                            else
                                            {
                                                message = "Enter A Valid Email";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password and Confrim Password is Not Same";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                    }
                                }
                                else
                                {
                                    message = "Password Length must between 8 to 18 letters";
                                }
                            }
                            else
                            {
                                message = "Enter the Valid OTP";
                            }
                        }
                        else
                        {
                            message = "Please check the Terms and Conditions";
                        }

                        //}
                    }
                }
                else
                {
                    message = "Mobile No. is Already Exists";
                }
            }
            else
            {
                message = "Email Already exists!!";
            }
            //
            //Cut the Code From There

        }
        catch
        {

        }
        return message;
    }

    public ActionResult SignupVerification()
    {
        string message = "";
        try
        {
            if (Request.QueryString["email"] != null && Request.QueryString["hash"] != null)
            {
                string email = Request.QueryString["email"];
                string hash = Request.QueryString["hash"];
                string cond = "Email='" + email.Trim() + "' and Hash='" + hash.Trim() + "' and Active=0";
                DataTable dt = dal.GetList("pisl_users", "*", cond);
                if (dt.Rows.Count > 0)
                {
                    int upd = dal.Updation("pisl_users", "Active=1", cond);
                    if (upd == 0)
                    {
                        message = "Your account has been activated, you can now login";
                    }
                    else
                    {
                        message = "Try after some time";
                    }
                }
                else
                {
                    message = "The url is either invalid or you already have activated your account.";
                }
            }
            else
            {
                message = "Invalid approach, please use the link that has been send to your email.";
            }
        }
        catch
        { }
        ViewBag.lbl_status = message;
        return View();
    }
    public ActionResult contact()
    {
        return View();
    }

    public ActionResult about()
    {
        return View();
    }
    public ActionResult faqs()
    {
        return View();
    }
    // Start forgot password
    public ActionResult forgotpassword()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public string sendCode(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        string message = string.Empty;
        try
        {
            string clientCaptcha = CaptchaCaseID;
            string serverCaptcha = Session["CAPTCHA"].ToString();
            if (!clientCaptcha.Equals(serverCaptcha))
            {
                ViewBag.ShowCAPTCHA = serverCaptcha;
                message = "Sorry, please write exact text as written below.";
            }
            else
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' ";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string name = Convert.ToString(dt.Rows[0]["First_Name"]);
                                        string Mobile = Convert.ToString(dt.Rows[0]["Mobile"]);

                                        MailFormat mf = new MailFormat();
                                        string code = MRPLookup.RandamStringGenerator1();
                                        string mailBody = mf.SendCodeOnMail(name, code);
                                        MRPLookup.SendSMS("otp", Mobile, "", "", code, "", "", "", "", "", "", "");
                                        string colValue = "Code='" + code.Trim() + "'";
                                        int updCode = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "'");
                                        if (updCode == 0)
                                        {
                                            string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(), "Reset Password Code " + System.DateTime.Now + "", mailBody, "", "");
                                            if (sendmailStatus != "Technical issue! Please try agiain")
                                            {
                                                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

                                            }
                                            else
                                            {
                                                message = sendmailStatus;
                                            }
                                        }
                                        else
                                        {
                                            message = "Please try after some time.";
                                        }

                                    }
                                    else
                                    {
                                        message = "Enter a New Password.";
                                    }
                                }
                                else
                                {
                                    message = "Your Email And Mobile Number Do not Match with DMC Registered Users.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
        }
        catch (Exception ex)
        {

        }
        return message;
    }
    public string forgotpasswordCaseID(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact text as written below.";
            // return message;
        }
        else
        {
            if (txtCode != "0")
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string mobile = Convert.ToString(dt.Rows[0]["Mobile"]);
                                    string firstName = Convert.ToString(dt.Rows[0]["First_Name"]);
                                    string lastName = Convert.ToString(dt.Rows[0]["Last_Name"]);
                                    //string new_password = Encrypt(MRPLookup.RandamStringGenerator1());
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string colValue = "password='" + new_PasswordMD5.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                                        updPassword = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                        if (updPassword == 0)
                                        {
                                            updPassword = dal.Updation("pisl_users", "Code='0'", "Email='" + txtEmail.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                            string hostName = Dns.GetHostName();
                                            string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                            string colName = "activity,email,password,ip,system,description,date";
                                            colValue = "'Change Passs','" + txtEmail + "','" + txtPassword + "','" + IP + "','" + mobile + "','" + new_PasswordMD5 + "',getdate()";
                                            int ins = dal.insertion("tbl_activity", colName, colValue);
                                            message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                            MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                                            // Send SMS and mail for password reset.
                                            

                                        }
                                        else
                                        {
                                            message = "Please try after some time";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please try another password.";
                                    }

                                }
                                else
                                {
                                    message = "Your Details Dont Match or You have NOT registered with DMC.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
            else
            {
                message = "Code not match";
            }
        }
        return message;
    }

    public ActionResult introduction()
    {
        return View();
    }

    public ActionResult powers()
    {
        return View();
    }

    public ActionResult thecouncil()
    {
        return View();
    }

    //public ActionResult gallery()
    //{
    //    return View();
    //}
    public ActionResult Gallery()
    {
        return View();
    }

    public ActionResult accomplishments()
    {
        return View();
    }

    public ActionResult registration()
    {
        return View();
    }
    public ActionResult cmeperforma()
    {
        return View();
    }
    public ActionResult cmeonline()
    {
        return View();
    }
    public ActionResult cmerequirements()
    {
        return View();
    }
    public ActionResult cmepassbook()
    {
        return View();
    }
    public ActionResult duties()
    {
        return View();
    }
    public ActionResult inst_general()
    {
        return View();
    }

    public ActionResult inst_fees()
    {
        return View();
    }
    public ActionResult inst_docupload()
    {
        return View();
    }
    public ActionResult disclaimer()
    {
        return View();
    }
    public ActionResult feestructure()
    {
        return View();
    }
    public ActionResult privacypolicy()
    {
        return View();
    }
    public ActionResult termofuse()
    {
        return View();
    }

    public ActionResult litigations()
    {
        return View();
    }


    public ActionResult council_meeting()
    {
        return View();
    }
    public ActionResult Cme_workshop_Conference()
    {
        return View();
    }

    public ActionResult Media_room()
    {
        return View();
    }
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    public ActionResult LogOut()
    {
        Session.Abandon();
        return RedirectToAction("Index", "Home");
    }
    public ActionResult SearchElectrolData(string regid)
    {
        string msg = "";
        DataTable dtSearch = dal.GetList("tbl_electrolData", "*", "RegNo='" + regid.Trim() + "'");
        if (dtSearch.Rows.Count > 0)
        {
            return Json(MRPLookup.DataTableToJSONWithJSONNet(dtSearch), JsonRequestBehavior.AllowGet);
        }
        else
        {
            msg = "Data not found";
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
    }
    public ActionResult SearchElectrolDataUpdate(string regid)
    {
        int upd = 1;
        upd = dal.Updation("tbl_electrolData", "Status='Completed',Date='" + lk.GetDateTime() + "'", "ID='" + regid.Trim() + "'");
        if (upd == 0)
        {

            return Json(upd, JsonRequestBehavior.AllowGet);
        }
        else
        {
            return Json(upd, JsonRequestBehavior.AllowGet);
        }
    }

    public ActionResult TotalCount()
    {
        DataTable dtcntCompleted = dal.GetList("tbl_electrolData", "count(*) as cntCompleted", "status='Completed'");
        DataTable dtcntNotCompleted = dal.GetList("tbl_electrolData", "count(*) as cntNotCompleted", "status ='Valid'");
        string totalCmpleteStatus = "Completed: " + Convert.ToString(dtcntCompleted.Rows[0]["cntCompleted"]) + "  Not Completed: " + Convert.ToString(dtcntNotCompleted.Rows[0]["cntNotCompleted"]);
        return Json(totalCmpleteStatus, JsonRequestBehavior.AllowGet);
    }
    public ActionResult Renewal_Reminder(string key)
    {
        string msg = "";
        try
        {

            key = "1111";
            string validKey = "1111";
            // MRPLookup.SendSMS("Renewal_expired_tdy", "9899849487", "Dinesh", "", "", "", "", "", "", "", "", "");
            if (key == validKey)
            {
                string expiry_frtyfive = Convert.ToDateTime(DateTime.Now.AddDays(30)).ToString("yyyy-MM-dd");//date(('Y-m-d'), strtotime('+30 days'));
                string expiry_tdy = Convert.ToDateTime(DateTime.Now).ToString("yyyy-MM-dd");//date('Y-m-d');
                string expiry_pastfifty = Convert.ToDateTime(DateTime.Now.AddDays(-50)).ToString("yyyy-MM-dd");// date(('Y-m-d'), strtotime('-50 days'));
                string cond = "(Expiry_Date = '" + expiry_frtyfive + "' OR  Expiry_Date = '" + expiry_tdy + "' OR Expiry_Date = '" + expiry_pastfifty + " ') AND (Mobile !='' OR  Email !='')";
                //DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", cond);
                string strConnString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                SqlConnection con = new SqlConnection(strConnString);
                //SqlConnection con = new SqlConnection(@"Data Source=103.20.212.254,1232;Initial Catalog=dmcaws_New;User Id=sa;Password=bD$x89K3$@K9UaQsKQ");
                //SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-PKTADCN;Initial Catalog=dmcaws1;integrated security=true");
                con.Open();
                SqlCommand cmd = new SqlCommand("select * from pisl_fresh_registration_mst where " + cond + "", con);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                con.Close();
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string First_Name = Convert.ToString(dt.Rows[i]["First_Name"]);
                        string Last_Name = Convert.ToString(dt.Rows[i]["Last_Name"]);
                        string Regd_ID = Convert.ToString(dt.Rows[i]["Regd_ID"]);
                        string Regd_Type = Convert.ToString(dt.Rows[i]["Regd_Type"]);
                        string Mobile = Convert.ToString(dt.Rows[i]["Mobile"]);
                        string Expiry_Date = Convert.ToDateTime(dt.Rows[i]["Expiry_Date"]).ToString("yyyy-MM-dd");
                        string date_approved = Convert.ToDateTime(dt.Rows[i]["date_approved"]).ToString("yyyy-MM-dd");
                        string tdydate = Convert.ToDateTime(System.DateTime.Now).ToString("yyyy-MM-dd");
                        string to = Convert.ToString(dt.Rows[i]["Email"]);

                        string subject1 = "Renewal of Registration with Delhi Medical Council"; //// Give the email a subject
                        string subject2 = "Expiry of Registration with Delhi Medical Council";
                        string subject3 = "Deletion of Regd Number with Delhi Medical Council";
                        string message1 = "";
                        message1 += "Dear Dr " + First_Name + " " + Last_Name + ",";
                        message1 += "Greetings from Delhi Medical Council!!";

                        message1 += "   This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council is due for renewal.";
                        message1 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting ";
                        message1 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message1 += "For inclusion of any additional qualification, please produce the original degree at the office of Delhi Medical Council, so that your additional ";
                        message1 += "qualification certificate can be verified with the original document. The original degree / diploma Certificate will be returned immediately after verification. ";

                        message1 += "<b>This is a system generated email and we request you not to reply to this email. Please ignore if already applied.</b>";

                        message1 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message1 += "Warm Regards,";

                        message1 += "Delhi Medical Council.";
                        message1 += "Ground Floor, B Wing, B Block-1";
                        message1 += "DMCR IT Park, Shastri Park";
                        message1 += "New Delhi-110053";
                        message1 += "Tel: +91-011-46621000";
                        message1 += "Website - www.delhimedicalcouncil.org	 ";

                        string message2 = "";
                        message2 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message2 += "Greetings from Delhi Medical Council!!";

                        message2 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council expired on " + Expiry_Date + " and  is due for renewal. ";

                        message2 += "We request you to kindly renew your registration within thirty days and keep your registration in force. You can renew your registration online by visiting ";
                        message2 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message2 += "Please take note that in case you do not apply for renewal of registration within the stipulated period, your name shall be removed from the State Medical ";
                        message2 += "Register maintained by the Delhi Medical Council in accordance with the provisions of Section 22 of the Delhi Medical Council Act, 1997 which will debar";
                        message2 += "you from practicing Allopathic in the state of Delhi.";

                        message2 += "<b>Kindly ignore this email, in case you have already applied for renewal of registration</b>";

                        message2 += "This is a system generated email and we request you not to reply to this email.";

                        message2 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message2 += "Warm Regards,";

                        message2 += "Delhi Medical Council.";
                        message2 += "Ground Floor, B Wing, B Block-1";
                        message2 += "DMCR IT Park, Shastri Park";
                        message2 += "New Delhi-110053";
                        message2 += "Tel: +91-011-46621000";
                        message2 += "Website - www.delhimedicalcouncil.org";

                        string message3 = "";
                        message3 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message3 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council has expired on " + Expiry_Date + ". You ";
                        message3 += "failed to renew the registration with Delhi Medical Council, in spite of notices/Emails (public / individual) issued for renewal. Hence, in accordance with the ";
                        message3 += "provisions of section 22(3) of Delhi Medical Council Act, 1997; your name under Registration number " + Regd_ID + "-" + Regd_Type + "  has been removed from the State ";
                        message3 += "Medical Register of Delhi Medical Council.";

                        message3 += "Please note that if you wish to have your name re-entered in the State Medical Register of Delhi Medical Council, you may do so, by paying fees as detailed herein below,";
                        message3 += "in addition to fee for renewal of registration (Rs. 2000/-)";

                        message3 += "Late fees for non-renewal of registration:-";
                        message3 += "(a) upto six months from the date from 		Rs. 1000/- (Rupees One Thousand only)";
                        message3 += "    which registration is due for renewal";
                        message3 += "(b) for period more than six months 	    Rs. 2000/- (Rupees One Thousand only)";
                        message3 += "     but upto one year";
                        message3 += "(c) for period more than one year 			Rs. 1000/- (Rupees One Thousand per year and Part thereof)";

                        message3 += "Please also note that any person servicing or practicing modern scientific system of medicine (allopathy) in Delhi without holding valid registration with Delhi Medical Council is liable for action under the provisions of Delhi Medical Council Act, 1997.";
                        message3 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting www.delhimedicalcouncil.org and apply under Online Renewal & Services.";

                        message3 += "<b>Kindly ignore this letter, in case you have already applied for renewal of registration</b>";

                        message3 += "This is a system generated email and we request you not to reply to this email.";

                        message3 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message3 += "Warm Regards,";

                        message3 += "Delhi Medical Council.";
                        message3 += "Ground Floor, B Wing, B Block-1";
                        message3 += "DMCR IT Park, Shastri Park";
                        message3 += "New Delhi-110053";
                        message3 += "Tel: +91-011-46621000";
                        message3 += "Website - www.delhimedicalcouncil.org,";

                        string headers = "From: DMC Registration System <registration@delhimedicalcouncil.org>' . '\r\n'"; // Set from headers

                        string message = "";
                        string subject = "";
                        string trigger = "";
                        string msgtxt = "";
                        if (Convert.ToDateTime(Expiry_Date) > Convert.ToDateTime(tdydate))
                        {
                            message = message1;
                            subject = subject1;
                            trigger = "Renewal_due_reminder";
                            msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Renewal of your DMC Regd No " + Regd_ID + " - " + Regd_Type + " is due. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }

                        }
                        else if (Convert.ToDateTime(Expiry_Date) == Convert.ToDateTime(tdydate))
                        {
                            message = message2;
                            subject = subject2;
                            trigger = "Renewal_expired_tdy";
                            // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Registration of DMC Regd No " + Regd_ID + " - " + Regd_Type + " expired today. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }
                        }
                        //else if (Convert.ToDateTime(Expiry_Date) < Convert.ToDateTime(tdydate))
                        //{
                        //    message = message2;
                        //    subject = subject2;
                        //    trigger = "Renewal_expired_fifty";
                        //   // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Your  ID " + Regd_ID + " - " + Regd_Type + " has been removed from the State Medical Register of DMC . Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                        //    if (!string.IsNullOrEmpty(to))
                        //    {
                        //       // MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //    if (!string.IsNullOrEmpty(Mobile))
                        //    {
                        //       // MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(to))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(Mobile))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}

                    }
                }

            }
            else
            {
                msg = "Key not match";
                string path = "C:\\TestService\\ServiceLog.txt";
                using (StreamWriter writer = new StreamWriter(path, true))
                {
                    writer.WriteLine(string.Format(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt"), DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt")));
                    writer.Close();
                }
            }
        }
        catch
        {

        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult certverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["cert"];
            string Regd_type = "";
            string regd_id = "";

            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["cert"]);
            var splitedString = decodedstr.Split('-');
            Regd_type = splitedString[0];
            regd_id = splitedString[1];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            switch (Regd_type)
            {
                case "RRE":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "FRS":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "PROV":
                    db = "pisl_prov_registration_mst";
                    qual_db = "pisl_prov_regi_qual_mst";
                    break;

                default:
                    Message = "This certificate cannnot be verified";
                    break;

            }

            var check_namechange = dal.GetList("tbl_NameChangeHistory_New", "CaseID,Name=(case when (New_MiddleName is null or  New_MiddleName='') then New_FirstName+' '+New_LastName when (New_MiddleName is null or  New_MiddleName='') and (New_LastName is null or New_LastName='') then New_FirstName else New_FirstName+' '+New_MiddleName+' '+New_LastName end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_namechange.Rows.Count > 0)
            {
                string CaseID = check_namechange.Rows[0]["CaseID"].ToString();
                ViewBag.Name = check_namechange.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                if (check_Doctordata.Rows.Count > 0)
                {
                    string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
                    ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                    DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                    DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                    DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                    ViewBag.qual = dt_qual;
                    ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                    ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                    Message = "success";
                }
                else
                {
                    Message = "This Entry Cannot be Verified";
                }
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;

        return View();
    }
    public ActionResult VeryfyCertificate(string value)
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        var qstring = value;
        var decodedStr = MRPLookup.Decrypt1(qstring);
        var splitedString = decodedStr.Split('-');
        var Regd_type = splitedString[0];
        var regd_id = splitedString[1];
        var db = "";
        var qual_db = "";
        //string regdtype=
        switch (Regd_type)
        {
            case "RRE":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "FRS":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "PROV":
                db = "pisl_prov_registration_mst";
                qual_db = "pisl_prov_regi_qual_mst";
                break;

            default:
                Message = "This certificate cannnot be verified";
                break;

        }
        var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
        if (check_Doctordata.Rows.Count > 0)
        {
            string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
            DataTable dt_Documents = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
            DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign' ");

        }
        else
        {
            Message = "This Entry Cannot be Verified";
        }
        return Json("", JsonRequestBehavior.AllowGet);
    }
    public ActionResult letterverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["letter"];
            string Regd_type = "";
            string regd_id = "";
            string ID = "";
            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["letter"]);
            var splitedString = decodedstr.Split('-');
            ID = splitedString[0];
            Regd_type = splitedString[1];
            regd_id = splitedString[2];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            //switch ()
            //{
            //    case "RRE":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "FRS":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "PROV":
            //        db = "pisl_prov_registration_mst";
            //        qual_db = "pisl_prov_regi_qual_mst";
            //        break;

            //    default:
            //        Message = "This certificate cannnot be verified";
            //        break;

            //}
            var letter_type = "";
            var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,date_approved,drg_from,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "ID='" + ID + "' and Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_Doctordata.Rows.Count > 0)
            {
                switch (check_Doctordata.Rows[0]["drg_from"].ToString())
                {
                    case "noc":
                        letter_type = "No Objection Certificate";
                        break;

                    case "gdst":
                        letter_type = "Good Standing Certificate";
                        break;
                }
                ViewBag.lettertype = letter_type;
                ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("pisl_fresh_regi_qual_mst", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='Sign'");
                if (!string.IsNullOrEmpty(check_Doctordata.Rows[0]["date_approved"].ToString()))
                {
                    ViewBag.DateApproved = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).ToString("dd MMMM,yyyy");
                    ViewBag.expiry = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).AddDays(-1).AddMonths(6).ToString("dd MMMM, yyyy");
                }
                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(ID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                Message = "This Entry Cannot be Verified";
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;
        return View();
    }
    public ActionResult Regi_search()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public ActionResult search_ur_dr()
    {

        return View();
    }
    public ActionResult regi_search_submit(string Regid, string Types)
    {
        try
        {


            string regid = Request.QueryString["Regd_ID"];
            string type = Request.QueryString["Type"]; ;
            //string type = frm["type"].Trim();
            //string regid = frm["regid"].Trim();
            string colname = "*";
            string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "' ORDER BY S_No DESC";
            DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
            if (dt.Rows.Count > 0)
            {
                DateTime ddob = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                DateTime dapproved = Convert.ToDateTime(dt.Rows[0]["date_approved"].ToString());
                DateTime dexpiry = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                ViewBag.dateapproved = dapproved.ToShortDateString();
                ViewBag.expirydate = dexpiry.ToShortDateString();
                ViewBag.dob = ddob.ToShortDateString();
                ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


                DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
                if (result_remarks.Rows.Count > 0)
                {
                    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    {
                        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    }
                }
                DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
                if (qualificationdt.Rows.Count > 0)
                {
                    ViewBag.qualdata = qualificationdt;
                }

            }
            return View();
        }
        catch (Exception ex)
        {
            return View();
        }
    }
    public ActionResult regi_search_submits(FormCollection frm)
    {

        string clientCaptcha = frm["CL_CAPCHA"].ToString();
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;

            return Json("-1");
        }
        string msg = "";
        //string type = Regd_ID;
        //string regid = Type;
        string type = frm["type"].Trim();
        string regid = frm["regid"].Trim();
        string colname = "*";
        string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
        if (dt.Rows.Count > 0)
        {
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
            if (result_remarks.Rows.Count > 0)
            {
                for (int i = 0; i < result_remarks.Rows.Count; i++)
                {
                    ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                }
            }
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult search_ur_dr_submit(FormCollection frm)
    {
        try
        {



            string First_Name = Request.QueryString["First_Name"];
            string Last_Name = frm["Last_Name"];
            string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
            string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
            string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
            string Mobile = Request.QueryString["Mobile"];
            string Email = Request.QueryString["Email"];

            if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Last_Name) && !string.IsNullOrEmpty(Corr_Add_Line_1) && !string.IsNullOrEmpty(Corr_Add_Line_2) && !string.IsNullOrEmpty(Corr_Add_Pincode) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Mobile='" + Mobile + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}

                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "Email='" + Email + "' and Mobile='" + Mobile + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }


            return View();
        }
        catch (Exception ex)
        {
            return View();

        }
    }


    public ActionResult search_ur_dr_submit2(FormCollection frm)
    {
        string msg = "";
        string First_Name = frm["First_Name"];
        string Last_Name = frm["Last_Name"];
        string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
        string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
        string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
        string Mobile = frm["Mobile"];
        string Email = frm["Email"];

        string condtions = "First_Name='" + First_Name.Trim() + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
        if (dt.Rows.Count > 0)
        {
            //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
            //if (result_remarks.Rows.Count > 0)
            //{
            //    for (int i = 0; i < result_remarks.Rows.Count; i++)
            //    {
            //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
            //    }
            //}
            string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", condtions2);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        else
        {
            msg = "Not Data Found";
        }


        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult cme()
    {
        return View();
    }
    public ActionResult status_comp2021()
    {
        return View();
    }

    public ActionResult ForgetEmailPasswordProv()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public dynamic getForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB)
    {
        //select pu.First_Name,pu.Last_Name,pu.email,pu.Mobile from pisl_users as pu inner join pisl_prov_regi_qual_mst as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type where pu.Regd_ID = 18430 and pu.DOB = '1991-10-26' and pfq.passing_date = 2016 and pfq.quali_course = 'M.B.B.S.'
        List<dynamic> OBJ = new List<dynamic>();
        string dob = lk.convertdate1(txt_DOB);
        try
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else {
                db = "pisl_fresh_regi_qual_mst";
            }

            DataTable dt1 = dal.GetList("pisl_users as pu inner join "+db+" as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType.ToUpper() + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                OBJ.Add(MRPLookup.Convert_DatatableToList(dt1).ToList());
                return Json(OBJ, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        catch (Exception)
        {

            return null;
        }
        
    }

    public string otpForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail)
    {
        string message = string.Empty;
        string dob = lk.convertdate1(txt_DOB);
        string db = "";
        if (txtRegType.ToUpper() == "PROV")
        {
            db = "pisl_prov_regi_qual_mst";
        }
        else
        {
            db = "pisl_fresh_regi_qual_mst";
        }
        DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
        if (dt1.Rows.Count > 0)
        {
            MailFormat mf = new MailFormat();
            string code = MRPLookup.RandamStringGenerator1();
            Session["provotp"] = code;
            string mailBody = "Your OTP is: " + code + ". DMC";
            string sendmailStatus= MRPLookup.sendMail(txtEmail.Trim(), "DMC | OTP Verification", mailBody, "", "");


            //string mailBody = mf.SendCodeOnMail(dt1.Rows[0]["First_Name"].ToString(), code);
            //string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(),"Reset Password Code" + System.DateTime.Now + "", mailBody, "", "");
            if (sendmailStatus != "Technical issue! Please try agiain")
            {
                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

            }
            else
            {
                message = sendmailStatus;
            }


            return message;
        }
        return "Some thing went wrong...!";
    }

    public string submitForgetEmailPasswordProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail, string txtMobileNo,string CaptchaCaseID,string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (Session["provotp"].ToString()!=txtCode)
        {
            return "Otp incorrect";
        }

        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact Captcha as written below.";
            // return message;
        }
        else
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else
            {
                db = "pisl_fresh_regi_qual_mst";
            }
            string dob = lk.convertdate1(txt_DOB);
            DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile,pu.Regd_ID,pu.Regd_Type", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                if (Convert.ToString(dt1.Rows[0]["Regd_ID"]) != "" && Convert.ToString(dt1.Rows[0]["Regd_Type"]) != "")
                {
                      string colValue = "Email='" + txtEmail.Trim() + "',Mobile='" + txtMobileNo.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                      updPassword = dal.Updation("pisl_users", colValue, "Regd_ID='"+dt1.Rows[0]["Regd_ID"].ToString()+ "' and Regd_Type='"+ dt1.Rows[0]["Regd_Type"].ToString() + "'");
               
                   
                     var tblCurrentStatuscolomns = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                     var Currentupdatestatuss = dal.Updation("pisl_temp_registrations", tblCurrentStatuscolomns, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");

                    var tblCurrentStatuscolomns1 = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                    var Currentupdatestatuss1 = dal.Updation("pisl_fresh_registration_mst", tblCurrentStatuscolomns1, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");



                    message = "Your Email and Mobile Changed successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                    //MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                   // Send SMS and mail for password reset.
                }
                else
                {
                    message = "Please try after some time";
                }
            }
            else
            {
                message = "Data Not found..!";
            }
        }
        return message;
    }
    public string sendOTP(string EmailId)
    {
        string message = "";
        string cond = "email='" + EmailId + "'";
        DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
        if (dtLogin.Rows.Count > 0)
        {
            string mobile = dtLogin.Rows[0]["Mobile"].ToString();
            Session["otp"] = GetRandomText();
            string OTP = Session["otp"].ToString();
            //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
            string mailBody = "Your OTP is: " + OTP + ". DMC";
            MRPLookup.sendMail(EmailId.Trim(), "DMC | OTP Verification", mailBody, "", "");
            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
            MRPLookup.SendSMS("otp", mobile.Trim(), "", "", OTP, "", "", "", "", "", "", "");
            message = "Please check your email or Mobile for OTP";
        }
        else
        {
            message = "Email not found, Please enter a valid email";
        }
        return message;
    }

    public ActionResult ChangePassward(FormCollection frm)
    {
        string Result = "";
        if (frm["txtOTP"].ToString() == Session["OTP"].ToString())
        {
            if (frm["txt_password"].Length >= 8 && frm["txt_password"].Length <= 18)
            {
                Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                Boolean foundMatch = regexObj.IsMatch(frm["txt_password"]);
                if (foundMatch == true)
                {
                    string where = "email='" + frm["txt_email"] + "'";// and Mobile='"+ frm["txt_contactno"] + "'";
                    DataTable dt_dr_details = dal.GetList("pisl_users", "*", where);
                    if (dt_dr_details != null)
                    {
                        if (dt_dr_details.Rows.Count > 0)
                        {
                            string pass = Encrypt(frm["txt_password"].Trim());
                            string col = " password='" + pass + "'";
                            var update = dal.Updation("pisl_users", col, "email='" + dt_dr_details.Rows[0]["email"].ToString() + "'");
                            if (update == 0)
                            {
                                string hostName = Dns.GetHostName();
                                string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                string colName = "activity,email,password,ip,system,description,date";
                                string colValue = "'Change Passs','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + frm["txt_password"].ToString().Trim() + "','" + IP + "','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + pass + "',getdate()";
                                int ins = dal.insertion("tbl_activity", colName, colValue);
                                string message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                MRPLookup.SendSMS("forgot_pwd", dt_dr_details.Rows[0]["Mobile"].ToString(), dt_dr_details.Rows[0]["First_Name"].ToString(), dt_dr_details.Rows[0]["Last_Name"].ToString(), "", "", dt_dr_details.Rows[0]["email"].ToString(), frm["txt_password"].ToString().Trim(), "", "", "", "");
                                Result = "0";
                            }
                            else
                            {
                                Result = "Somthing wrong Error !";
                            }
                        }
                        else
                        {
                            Result = "This is not registered email please check.";
                        }
                    }
                }
                else
                {
                    Result = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                }
            }
            else
            {
                Result = "Password Length must between 8 to 18 letters";
            }
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
    public ActionResult verifyOTP(string otp)
    {
        string Result = "";
        if (otp == Session["otp"].ToString())
        {
            Result = "DONE";
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
}
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using DelhimedicalcouncilORG;
using System.Data;
using System.Security.Cryptography;
using System.Text;
using System.IO;
using System.Drawing;
using System.Net;
using System.Net.Mail;

using System.Text.RegularExpressions;
using System.Data.SqlClient;
using System.Configuration;

namespace DelhimedicalcouncilORG.Controllers
{
public class homeController : Controller
{
    // GET: home
    DAL dal = new DAL();
    MRPLookup lk = new MRPLookup();
    MailFormat mf = new MailFormat();


    private string RetrieveContent(string webPage)
    {
        HttpWebResponse response = null;//used to get response
        StreamReader respStream = null;//used to read response into string
        try
        {
            //create a request object using the url passed in
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(webPage);
            request.Timeout = 10000;

            //go get a response from the page
            response = (HttpWebResponse)request.GetResponse();

            //create a streamreader object from the response
            respStream = new StreamReader(response.GetResponseStream());

            //get the contents of the page as a string and return it
            return respStream.ReadToEnd();
        }
        catch (Exception ex)//houston we have a problem!
        {
            throw ex;
        }
        finally
        {
            //close it down, we’re going home!
            response.Close();
            respStream.Close();
        }
    }

    //using a regular expression, find all of the href or urls
    //in the content of the page
    private void GetAllUrls(string content)
    {
        //regular expression
        string pattern = @"(?:href\s*=)(?:[\s""']*)(?.*?)(?:[\s>""'])";

        //Set up regex object
        Regex RegExpr = new Regex(pattern, RegexOptions.IgnoreCase);

        //get the first match
        Match match = RegExpr.Match(content);

        //loop through matches
        while (match.Success)
        {

            //output the match info
            Console.WriteLine("href match: " + match.Groups[0].Value);
            //WriteToLog(@"C:\matchlog.txt", "href match: " + match.Groups[0].Value + "\r\n");

            Console.WriteLine("Url match: " + match.Groups[1].Value);
            //WriteToLog(@"C:\matchlog.txt", "Url | Location | mailto match: " + match.Groups[1].Value + "\r\n");

            //get next match
            match = match.NextMatch();
        }
    }

    //Write to a log file
    //private void WriteToLog(string file, string message)
    //{
    //using (StreamWriter w = File.AppendText(file))
    //{
    //w.WriteLine(DateTime.Now.ToString() + ": " + message); w.Close();
    //}
    //}




    /// <summary>
    /// ////////////////////////
    /// </summary>
    /// <returns></returns>
    /// 

    public ActionResult Index()
    {




        return View();
    }
    //Start Login//
    public ActionResult login()
    {
        // Session["CAPTCHA"] = "111111";// GetRandomText();
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }

    
    public string Login_Form(string EmailId, string password, string ip, string captcha)
    
    {



        var dateTime = DateTime.Now;
        var tt = dateTime.Hour;


        var dayOfWeek = dateTime.DayOfWeek;
        var day = dayOfWeek.ToString();

        //Decrypt("","");
        //70789
        //554e981f4946f37a4818f1cea3928fe3
        //drtushargupta90@gmail.com
        string message = string.Empty;
        string clientCaptcha = captcha;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            ViewBag.CaptchaError = "Sorry, please write exact text as written above.";
            message = "11,11";
            return message;
        }
        else
            if (Session["checkSession"] == null)
        {
            ip = Request.ServerVariables["REMOTE_ADDR"].ToString();

            string pass = Encrypt(password);
            // string decoded = MRPLookup.Decrypt1(HttpUtility.UrlDecode(pass));
            string cond = "email='" + EmailId + "' and password='" + pass + "' and active!=3 ";//and active=1
            DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
            if (dtLogin.Rows.Count > 0)
            {
                if (Convert.ToString(dtLogin.Rows[0]["Regd_Type"]) == "PROV" && dtLogin.Rows.Count == 1)
                {
                    DataTable dt_temp_D = dal.GetList("pisl_temp_registrations", "Regd_ID,Regd_Type,Final_Status,Approved_By,date_approved,type", "email='" + EmailId.Trim() + "' order by ID desc");
                    for (int i = 0; i < dt_temp_D.Rows.Count; i++)
                    {
                        if (Convert.ToString(dt_temp_D.Rows[i]["Regd_Type"]) != "PROV" && Convert.ToString(dt_temp_D.Rows[i]["Final_Status"]) == "Approved" && Convert.ToString(dt_temp_D.Rows[i]["Approved_By"]) != null && Convert.ToString(dt_temp_D.Rows[i]["date_approved"]) != null && Convert.ToString(dt_temp_D.Rows[i]["type"]) != "service")
                        {



                            string colnameWithValue = "Regd_ID=" + Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]) + ",Regd_Type='" + dt_temp_D.Rows[i]["Regd_Type"].ToString() + "'";
                            string conditions = "S_No=" + Convert.ToInt32(dtLogin.Rows[0]["S_No"]) + "";
                            var Update_paymentUpdate = dal.Updation("pisl_users", colnameWithValue, conditions);
                            if (Update_paymentUpdate == 0)
                            {
                                dtLogin.Rows[0]["Regd_ID"] = Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]);
                                dtLogin.Rows[0]["Regd_Type"] = dt_temp_D.Rows[i]["Regd_Type"].ToString();

                            }
                            break;
                        }
                    }
                }


                for (int i = 0; i < dtLogin.Rows.Count; i++)
                {
                    string hash = Convert.ToString(dtLogin.Rows[i]["hash"]);
                    string decryptedstring = Decrypt(pass, hash);

                    string gid = Convert.ToString(dtLogin.Rows[i]["GID"]);
                    //string active = Convert.ToString(dtLogin.Rows[0]["active"]);
                    if (gid == "0")//Login for doctor
                    {
                        //DataTable dt_lastloginRecord = dal.GetList("pisl_users where email='" + EmailId + "' order by S_No desc", "TOP 1 *", "");
                        if (dtLogin != null && dtLogin.Rows.Count > 0)
                        {

                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[i]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[i]["Regd_Type"]);
                            }
                            else
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                            }
                            if (dtLogin.Rows[i]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[i]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }

                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                        }
                        else
                        {
                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[0]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            }
                            if (dtLogin.Rows[0]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }
                        }


                        message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 2;
                    }
                    else if (gid == "1")//Login for internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["isno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 1;
                            }
                            else
                            {
                                message = "0,6";
                            }
                        }

                        else
                        {
                            message = "0,5";
                        }
                    }
                    else if (gid == "2")//Login for admin and internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["asno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 3;
                            }
                            else
                            {
                                message = "0,6";
                            }

                        }
                        else
                        {
                            message = "0,5";
                        }
                    }
                }
            }
            else
            {
                message = "0,0";
            }
        }
        else
        {
            message = "10,10";
        }
        return message;
    }

    public string Encrypt(string password)
    {
        // Decrypt("", "");
        //string password = @"1234abcd";

        // byte array representation of that string
        byte[] encodedPassword = new UTF8Encoding().GetBytes(password);

        // need MD5 to calculate the hash
        byte[] hash = ((HashAlgorithm)CryptoConfig.CreateFromName("MD5")).ComputeHash(encodedPassword);

        // string representation (similar to UNIX format)
        string encoded = BitConverter.ToString(hash)
           // without dashes
           .Replace("-", string.Empty)
           // make lowercase
           .ToLower();
        return encoded;
    }
    public string Decrypt(string password, string hash1)
    {//https://md5decrypt.net/#answer
        string ss = "";
        string source = "zdNot3oAz5I%3DjRspJg78a%2FY%3D";// "Hello World!";
        MD5 md5 = System.Security.Cryptography.MD5.Create();
        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(password);
        byte[] hash = md5.ComputeHash(inputBytes);

        // step 2, convert byte array to hex string
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < hash.Length; i++)
        {
            sb.Append(hash[i].ToString("X2"));
        }
        return sb.ToString();
    }
    static string GetMd5Hash(MD5 md5Hash, string input)
    {

        // Convert the input string to a byte array and compute the hash.
        byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));

        // Create a new Stringbuilder to collect the bytes
        // and create a string.
        StringBuilder sBuilder = new StringBuilder();

        // Loop through each byte of the hashed data 
        // and format each one as a hexadecimal string.
        for (int i = 0; i < data.Length; i++)
        {
            sBuilder.Append(data[i].ToString("x2"));
        }

        // Return the hexadecimal string.
        return sBuilder.ToString();
    }
    public FileResult GetCaptchaImage()
    {
        MemoryStream ms = new MemoryStream();
        if (Session["CAPTCHA"] != null)
        {
            string text = Session["CAPTCHA"].ToString();

            //first, create a dummy bitmap just to get a graphics object
            Image img = new Bitmap(1, 1);
            Graphics drawing = Graphics.FromImage(img);

            Font font = new Font("Jokerman", 15);
            //measure the string to see how big the image needs to be
            SizeF textSize = drawing.MeasureString(text, font);

            //free up the dummy image and old graphics object
            img.Dispose();
            drawing.Dispose();

            //create a new image of the right size
            img = new Bitmap((int)textSize.Width + 40, (int)textSize.Height + 20);
            drawing = Graphics.FromImage(img);

            Color backColor = Color.SeaShell;
            Color textColor = Color.Red;
            //paint the background
            drawing.Clear(backColor);

            //create a brush for the text
            Brush textBrush = new SolidBrush(textColor);

            drawing.DrawString(text, font, textBrush, 20, 10);

            drawing.Save();

            font.Dispose();
            textBrush.Dispose();
            drawing.Dispose();


            img.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
            img.Dispose();

            return File(ms.ToArray(), "image/png");
        }
        else
        {
            return File(ms.ToArray(), "image/png");
        }
    }
    private string GetRandomText()
    {
        StringBuilder randomText = new StringBuilder();
        string alphabets = "12345679ABCEFGHKLMNPRSTUVWXZ";
        Random r = new Random();
        for (int j = 0; j <= 5; j++)
        {
            randomText.Append(alphabets[r.Next(alphabets.Length)]);
        }
        return randomText.ToString();
    }
    //End Login//
    public ActionResult signup()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    [HttpPost]
    public string sendotpsignup(string txt_Email, string txt_ContactNo)
    {
        string msg = "";
        try
        {
            var CheckEmail = IsEmailandMobileExists(txt_Email, "");
            var checkMobile = IsEmailandMobileExists("", txt_ContactNo);
            if (CheckEmail == false && checkMobile == false)
            {

                Session["otp"] = GetRandomText();
                string OTP = Session["otp"].ToString();
                //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
                string mailBody = "Your OTP is: " + OTP + ". DMC";
                MRPLookup.sendMail(txt_Email.Trim(), "DMC | OTP Verification", mailBody, "", "");

                //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
              

                MRPLookup.SendSMS("otp", txt_ContactNo.Trim(), "", "", OTP, "", "", "", "", "", "", "");
                msg = "0";
            }
            else if (CheckEmail == true && checkMobile == true)
            {
                msg = "Email and Mobile no. are already exists!!";
            }
            else
            {
                if (checkMobile == true && CheckEmail == false)
                {
                    msg = "Mobile No. is Already Exists!!";
                }
                else if (CheckEmail == true && checkMobile == false)
                {
                    msg = "Email Address is Already Exists!!";
                }


            }
        }
        catch (Exception ex)
        {
            msg = "1";
        }
        return msg;
    }
    public bool IsEmailandMobileExists(string email, string mobile)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        try
        {
            tableName = "pisl_users";
            colname = "*";
            if (!string.IsNullOrEmpty(email))
            {
                cond = "email='" + email + "'";
            }
            if (!string.IsNullOrEmpty(mobile))
            {
                cond = "mobile='" + mobile + "'";
            }
            //cond=
            DataTable dt_datacheck = dal.GetList(tableName, colname, cond);
            if (dt_datacheck != null && dt_datacheck.Rows.Count > 0)
            {
                IsExists = true;
            }

        }
        catch (Exception ex)
        {
            IsExists = false;
            throw;
        }
        return IsExists;
    }

    public ActionResult IsDocDataExists(string regd_type, string regd_no, string DOB, string PassingYear)
    {
        //List<dynamic> list = new List<dynamic>();
        string message = "";
        try
        {
            var tbl_name = "";

            var userExists = IsRegd_Exists(regd_type, regd_no, DOB, PassingYear, out tbl_name);
            if (userExists == true && tbl_name == "pisl_users")
            {

                message = "Already Registered With us. Please Login With Your Credential";
            }
            else
                if (userExists == true && tbl_name == "pisl_fresh_registration_mst")
            {
                message = "Your Registration No. is Expired. Please SignUp Again.";
            }
            else
            {
                message = "NotExists";
                //message = "Your Registration No. is Not Exists!";
            }
        }
        catch (Exception ex)
        {

        }
        return Json(message, JsonRequestBehavior.AllowGet);
    }
    public bool IsRegd_Exists(string regd_type, string regd_no, string DOB, string PassingYear, out string Tbl_Name)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        Tbl_Name = "";
        DataTable dt_UserCheck = null;
        try
        {
            tableName = "pisl_users";
            colname = "*";
            cond = "Regd_Type='" + regd_type + "' and Regd_ID='" + regd_no.Trim() + "'";
            dt_UserCheck = dal.GetList(tableName, colname, cond);
            if (dt_UserCheck == null || dt_UserCheck.Rows.Count == 0)
            {
                tableName = "pisl_fresh_regi_qual_mst";
                colname = "*";
                cond = "quali_type='Basic Qualification' AND Regd_ID='" + regd_no + "' "
                    + "AND Regd_Type='" + regd_type + "' AND passing_date =  '" + PassingYear.Trim() + "'";
                dt_UserCheck = dal.GetList(tableName, colname, cond);
                if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                {
                    Tbl_Name = "pisl_fresh_regi_qual_mst";

                    tableName = "pisl_fresh_registration_mst";
                    colname = "*";
                    cond = "Regd_ID='" + regd_no + "' AND Regd_Type='" + regd_type + "'";
                    dt_UserCheck = dal.GetList(tableName, colname, cond);
                    if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                    {
                        Tbl_Name = "pisl_fresh_registration_mst";
                        IsExists = true;
                    }
                    else
                    {
                        IsExists = false;
                    }
                }
                else
                {

                    IsExists = false;
                }
            }
            else
            {
                Tbl_Name = "pisl_users";
                IsExists = true;
            }
        }
        catch (Exception ex)
        {


            throw;
        }
        return IsExists;
    }

    [HttpPost]
    public string createsignup(string txt_Email, string txt_ContactNo, string txt_FirstName, string txt_MiddleName,
        string txt_LastName, string txt_Password, string txt_ConfirmPassword, string txt_DOB, bool chk_TermCondition,
        string Captcha, string Regd_ID, string txtOTP, string ddl_regType, string txt_oldData, string passingYear)
    {
        string message = "";
        string dob = lk.convertdate1(txt_DOB);
        string Tbl_Name = "";
        try
        {
            if (!IsEmailandMobileExists(txt_Email, ""))
            {
                if (!IsEmailandMobileExists("", txt_ContactNo))
                {
                    if (ddl_regType == "FRS" || ddl_regType == "RRE")
                    {
                        if (IsRegd_Exists(ddl_regType, Regd_ID, dob, passingYear, out Tbl_Name))
                        {
                            Tbl_Name = Tbl_Name;
                            if (Tbl_Name == "pisl_users")
                            {
                                //if Pisl_user Table Record Exists but no Email and Mobile No exists
                                //in this case update the Email and Mobile No.
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        DataTable dt_Email_Mobile_Check = dal.GetList("pisl_users",
                                                        "top 1*", " Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                        if (dt_Email_Mobile_Check != null)
                                                        {
                                                            if (dt_Email_Mobile_Check.Rows.Count > 0)
                                                            {
                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_Email_Mobile_Check.Rows[0]["email"])))
                                                                {
                                                                    string pass = Encrypt(txt_Password.Trim());
                                                                    string hash = Encrypt(MRPLookup.RandamStringGenerator1());
                                                                    var updateDt = dal.Updation("pisl_users",
                                                                        "email='" + txt_Email.Trim() + "',mobile='" + txt_ContactNo.Trim() + "',password='" + pass + "',hash='" + hash + "'",
                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                    if (updateDt == 0)
                                                                    {
                                                                        DataTable dt_fresh_Check = dal.GetList("pisl_fresh_registration_mst",
                                                                            "top 1 * ",
                                                                            "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                        if (dt_fresh_Check != null)
                                                                        {
                                                                            if (dt_fresh_Check.Rows.Count > 0)
                                                                            {
                                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_fresh_Check.Rows[0]["Email"])))
                                                                                {
                                                                                    var updateDt_fresh = dal.Updation("pisl_fresh_registration_mst",
                                                                                        "Email='" + txt_Email.Trim() + "',Mobile='" + txt_ContactNo.Trim() + "'",
                                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");

                                                                                    if (updateDt_fresh != 0)
                                                                                    {
                                                                                        message = "Error!!";
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                                        MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                                        message = "Please, Check Your Mail For Login Details";
                                                                        //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                                        MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                                    }
                                                                    else
                                                                    {
                                                                        message = "Error!!";
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    message = "Your record are already Exists with us!!";
                                                                }
                                                            }
                                                        } //End Updation
                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }
                            else if (Tbl_Name == "pisl_fresh_regi_qual_mst" || Tbl_Name == "pisl_fresh_registration_mst")
                            {
                                //Insert Login Record in Pisl_Users
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        string pass = Encrypt(txt_Password.Trim());
                                                        string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                        if (string.IsNullOrEmpty(Regd_ID))
                                                        {
                                                            Regd_ID = "0";
                                                        }
                                                        //if (txt_oldData != "")
                                                        //{
                                                        //    string colnamemst = "*";
                                                        //    string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        //    DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        //    if (dtrmst.Rows.Count > 0)
                                                        //    {
                                                        //        string oldtype = "";
                                                        //        if (ddl_regType == "FRS")
                                                        //        {
                                                        //            oldtype = "service";
                                                        //        }
                                                        //        else if (ddl_regType == "RRE")
                                                        //        {
                                                        //            oldtype = "reregi";
                                                        //        }
                                                        //        var corrAddress1 = dtrmst.Rows[0]["Corr_Add_Line_1"].ToString();
                                                        //        var corrAddress2 = dtrmst.Rows[0]["Corr_Add_Line_2"].ToString();
                                                        //        var perAddress1 = dtrmst.Rows[0]["Per_Add_Line_1"].ToString();
                                                        //        var perAddress2 = dtrmst.Rows[0]["Per_Add_Line_2"].ToString();

                                                        //        string colNameold = "Regd_ID,Regd_Type,type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,date_entered,Father_Name,POB,Gender,Nationality,Corr_Add_Line_1,Corr_Add_Line_2,Corr_Add_State,Corr_Add_Pincode,Corr_Add_Country,Per_Add_Line_1,Per_Add_Line_2,Per_Add_Line_State,Per_Add_Line_Pincode,Per_Add_Line_Country";

                                                        //        string colValueold = "'" + Regd_ID + "','" + ddl_regType + "','" + oldtype + "','" + txt_FirstName + "','" + txt_MiddleName + "','"  + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "', '"+ lk.GetDateTime()+ "' ,'"+ dtrmst.Rows[0]["Father_Name"] + "','" + dtrmst.Rows[0]["POB"] + "','" + dtrmst.Rows[0]["Gender"] + "','" + dtrmst.Rows[0]["Nationality"] + "','" + corrAddress1 + "','" + corrAddress2 + "','" + dtrmst.Rows[0]["Corr_Add_State"] + "','" + dtrmst.Rows[0]["Corr_Add_Pincode"] + "','" + dtrmst.Rows[0]["Corr_Add_Country"] + "','" + perAddress1 + "','" + perAddress2 + "','" + dtrmst.Rows[0]["Per_Add_Line_State"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Pincode"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Country"] + "'";
                                                        //        int insold = dal.insertion("pisl_temp_registrations", colNameold, colValueold);
                                                        //    }
                                                        //}
                                                        Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                        string colnamemst = "*";
                                                        string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        DateTime txtdob1 = Convert.ToDateTime(dtrmst.Rows[0]["DOB"]);
                                                        string txtdob = txtdob1.ToShortDateString();

                                                        string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                            + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                        string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + dtrmst.Rows[0]["First_Name"].ToString() + "','" + dtrmst.Rows[0]["Middle_Name"].ToString() + "',"
                                                            + "'" + dtrmst.Rows[0]["Last_Name"].ToString() + "','" + txtdob + "','" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                            + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                        int ins = dal.insertion("pisl_users", colName, colValue);
                                                        if (ins == 0)
                                                        {
                                                            string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                            MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                            message = "Please, Check Your Mail For Login Details";
                                                            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                            MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                        }
                                                        else
                                                        {
                                                            message = "Try after some time";
                                                        }

                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }

                        }
                        else
                        {
                            message = "Your Registration No and Passing Year is Not Exist with Us";
                        }
                    }
                    else
                    {
                        //Insert Login Record in Pisl_Users
                        if (chk_TermCondition == true)
                        {
                            if (txtOTP == Session["otp"].ToString())
                            {
                                if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                {
                                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                    Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                    if (foundMatch == true)
                                    {
                                        if (txt_Password == txt_ConfirmPassword)
                                        {
                                            if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                            {
                                                //if (Tbl_Name== "pisl_users") { }
                                                string pass = Encrypt(txt_Password.Trim());
                                                string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                if (string.IsNullOrEmpty(Regd_ID))
                                                {
                                                    Regd_ID = "0";
                                                }
                                                Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                if (ddl_regType == "-1")
                                                {
                                                    ddl_regType = "";
                                                }


                                                string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                    + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                int ins = dal.insertion("pisl_users", colName, colValue);
                                                if (ins == 0)
                                                {
                                                    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                    message = "Please, Check Your Mail";
                                                    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                }
                                                else
                                                {
                                                    message = "Try after some time";
                                                }

                                                //string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                //    + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                //string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                //    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                //    + "1,0,0,'"+ lk.GetDateTime()+ "','','" + Regd_ID1 + "'";
                                                //int ins = dal.insertion("pisl_users", colName, colValue);
                                                //if (ins == 0)
                                                //{
                                                //    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                //    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                //    message = "Please, Check Your Mail";
                                                //    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                //    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                //}
                                                //else
                                                //{
                                                //    message = "Try after some time";
                                                //}
                                            }
                                            else
                                            {
                                                message = "Enter A Valid Email";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password and Confrim Password is Not Same";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                    }
                                }
                                else
                                {
                                    message = "Password Length must between 8 to 18 letters";
                                }
                            }
                            else
                            {
                                message = "Enter the Valid OTP";
                            }
                        }
                        else
                        {
                            message = "Please check the Terms and Conditions";
                        }

                        //}
                    }
                }
                else
                {
                    message = "Mobile No. is Already Exists";
                }
            }
            else
            {
                message = "Email Already exists!!";
            }
            //
            //Cut the Code From There

        }
        catch
        {

        }
        return message;
    }

    public ActionResult SignupVerification()
    {
        string message = "";
        try
        {
            if (Request.QueryString["email"] != null && Request.QueryString["hash"] != null)
            {
                string email = Request.QueryString["email"];
                string hash = Request.QueryString["hash"];
                string cond = "Email='" + email.Trim() + "' and Hash='" + hash.Trim() + "' and Active=0";
                DataTable dt = dal.GetList("pisl_users", "*", cond);
                if (dt.Rows.Count > 0)
                {
                    int upd = dal.Updation("pisl_users", "Active=1", cond);
                    if (upd == 0)
                    {
                        message = "Your account has been activated, you can now login";
                    }
                    else
                    {
                        message = "Try after some time";
                    }
                }
                else
                {
                    message = "The url is either invalid or you already have activated your account.";
                }
            }
            else
            {
                message = "Invalid approach, please use the link that has been send to your email.";
            }
        }
        catch
        { }
        ViewBag.lbl_status = message;
        return View();
    }
    public ActionResult contact()
    {
        return View();
    }

    public ActionResult about()
    {
        return View();
    }
    public ActionResult faqs()
    {
        return View();
    }
    // Start forgot password
    public ActionResult forgotpassword()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public string sendCode(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        string message = string.Empty;
        try
        {
            string clientCaptcha = CaptchaCaseID;
            string serverCaptcha = Session["CAPTCHA"].ToString();
            if (!clientCaptcha.Equals(serverCaptcha))
            {
                ViewBag.ShowCAPTCHA = serverCaptcha;
                message = "Sorry, please write exact text as written below.";
            }
            else
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' ";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string name = Convert.ToString(dt.Rows[0]["First_Name"]);
                                        string Mobile = Convert.ToString(dt.Rows[0]["Mobile"]);

                                        MailFormat mf = new MailFormat();
                                        string code = MRPLookup.RandamStringGenerator1();
                                        string mailBody = mf.SendCodeOnMail(name, code);
                                        MRPLookup.SendSMS("otp", Mobile, "", "", code, "", "", "", "", "", "", "");
                                        string colValue = "Code='" + code.Trim() + "'";
                                        int updCode = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "'");
                                        if (updCode == 0)
                                        {
                                            string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(), "Reset Password Code " + System.DateTime.Now + "", mailBody, "", "");
                                            if (sendmailStatus != "Technical issue! Please try agiain")
                                            {
                                                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

                                            }
                                            else
                                            {
                                                message = sendmailStatus;
                                            }
                                        }
                                        else
                                        {
                                            message = "Please try after some time.";
                                        }

                                    }
                                    else
                                    {
                                        message = "Enter a New Password.";
                                    }
                                }
                                else
                                {
                                    message = "Your Email And Mobile Number Do not Match with DMC Registered Users.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
        }
        catch (Exception ex)
        {

        }
        return message;
    }
    public string forgotpasswordCaseID(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact text as written below.";
            // return message;
        }
        else
        {
            if (txtCode != "0")
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string mobile = Convert.ToString(dt.Rows[0]["Mobile"]);
                                    string firstName = Convert.ToString(dt.Rows[0]["First_Name"]);
                                    string lastName = Convert.ToString(dt.Rows[0]["Last_Name"]);
                                    //string new_password = Encrypt(MRPLookup.RandamStringGenerator1());
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string colValue = "password='" + new_PasswordMD5.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                                        updPassword = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                        if (updPassword == 0)
                                        {
                                            updPassword = dal.Updation("pisl_users", "Code='0'", "Email='" + txtEmail.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                            string hostName = Dns.GetHostName();
                                            string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                            string colName = "activity,email,password,ip,system,description,date";
                                            colValue = "'Change Passs','" + txtEmail + "','" + txtPassword + "','" + IP + "','" + mobile + "','" + new_PasswordMD5 + "',getdate()";
                                            int ins = dal.insertion("tbl_activity", colName, colValue);
                                            message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                            MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                                            // Send SMS and mail for password reset.
                                            

                                        }
                                        else
                                        {
                                            message = "Please try after some time";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please try another password.";
                                    }

                                }
                                else
                                {
                                    message = "Your Details Dont Match or You have NOT registered with DMC.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
            else
            {
                message = "Code not match";
            }
        }
        return message;
    }

    public ActionResult introduction()
    {
        return View();
    }

    public ActionResult powers()
    {
        return View();
    }

    public ActionResult thecouncil()
    {
        return View();
    }

    //public ActionResult gallery()
    //{
    //    return View();
    //}
    public ActionResult Gallery()
    {
        return View();
    }

    public ActionResult accomplishments()
    {
        return View();
    }

    public ActionResult registration()
    {
        return View();
    }
    public ActionResult cmeperforma()
    {
        return View();
    }
    public ActionResult cmeonline()
    {
        return View();
    }
    public ActionResult cmerequirements()
    {
        return View();
    }
    public ActionResult cmepassbook()
    {
        return View();
    }
    public ActionResult duties()
    {
        return View();
    }
    public ActionResult inst_general()
    {
        return View();
    }

    public ActionResult inst_fees()
    {
        return View();
    }
    public ActionResult inst_docupload()
    {
        return View();
    }
    public ActionResult disclaimer()
    {
        return View();
    }
    public ActionResult feestructure()
    {
        return View();
    }
    public ActionResult privacypolicy()
    {
        return View();
    }
    public ActionResult termofuse()
    {
        return View();
    }

    public ActionResult litigations()
    {
        return View();
    }


    public ActionResult council_meeting()
    {
        return View();
    }
    public ActionResult Cme_workshop_Conference()
    {
        return View();
    }

    public ActionResult Media_room()
    {
        return View();
    }
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    public ActionResult LogOut()
    {
        Session.Abandon();
        return RedirectToAction("Index", "Home");
    }
    public ActionResult SearchElectrolData(string regid)
    {
        string msg = "";
        DataTable dtSearch = dal.GetList("tbl_electrolData", "*", "RegNo='" + regid.Trim() + "'");
        if (dtSearch.Rows.Count > 0)
        {
            return Json(MRPLookup.DataTableToJSONWithJSONNet(dtSearch), JsonRequestBehavior.AllowGet);
        }
        else
        {
            msg = "Data not found";
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
    }
    public ActionResult SearchElectrolDataUpdate(string regid)
    {
        int upd = 1;
        upd = dal.Updation("tbl_electrolData", "Status='Completed',Date='" + lk.GetDateTime() + "'", "ID='" + regid.Trim() + "'");
        if (upd == 0)
        {

            return Json(upd, JsonRequestBehavior.AllowGet);
        }
        else
        {
            return Json(upd, JsonRequestBehavior.AllowGet);
        }
    }

    public ActionResult TotalCount()
    {
        DataTable dtcntCompleted = dal.GetList("tbl_electrolData", "count(*) as cntCompleted", "status='Completed'");
        DataTable dtcntNotCompleted = dal.GetList("tbl_electrolData", "count(*) as cntNotCompleted", "status ='Valid'");
        string totalCmpleteStatus = "Completed: " + Convert.ToString(dtcntCompleted.Rows[0]["cntCompleted"]) + "  Not Completed: " + Convert.ToString(dtcntNotCompleted.Rows[0]["cntNotCompleted"]);
        return Json(totalCmpleteStatus, JsonRequestBehavior.AllowGet);
    }
    public ActionResult Renewal_Reminder(string key)
    {
        string msg = "";
        try
        {

            key = "1111";
            string validKey = "1111";
            // MRPLookup.SendSMS("Renewal_expired_tdy", "9899849487", "Dinesh", "", "", "", "", "", "", "", "", "");
            if (key == validKey)
            {
                string expiry_frtyfive = Convert.ToDateTime(DateTime.Now.AddDays(30)).ToString("yyyy-MM-dd");//date(('Y-m-d'), strtotime('+30 days'));
                string expiry_tdy = Convert.ToDateTime(DateTime.Now).ToString("yyyy-MM-dd");//date('Y-m-d');
                string expiry_pastfifty = Convert.ToDateTime(DateTime.Now.AddDays(-50)).ToString("yyyy-MM-dd");// date(('Y-m-d'), strtotime('-50 days'));
                string cond = "(Expiry_Date = '" + expiry_frtyfive + "' OR  Expiry_Date = '" + expiry_tdy + "' OR Expiry_Date = '" + expiry_pastfifty + " ') AND (Mobile !='' OR  Email !='')";
                //DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", cond);
                string strConnString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                SqlConnection con = new SqlConnection(strConnString);
                //SqlConnection con = new SqlConnection(@"Data Source=103.20.212.254,1232;Initial Catalog=dmcaws_New;User Id=sa;Password=bD$x89K3$@K9UaQsKQ");
                //SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-PKTADCN;Initial Catalog=dmcaws1;integrated security=true");
                con.Open();
                SqlCommand cmd = new SqlCommand("select * from pisl_fresh_registration_mst where " + cond + "", con);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                con.Close();
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string First_Name = Convert.ToString(dt.Rows[i]["First_Name"]);
                        string Last_Name = Convert.ToString(dt.Rows[i]["Last_Name"]);
                        string Regd_ID = Convert.ToString(dt.Rows[i]["Regd_ID"]);
                        string Regd_Type = Convert.ToString(dt.Rows[i]["Regd_Type"]);
                        string Mobile = Convert.ToString(dt.Rows[i]["Mobile"]);
                        string Expiry_Date = Convert.ToDateTime(dt.Rows[i]["Expiry_Date"]).ToString("yyyy-MM-dd");
                        string date_approved = Convert.ToDateTime(dt.Rows[i]["date_approved"]).ToString("yyyy-MM-dd");
                        string tdydate = Convert.ToDateTime(System.DateTime.Now).ToString("yyyy-MM-dd");
                        string to = Convert.ToString(dt.Rows[i]["Email"]);

                        string subject1 = "Renewal of Registration with Delhi Medical Council"; //// Give the email a subject
                        string subject2 = "Expiry of Registration with Delhi Medical Council";
                        string subject3 = "Deletion of Regd Number with Delhi Medical Council";
                        string message1 = "";
                        message1 += "Dear Dr " + First_Name + " " + Last_Name + ",";
                        message1 += "Greetings from Delhi Medical Council!!";

                        message1 += "   This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council is due for renewal.";
                        message1 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting ";
                        message1 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message1 += "For inclusion of any additional qualification, please produce the original degree at the office of Delhi Medical Council, so that your additional ";
                        message1 += "qualification certificate can be verified with the original document. The original degree / diploma Certificate will be returned immediately after verification. ";

                        message1 += "<b>This is a system generated email and we request you not to reply to this email. Please ignore if already applied.</b>";

                        message1 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message1 += "Warm Regards,";

                        message1 += "Delhi Medical Council.";
                        message1 += "Ground Floor, B Wing, B Block-1";
                        message1 += "DMCR IT Park, Shastri Park";
                        message1 += "New Delhi-110053";
                        message1 += "Tel: +91-011-46621000";
                        message1 += "Website - www.delhimedicalcouncil.org	 ";

                        string message2 = "";
                        message2 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message2 += "Greetings from Delhi Medical Council!!";

                        message2 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council expired on " + Expiry_Date + " and  is due for renewal. ";

                        message2 += "We request you to kindly renew your registration within thirty days and keep your registration in force. You can renew your registration online by visiting ";
                        message2 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message2 += "Please take note that in case you do not apply for renewal of registration within the stipulated period, your name shall be removed from the State Medical ";
                        message2 += "Register maintained by the Delhi Medical Council in accordance with the provisions of Section 22 of the Delhi Medical Council Act, 1997 which will debar";
                        message2 += "you from practicing Allopathic in the state of Delhi.";

                        message2 += "<b>Kindly ignore this email, in case you have already applied for renewal of registration</b>";

                        message2 += "This is a system generated email and we request you not to reply to this email.";

                        message2 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message2 += "Warm Regards,";

                        message2 += "Delhi Medical Council.";
                        message2 += "Ground Floor, B Wing, B Block-1";
                        message2 += "DMCR IT Park, Shastri Park";
                        message2 += "New Delhi-110053";
                        message2 += "Tel: +91-011-46621000";
                        message2 += "Website - www.delhimedicalcouncil.org";

                        string message3 = "";
                        message3 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message3 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council has expired on " + Expiry_Date + ". You ";
                        message3 += "failed to renew the registration with Delhi Medical Council, in spite of notices/Emails (public / individual) issued for renewal. Hence, in accordance with the ";
                        message3 += "provisions of section 22(3) of Delhi Medical Council Act, 1997; your name under Registration number " + Regd_ID + "-" + Regd_Type + "  has been removed from the State ";
                        message3 += "Medical Register of Delhi Medical Council.";

                        message3 += "Please note that if you wish to have your name re-entered in the State Medical Register of Delhi Medical Council, you may do so, by paying fees as detailed herein below,";
                        message3 += "in addition to fee for renewal of registration (Rs. 2000/-)";

                        message3 += "Late fees for non-renewal of registration:-";
                        message3 += "(a) upto six months from the date from 		Rs. 1000/- (Rupees One Thousand only)";
                        message3 += "    which registration is due for renewal";
                        message3 += "(b) for period more than six months 	    Rs. 2000/- (Rupees One Thousand only)";
                        message3 += "     but upto one year";
                        message3 += "(c) for period more than one year 			Rs. 1000/- (Rupees One Thousand per year and Part thereof)";

                        message3 += "Please also note that any person servicing or practicing modern scientific system of medicine (allopathy) in Delhi without holding valid registration with Delhi Medical Council is liable for action under the provisions of Delhi Medical Council Act, 1997.";
                        message3 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting www.delhimedicalcouncil.org and apply under Online Renewal & Services.";

                        message3 += "<b>Kindly ignore this letter, in case you have already applied for renewal of registration</b>";

                        message3 += "This is a system generated email and we request you not to reply to this email.";

                        message3 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message3 += "Warm Regards,";

                        message3 += "Delhi Medical Council.";
                        message3 += "Ground Floor, B Wing, B Block-1";
                        message3 += "DMCR IT Park, Shastri Park";
                        message3 += "New Delhi-110053";
                        message3 += "Tel: +91-011-46621000";
                        message3 += "Website - www.delhimedicalcouncil.org,";

                        string headers = "From: DMC Registration System <registration@delhimedicalcouncil.org>' . '\r\n'"; // Set from headers

                        string message = "";
                        string subject = "";
                        string trigger = "";
                        string msgtxt = "";
                        if (Convert.ToDateTime(Expiry_Date) > Convert.ToDateTime(tdydate))
                        {
                            message = message1;
                            subject = subject1;
                            trigger = "Renewal_due_reminder";
                            msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Renewal of your DMC Regd No " + Regd_ID + " - " + Regd_Type + " is due. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }

                        }
                        else if (Convert.ToDateTime(Expiry_Date) == Convert.ToDateTime(tdydate))
                        {
                            message = message2;
                            subject = subject2;
                            trigger = "Renewal_expired_tdy";
                            // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Registration of DMC Regd No " + Regd_ID + " - " + Regd_Type + " expired today. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }
                        }
                        //else if (Convert.ToDateTime(Expiry_Date) < Convert.ToDateTime(tdydate))
                        //{
                        //    message = message2;
                        //    subject = subject2;
                        //    trigger = "Renewal_expired_fifty";
                        //   // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Your  ID " + Regd_ID + " - " + Regd_Type + " has been removed from the State Medical Register of DMC . Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                        //    if (!string.IsNullOrEmpty(to))
                        //    {
                        //       // MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //    if (!string.IsNullOrEmpty(Mobile))
                        //    {
                        //       // MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(to))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(Mobile))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}

                    }
                }

            }
            else
            {
                msg = "Key not match";
                string path = "C:\\TestService\\ServiceLog.txt";
                using (StreamWriter writer = new StreamWriter(path, true))
                {
                    writer.WriteLine(string.Format(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt"), DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt")));
                    writer.Close();
                }
            }
        }
        catch
        {

        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult certverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["cert"];
            string Regd_type = "";
            string regd_id = "";

            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["cert"]);
            var splitedString = decodedstr.Split('-');
            Regd_type = splitedString[0];
            regd_id = splitedString[1];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            switch (Regd_type)
            {
                case "RRE":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "FRS":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "PROV":
                    db = "pisl_prov_registration_mst";
                    qual_db = "pisl_prov_regi_qual_mst";
                    break;

                default:
                    Message = "This certificate cannnot be verified";
                    break;

            }

            var check_namechange = dal.GetList("tbl_NameChangeHistory_New", "CaseID,Name=(case when (New_MiddleName is null or  New_MiddleName='') then New_FirstName+' '+New_LastName when (New_MiddleName is null or  New_MiddleName='') and (New_LastName is null or New_LastName='') then New_FirstName else New_FirstName+' '+New_MiddleName+' '+New_LastName end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_namechange.Rows.Count > 0)
            {
                string CaseID = check_namechange.Rows[0]["CaseID"].ToString();
                ViewBag.Name = check_namechange.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                if (check_Doctordata.Rows.Count > 0)
                {
                    string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
                    ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                    DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                    DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                    DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                    ViewBag.qual = dt_qual;
                    ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                    ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                    Message = "success";
                }
                else
                {
                    Message = "This Entry Cannot be Verified";
                }
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;

        return View();
    }
    public ActionResult VeryfyCertificate(string value)
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        var qstring = value;
        var decodedStr = MRPLookup.Decrypt1(qstring);
        var splitedString = decodedStr.Split('-');
        var Regd_type = splitedString[0];
        var regd_id = splitedString[1];
        var db = "";
        var qual_db = "";
        //string regdtype=
        switch (Regd_type)
        {
            case "RRE":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "FRS":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "PROV":
                db = "pisl_prov_registration_mst";
                qual_db = "pisl_prov_regi_qual_mst";
                break;

            default:
                Message = "This certificate cannnot be verified";
                break;

        }
        var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
        if (check_Doctordata.Rows.Count > 0)
        {
            string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
            DataTable dt_Documents = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
            DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign' ");

        }
        else
        {
            Message = "This Entry Cannot be Verified";
        }
        return Json("", JsonRequestBehavior.AllowGet);
    }
    public ActionResult letterverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["letter"];
            string Regd_type = "";
            string regd_id = "";
            string ID = "";
            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["letter"]);
            var splitedString = decodedstr.Split('-');
            ID = splitedString[0];
            Regd_type = splitedString[1];
            regd_id = splitedString[2];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            //switch ()
            //{
            //    case "RRE":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "FRS":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "PROV":
            //        db = "pisl_prov_registration_mst";
            //        qual_db = "pisl_prov_regi_qual_mst";
            //        break;

            //    default:
            //        Message = "This certificate cannnot be verified";
            //        break;

            //}
            var letter_type = "";
            var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,date_approved,drg_from,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "ID='" + ID + "' and Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_Doctordata.Rows.Count > 0)
            {
                switch (check_Doctordata.Rows[0]["drg_from"].ToString())
                {
                    case "noc":
                        letter_type = "No Objection Certificate";
                        break;

                    case "gdst":
                        letter_type = "Good Standing Certificate";
                        break;
                }
                ViewBag.lettertype = letter_type;
                ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("pisl_fresh_regi_qual_mst", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='Sign'");
                if (!string.IsNullOrEmpty(check_Doctordata.Rows[0]["date_approved"].ToString()))
                {
                    ViewBag.DateApproved = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).ToString("dd MMMM,yyyy");
                    ViewBag.expiry = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).AddDays(-1).AddMonths(6).ToString("dd MMMM, yyyy");
                }
                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(ID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                Message = "This Entry Cannot be Verified";
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;
        return View();
    }
    public ActionResult Regi_search()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public ActionResult search_ur_dr()
    {

        return View();
    }
    public ActionResult regi_search_submit(string Regid, string Types)
    {
        try
        {


            string regid = Request.QueryString["Regd_ID"];
            string type = Request.QueryString["Type"]; ;
            //string type = frm["type"].Trim();
            //string regid = frm["regid"].Trim();
            string colname = "*";
            string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "' ORDER BY S_No DESC";
            DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
            if (dt.Rows.Count > 0)
            {
                DateTime ddob = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                DateTime dapproved = Convert.ToDateTime(dt.Rows[0]["date_approved"].ToString());
                DateTime dexpiry = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                ViewBag.dateapproved = dapproved.ToShortDateString();
                ViewBag.expirydate = dexpiry.ToShortDateString();
                ViewBag.dob = ddob.ToShortDateString();
                ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


                DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
                if (result_remarks.Rows.Count > 0)
                {
                    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    {
                        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    }
                }
                DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
                if (qualificationdt.Rows.Count > 0)
                {
                    ViewBag.qualdata = qualificationdt;
                }

            }
            return View();
        }
        catch (Exception ex)
        {
            return View();
        }
    }
    public ActionResult regi_search_submits(FormCollection frm)
    {

        string clientCaptcha = frm["CL_CAPCHA"].ToString();
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;

            return Json("-1");
        }
        string msg = "";
        //string type = Regd_ID;
        //string regid = Type;
        string type = frm["type"].Trim();
        string regid = frm["regid"].Trim();
        string colname = "*";
        string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
        if (dt.Rows.Count > 0)
        {
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
            if (result_remarks.Rows.Count > 0)
            {
                for (int i = 0; i < result_remarks.Rows.Count; i++)
                {
                    ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                }
            }
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult search_ur_dr_submit(FormCollection frm)
    {
        try
        {



            string First_Name = Request.QueryString["First_Name"];
            string Last_Name = frm["Last_Name"];
            string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
            string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
            string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
            string Mobile = Request.QueryString["Mobile"];
            string Email = Request.QueryString["Email"];

            if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Last_Name) && !string.IsNullOrEmpty(Corr_Add_Line_1) && !string.IsNullOrEmpty(Corr_Add_Line_2) && !string.IsNullOrEmpty(Corr_Add_Pincode) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Mobile='" + Mobile + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}

                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "Email='" + Email + "' and Mobile='" + Mobile + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }


            return View();
        }
        catch (Exception ex)
        {
            return View();

        }
    }


    public ActionResult search_ur_dr_submit2(FormCollection frm)
    {
        string msg = "";
        string First_Name = frm["First_Name"];
        string Last_Name = frm["Last_Name"];
        string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
        string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
        string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
        string Mobile = frm["Mobile"];
        string Email = frm["Email"];

        string condtions = "First_Name='" + First_Name.Trim() + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
        if (dt.Rows.Count > 0)
        {
            //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
            //if (result_remarks.Rows.Count > 0)
            //{
            //    for (int i = 0; i < result_remarks.Rows.Count; i++)
            //    {
            //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
            //    }
            //}
            string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", condtions2);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        else
        {
            msg = "Not Data Found";
        }


        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult cme()
    {
        return View();
    }
    public ActionResult status_comp2021()
    {
        return View();
    }

    public ActionResult ForgetEmailPasswordProv()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public dynamic getForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB)
    {
        //select pu.First_Name,pu.Last_Name,pu.email,pu.Mobile from pisl_users as pu inner join pisl_prov_regi_qual_mst as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type where pu.Regd_ID = 18430 and pu.DOB = '1991-10-26' and pfq.passing_date = 2016 and pfq.quali_course = 'M.B.B.S.'
        List<dynamic> OBJ = new List<dynamic>();
        string dob = lk.convertdate1(txt_DOB);
        try
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else {
                db = "pisl_fresh_regi_qual_mst";
            }

            DataTable dt1 = dal.GetList("pisl_users as pu inner join "+db+" as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType.ToUpper() + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                OBJ.Add(MRPLookup.Convert_DatatableToList(dt1).ToList());
                return Json(OBJ, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        catch (Exception)
        {

            return null;
        }
        
    }

    public string otpForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail)
    {
        string message = string.Empty;
        string dob = lk.convertdate1(txt_DOB);
        string db = "";
        if (txtRegType.ToUpper() == "PROV")
        {
            db = "pisl_prov_regi_qual_mst";
        }
        else
        {
            db = "pisl_fresh_regi_qual_mst";
        }
        DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
        if (dt1.Rows.Count > 0)
        {
            MailFormat mf = new MailFormat();
            string code = MRPLookup.RandamStringGenerator1();
            Session["provotp"] = code;
            string mailBody = "Your OTP is: " + code + ". DMC";
            string sendmailStatus= MRPLookup.sendMail(txtEmail.Trim(), "DMC | OTP Verification", mailBody, "", "");


            //string mailBody = mf.SendCodeOnMail(dt1.Rows[0]["First_Name"].ToString(), code);
            //string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(),"Reset Password Code" + System.DateTime.Now + "", mailBody, "", "");
            if (sendmailStatus != "Technical issue! Please try agiain")
            {
                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

            }
            else
            {
                message = sendmailStatus;
            }


            return message;
        }
        return "Some thing went wrong...!";
    }

    public string submitForgetEmailPasswordProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail, string txtMobileNo,string CaptchaCaseID,string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (Session["provotp"].ToString()!=txtCode)
        {
            return "Otp incorrect";
        }

        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact Captcha as written below.";
            // return message;
        }
        else
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else
            {
                db = "pisl_fresh_regi_qual_mst";
            }
            string dob = lk.convertdate1(txt_DOB);
            DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile,pu.Regd_ID,pu.Regd_Type", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                if (Convert.ToString(dt1.Rows[0]["Regd_ID"]) != "" && Convert.ToString(dt1.Rows[0]["Regd_Type"]) != "")
                {
                      string colValue = "Email='" + txtEmail.Trim() + "',Mobile='" + txtMobileNo.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                      updPassword = dal.Updation("pisl_users", colValue, "Regd_ID='"+dt1.Rows[0]["Regd_ID"].ToString()+ "' and Regd_Type='"+ dt1.Rows[0]["Regd_Type"].ToString() + "'");
               
                   
                     var tblCurrentStatuscolomns = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                     var Currentupdatestatuss = dal.Updation("pisl_temp_registrations", tblCurrentStatuscolomns, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");

                    var tblCurrentStatuscolomns1 = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                    var Currentupdatestatuss1 = dal.Updation("pisl_fresh_registration_mst", tblCurrentStatuscolomns1, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");



                    message = "Your Email and Mobile Changed successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                    //MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                   // Send SMS and mail for password reset.
                }
                else
                {
                    message = "Please try after some time";
                }
            }
            else
            {
                message = "Data Not found..!";
            }
        }
        return message;
    }
    public string sendOTP(string EmailId)
    {
        string message = "";
        string cond = "email='" + EmailId + "'";
        DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
        if (dtLogin.Rows.Count > 0)
        {
            string mobile = dtLogin.Rows[0]["Mobile"].ToString();
            Session["otp"] = GetRandomText();
            string OTP = Session["otp"].ToString();
            //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
            string mailBody = "Your OTP is: " + OTP + ". DMC";
            MRPLookup.sendMail(EmailId.Trim(), "DMC | OTP Verification", mailBody, "", "");
            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
            MRPLookup.SendSMS("otp", mobile.Trim(), "", "", OTP, "", "", "", "", "", "", "");
            message = "Please check your email or Mobile for OTP";
        }
        else
        {
            message = "Email not found, Please enter a valid email";
        }
        return message;
    }

    public ActionResult ChangePassward(FormCollection frm)
    {
        string Result = "";
        if (frm["txtOTP"].ToString() == Session["OTP"].ToString())
        {
            if (frm["txt_password"].Length >= 8 && frm["txt_password"].Length <= 18)
            {
                Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                Boolean foundMatch = regexObj.IsMatch(frm["txt_password"]);
                if (foundMatch == true)
                {
                    string where = "email='" + frm["txt_email"] + "'";// and Mobile='"+ frm["txt_contactno"] + "'";
                    DataTable dt_dr_details = dal.GetList("pisl_users", "*", where);
                    if (dt_dr_details != null)
                    {
                        if (dt_dr_details.Rows.Count > 0)
                        {
                            string pass = Encrypt(frm["txt_password"].Trim());
                            string col = " password='" + pass + "'";
                            var update = dal.Updation("pisl_users", col, "email='" + dt_dr_details.Rows[0]["email"].ToString() + "'");
                            if (update == 0)
                            {
                                string hostName = Dns.GetHostName();
                                string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                string colName = "activity,email,password,ip,system,description,date";
                                string colValue = "'Change Passs','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + frm["txt_password"].ToString().Trim() + "','" + IP + "','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + pass + "',getdate()";
                                int ins = dal.insertion("tbl_activity", colName, colValue);
                                string message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                MRPLookup.SendSMS("forgot_pwd", dt_dr_details.Rows[0]["Mobile"].ToString(), dt_dr_details.Rows[0]["First_Name"].ToString(), dt_dr_details.Rows[0]["Last_Name"].ToString(), "", "", dt_dr_details.Rows[0]["email"].ToString(), frm["txt_password"].ToString().Trim(), "", "", "", "");
                                Result = "0";
                            }
                            else
                            {
                                Result = "Somthing wrong Error !";
                            }
                        }
                        else
                        {
                            Result = "This is not registered email please check.";
                        }
                    }
                }
                else
                {
                    Result = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                }
            }
            else
            {
                Result = "Password Length must between 8 to 18 letters";
            }
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
    public ActionResult verifyOTP(string otp)
    {
        string Result = "";
        if (otp == Session["otp"].ToString())
        {
            Result = "DONE";
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
}
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using DelhimedicalcouncilORG;
using System.Data;
using System.Security.Cryptography;
using System.Text;
using System.IO;
using System.Drawing;
using System.Net;
using System.Net.Mail;

using System.Text.RegularExpressions;
using System.Data.SqlClient;
using System.Configuration;

namespace DelhimedicalcouncilORG.Controllers
{
public class homeController : Controller
{
    // GET: home
    DAL dal = new DAL();
    MRPLookup lk = new MRPLookup();
    MailFormat mf = new MailFormat();


    private string RetrieveContent(string webPage)
    {
        HttpWebResponse response = null;//used to get response
        StreamReader respStream = null;//used to read response into string
        try
        {
            //create a request object using the url passed in
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(webPage);
            request.Timeout = 10000;

            //go get a response from the page
            response = (HttpWebResponse)request.GetResponse();

            //create a streamreader object from the response
            respStream = new StreamReader(response.GetResponseStream());

            //get the contents of the page as a string and return it
            return respStream.ReadToEnd();
        }
        catch (Exception ex)//houston we have a problem!
        {
            throw ex;
        }
        finally
        {
            //close it down, we’re going home!
            response.Close();
            respStream.Close();
        }
    }

    //using a regular expression, find all of the href or urls
    //in the content of the page
    private void GetAllUrls(string content)
    {
        //regular expression
        string pattern = @"(?:href\s*=)(?:[\s""']*)(?.*?)(?:[\s>""'])";

        //Set up regex object
        Regex RegExpr = new Regex(pattern, RegexOptions.IgnoreCase);

        //get the first match
        Match match = RegExpr.Match(content);

        //loop through matches
        while (match.Success)
        {

            //output the match info
            Console.WriteLine("href match: " + match.Groups[0].Value);
            //WriteToLog(@"C:\matchlog.txt", "href match: " + match.Groups[0].Value + "\r\n");

            Console.WriteLine("Url match: " + match.Groups[1].Value);
            //WriteToLog(@"C:\matchlog.txt", "Url | Location | mailto match: " + match.Groups[1].Value + "\r\n");

            //get next match
            match = match.NextMatch();
        }
    }

    //Write to a log file
    //private void WriteToLog(string file, string message)
    //{
    //using (StreamWriter w = File.AppendText(file))
    //{
    //w.WriteLine(DateTime.Now.ToString() + ": " + message); w.Close();
    //}
    //}




    /// <summary>
    /// ////////////////////////
    /// </summary>
    /// <returns></returns>
    /// 

    public ActionResult Index()
    {




        return View();
    }
    //Start Login//
    public ActionResult login()
    {
        // Session["CAPTCHA"] = "111111";// GetRandomText();
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }

    
    public string Login_Form(string EmailId, string password, string ip, string captcha)
    
    {



        var dateTime = DateTime.Now;
        var tt = dateTime.Hour;


        var dayOfWeek = dateTime.DayOfWeek;
        var day = dayOfWeek.ToString();

        //Decrypt("","");
        //70789
        //554e981f4946f37a4818f1cea3928fe3
        //drtushargupta90@gmail.com
        string message = string.Empty;
        string clientCaptcha = captcha;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            ViewBag.CaptchaError = "Sorry, please write exact text as written above.";
            message = "11,11";
            return message;
        }
        else
            if (Session["checkSession"] == null)
        {
            ip = Request.ServerVariables["REMOTE_ADDR"].ToString();

            string pass = Encrypt(password);
            // string decoded = MRPLookup.Decrypt1(HttpUtility.UrlDecode(pass));
            string cond = "email='" + EmailId + "' and password='" + pass + "' and active!=3 ";//and active=1
            DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
            if (dtLogin.Rows.Count > 0)
            {
                if (Convert.ToString(dtLogin.Rows[0]["Regd_Type"]) == "PROV" && dtLogin.Rows.Count == 1)
                {
                    DataTable dt_temp_D = dal.GetList("pisl_temp_registrations", "Regd_ID,Regd_Type,Final_Status,Approved_By,date_approved,type", "email='" + EmailId.Trim() + "' order by ID desc");
                    for (int i = 0; i < dt_temp_D.Rows.Count; i++)
                    {
                        if (Convert.ToString(dt_temp_D.Rows[i]["Regd_Type"]) != "PROV" && Convert.ToString(dt_temp_D.Rows[i]["Final_Status"]) == "Approved" && Convert.ToString(dt_temp_D.Rows[i]["Approved_By"]) != null && Convert.ToString(dt_temp_D.Rows[i]["date_approved"]) != null && Convert.ToString(dt_temp_D.Rows[i]["type"]) != "service")
                        {



                            string colnameWithValue = "Regd_ID=" + Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]) + ",Regd_Type='" + dt_temp_D.Rows[i]["Regd_Type"].ToString() + "'";
                            string conditions = "S_No=" + Convert.ToInt32(dtLogin.Rows[0]["S_No"]) + "";
                            var Update_paymentUpdate = dal.Updation("pisl_users", colnameWithValue, conditions);
                            if (Update_paymentUpdate == 0)
                            {
                                dtLogin.Rows[0]["Regd_ID"] = Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]);
                                dtLogin.Rows[0]["Regd_Type"] = dt_temp_D.Rows[i]["Regd_Type"].ToString();

                            }
                            break;
                        }
                    }
                }


                for (int i = 0; i < dtLogin.Rows.Count; i++)
                {
                    string hash = Convert.ToString(dtLogin.Rows[i]["hash"]);
                    string decryptedstring = Decrypt(pass, hash);

                    string gid = Convert.ToString(dtLogin.Rows[i]["GID"]);
                    //string active = Convert.ToString(dtLogin.Rows[0]["active"]);
                    if (gid == "0")//Login for doctor
                    {
                        //DataTable dt_lastloginRecord = dal.GetList("pisl_users where email='" + EmailId + "' order by S_No desc", "TOP 1 *", "");
                        if (dtLogin != null && dtLogin.Rows.Count > 0)
                        {

                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[i]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[i]["Regd_Type"]);
                            }
                            else
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                            }
                            if (dtLogin.Rows[i]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[i]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }

                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                        }
                        else
                        {
                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[0]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            }
                            if (dtLogin.Rows[0]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }
                        }


                        message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 2;
                    }
                    else if (gid == "1")//Login for internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["isno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 1;
                            }
                            else
                            {
                                message = "0,6";
                            }
                        }

                        else
                        {
                            message = "0,5";
                        }
                    }
                    else if (gid == "2")//Login for admin and internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["asno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 3;
                            }
                            else
                            {
                                message = "0,6";
                            }

                        }
                        else
                        {
                            message = "0,5";
                        }
                    }
                }
            }
            else
            {
                message = "0,0";
            }
        }
        else
        {
            message = "10,10";
        }
        return message;
    }

    public string Encrypt(string password)
    {
        // Decrypt("", "");
        //string password = @"1234abcd";

        // byte array representation of that string
        byte[] encodedPassword = new UTF8Encoding().GetBytes(password);

        // need MD5 to calculate the hash
        byte[] hash = ((HashAlgorithm)CryptoConfig.CreateFromName("MD5")).ComputeHash(encodedPassword);

        // string representation (similar to UNIX format)
        string encoded = BitConverter.ToString(hash)
           // without dashes
           .Replace("-", string.Empty)
           // make lowercase
           .ToLower();
        return encoded;
    }
    public string Decrypt(string password, string hash1)
    {//https://md5decrypt.net/#answer
        string ss = "";
        string source = "zdNot3oAz5I%3DjRspJg78a%2FY%3D";// "Hello World!";
        MD5 md5 = System.Security.Cryptography.MD5.Create();
        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(password);
        byte[] hash = md5.ComputeHash(inputBytes);

        // step 2, convert byte array to hex string
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < hash.Length; i++)
        {
            sb.Append(hash[i].ToString("X2"));
        }
        return sb.ToString();
    }
    static string GetMd5Hash(MD5 md5Hash, string input)
    {

        // Convert the input string to a byte array and compute the hash.
        byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));

        // Create a new Stringbuilder to collect the bytes
        // and create a string.
        StringBuilder sBuilder = new StringBuilder();

        // Loop through each byte of the hashed data 
        // and format each one as a hexadecimal string.
        for (int i = 0; i < data.Length; i++)
        {
            sBuilder.Append(data[i].ToString("x2"));
        }

        // Return the hexadecimal string.
        return sBuilder.ToString();
    }
    public FileResult GetCaptchaImage()
    {
        MemoryStream ms = new MemoryStream();
        if (Session["CAPTCHA"] != null)
        {
            string text = Session["CAPTCHA"].ToString();

            //first, create a dummy bitmap just to get a graphics object
            Image img = new Bitmap(1, 1);
            Graphics drawing = Graphics.FromImage(img);

            Font font = new Font("Jokerman", 15);
            //measure the string to see how big the image needs to be
            SizeF textSize = drawing.MeasureString(text, font);

            //free up the dummy image and old graphics object
            img.Dispose();
            drawing.Dispose();

            //create a new image of the right size
            img = new Bitmap((int)textSize.Width + 40, (int)textSize.Height + 20);
            drawing = Graphics.FromImage(img);

            Color backColor = Color.SeaShell;
            Color textColor = Color.Red;
            //paint the background
            drawing.Clear(backColor);

            //create a brush for the text
            Brush textBrush = new SolidBrush(textColor);

            drawing.DrawString(text, font, textBrush, 20, 10);

            drawing.Save();

            font.Dispose();
            textBrush.Dispose();
            drawing.Dispose();


            img.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
            img.Dispose();

            return File(ms.ToArray(), "image/png");
        }
        else
        {
            return File(ms.ToArray(), "image/png");
        }
    }
    private string GetRandomText()
    {
        StringBuilder randomText = new StringBuilder();
        string alphabets = "12345679ABCEFGHKLMNPRSTUVWXZ";
        Random r = new Random();
        for (int j = 0; j <= 5; j++)
        {
            randomText.Append(alphabets[r.Next(alphabets.Length)]);
        }
        return randomText.ToString();
    }
    //End Login//
    public ActionResult signup()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    [HttpPost]
    public string sendotpsignup(string txt_Email, string txt_ContactNo)
    {
        string msg = "";
        try
        {
            var CheckEmail = IsEmailandMobileExists(txt_Email, "");
            var checkMobile = IsEmailandMobileExists("", txt_ContactNo);
            if (CheckEmail == false && checkMobile == false)
            {

                Session["otp"] = GetRandomText();
                string OTP = Session["otp"].ToString();
                //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
                string mailBody = "Your OTP is: " + OTP + ". DMC";
                MRPLookup.sendMail(txt_Email.Trim(), "DMC | OTP Verification", mailBody, "", "");

                //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
              

                MRPLookup.SendSMS("otp", txt_ContactNo.Trim(), "", "", OTP, "", "", "", "", "", "", "");
                msg = "0";
            }
            else if (CheckEmail == true && checkMobile == true)
            {
                msg = "Email and Mobile no. are already exists!!";
            }
            else
            {
                if (checkMobile == true && CheckEmail == false)
                {
                    msg = "Mobile No. is Already Exists!!";
                }
                else if (CheckEmail == true && checkMobile == false)
                {
                    msg = "Email Address is Already Exists!!";
                }


            }
        }
        catch (Exception ex)
        {
            msg = "1";
        }
        return msg;
    }
    public bool IsEmailandMobileExists(string email, string mobile)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        try
        {
            tableName = "pisl_users";
            colname = "*";
            if (!string.IsNullOrEmpty(email))
            {
                cond = "email='" + email + "'";
            }
            if (!string.IsNullOrEmpty(mobile))
            {
                cond = "mobile='" + mobile + "'";
            }
            //cond=
            DataTable dt_datacheck = dal.GetList(tableName, colname, cond);
            if (dt_datacheck != null && dt_datacheck.Rows.Count > 0)
            {
                IsExists = true;
            }

        }
        catch (Exception ex)
        {
            IsExists = false;
            throw;
        }
        return IsExists;
    }

    public ActionResult IsDocDataExists(string regd_type, string regd_no, string DOB, string PassingYear)
    {
        //List<dynamic> list = new List<dynamic>();
        string message = "";
        try
        {
            var tbl_name = "";

            var userExists = IsRegd_Exists(regd_type, regd_no, DOB, PassingYear, out tbl_name);
            if (userExists == true && tbl_name == "pisl_users")
            {

                message = "Already Registered With us. Please Login With Your Credential";
            }
            else
                if (userExists == true && tbl_name == "pisl_fresh_registration_mst")
            {
                message = "Your Registration No. is Expired. Please SignUp Again.";
            }
            else
            {
                message = "NotExists";
                //message = "Your Registration No. is Not Exists!";
            }
        }
        catch (Exception ex)
        {

        }
        return Json(message, JsonRequestBehavior.AllowGet);
    }
    public bool IsRegd_Exists(string regd_type, string regd_no, string DOB, string PassingYear, out string Tbl_Name)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        Tbl_Name = "";
        DataTable dt_UserCheck = null;
        try
        {
            tableName = "pisl_users";
            colname = "*";
            cond = "Regd_Type='" + regd_type + "' and Regd_ID='" + regd_no.Trim() + "'";
            dt_UserCheck = dal.GetList(tableName, colname, cond);
            if (dt_UserCheck == null || dt_UserCheck.Rows.Count == 0)
            {
                tableName = "pisl_fresh_regi_qual_mst";
                colname = "*";
                cond = "quali_type='Basic Qualification' AND Regd_ID='" + regd_no + "' "
                    + "AND Regd_Type='" + regd_type + "' AND passing_date =  '" + PassingYear.Trim() + "'";
                dt_UserCheck = dal.GetList(tableName, colname, cond);
                if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                {
                    Tbl_Name = "pisl_fresh_regi_qual_mst";

                    tableName = "pisl_fresh_registration_mst";
                    colname = "*";
                    cond = "Regd_ID='" + regd_no + "' AND Regd_Type='" + regd_type + "'";
                    dt_UserCheck = dal.GetList(tableName, colname, cond);
                    if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                    {
                        Tbl_Name = "pisl_fresh_registration_mst";
                        IsExists = true;
                    }
                    else
                    {
                        IsExists = false;
                    }
                }
                else
                {

                    IsExists = false;
                }
            }
            else
            {
                Tbl_Name = "pisl_users";
                IsExists = true;
            }
        }
        catch (Exception ex)
        {


            throw;
        }
        return IsExists;
    }

    [HttpPost]
    public string createsignup(string txt_Email, string txt_ContactNo, string txt_FirstName, string txt_MiddleName,
        string txt_LastName, string txt_Password, string txt_ConfirmPassword, string txt_DOB, bool chk_TermCondition,
        string Captcha, string Regd_ID, string txtOTP, string ddl_regType, string txt_oldData, string passingYear)
    {
        string message = "";
        string dob = lk.convertdate1(txt_DOB);
        string Tbl_Name = "";
        try
        {
            if (!IsEmailandMobileExists(txt_Email, ""))
            {
                if (!IsEmailandMobileExists("", txt_ContactNo))
                {
                    if (ddl_regType == "FRS" || ddl_regType == "RRE")
                    {
                        if (IsRegd_Exists(ddl_regType, Regd_ID, dob, passingYear, out Tbl_Name))
                        {
                            Tbl_Name = Tbl_Name;
                            if (Tbl_Name == "pisl_users")
                            {
                                //if Pisl_user Table Record Exists but no Email and Mobile No exists
                                //in this case update the Email and Mobile No.
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        DataTable dt_Email_Mobile_Check = dal.GetList("pisl_users",
                                                        "top 1*", " Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                        if (dt_Email_Mobile_Check != null)
                                                        {
                                                            if (dt_Email_Mobile_Check.Rows.Count > 0)
                                                            {
                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_Email_Mobile_Check.Rows[0]["email"])))
                                                                {
                                                                    string pass = Encrypt(txt_Password.Trim());
                                                                    string hash = Encrypt(MRPLookup.RandamStringGenerator1());
                                                                    var updateDt = dal.Updation("pisl_users",
                                                                        "email='" + txt_Email.Trim() + "',mobile='" + txt_ContactNo.Trim() + "',password='" + pass + "',hash='" + hash + "'",
                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                    if (updateDt == 0)
                                                                    {
                                                                        DataTable dt_fresh_Check = dal.GetList("pisl_fresh_registration_mst",
                                                                            "top 1 * ",
                                                                            "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                        if (dt_fresh_Check != null)
                                                                        {
                                                                            if (dt_fresh_Check.Rows.Count > 0)
                                                                            {
                                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_fresh_Check.Rows[0]["Email"])))
                                                                                {
                                                                                    var updateDt_fresh = dal.Updation("pisl_fresh_registration_mst",
                                                                                        "Email='" + txt_Email.Trim() + "',Mobile='" + txt_ContactNo.Trim() + "'",
                                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");

                                                                                    if (updateDt_fresh != 0)
                                                                                    {
                                                                                        message = "Error!!";
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                                        MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                                        message = "Please, Check Your Mail For Login Details";
                                                                        //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                                        MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                                    }
                                                                    else
                                                                    {
                                                                        message = "Error!!";
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    message = "Your record are already Exists with us!!";
                                                                }
                                                            }
                                                        } //End Updation
                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }
                            else if (Tbl_Name == "pisl_fresh_regi_qual_mst" || Tbl_Name == "pisl_fresh_registration_mst")
                            {
                                //Insert Login Record in Pisl_Users
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        string pass = Encrypt(txt_Password.Trim());
                                                        string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                        if (string.IsNullOrEmpty(Regd_ID))
                                                        {
                                                            Regd_ID = "0";
                                                        }
                                                        //if (txt_oldData != "")
                                                        //{
                                                        //    string colnamemst = "*";
                                                        //    string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        //    DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        //    if (dtrmst.Rows.Count > 0)
                                                        //    {
                                                        //        string oldtype = "";
                                                        //        if (ddl_regType == "FRS")
                                                        //        {
                                                        //            oldtype = "service";
                                                        //        }
                                                        //        else if (ddl_regType == "RRE")
                                                        //        {
                                                        //            oldtype = "reregi";
                                                        //        }
                                                        //        var corrAddress1 = dtrmst.Rows[0]["Corr_Add_Line_1"].ToString();
                                                        //        var corrAddress2 = dtrmst.Rows[0]["Corr_Add_Line_2"].ToString();
                                                        //        var perAddress1 = dtrmst.Rows[0]["Per_Add_Line_1"].ToString();
                                                        //        var perAddress2 = dtrmst.Rows[0]["Per_Add_Line_2"].ToString();

                                                        //        string colNameold = "Regd_ID,Regd_Type,type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,date_entered,Father_Name,POB,Gender,Nationality,Corr_Add_Line_1,Corr_Add_Line_2,Corr_Add_State,Corr_Add_Pincode,Corr_Add_Country,Per_Add_Line_1,Per_Add_Line_2,Per_Add_Line_State,Per_Add_Line_Pincode,Per_Add_Line_Country";

                                                        //        string colValueold = "'" + Regd_ID + "','" + ddl_regType + "','" + oldtype + "','" + txt_FirstName + "','" + txt_MiddleName + "','"  + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "', '"+ lk.GetDateTime()+ "' ,'"+ dtrmst.Rows[0]["Father_Name"] + "','" + dtrmst.Rows[0]["POB"] + "','" + dtrmst.Rows[0]["Gender"] + "','" + dtrmst.Rows[0]["Nationality"] + "','" + corrAddress1 + "','" + corrAddress2 + "','" + dtrmst.Rows[0]["Corr_Add_State"] + "','" + dtrmst.Rows[0]["Corr_Add_Pincode"] + "','" + dtrmst.Rows[0]["Corr_Add_Country"] + "','" + perAddress1 + "','" + perAddress2 + "','" + dtrmst.Rows[0]["Per_Add_Line_State"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Pincode"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Country"] + "'";
                                                        //        int insold = dal.insertion("pisl_temp_registrations", colNameold, colValueold);
                                                        //    }
                                                        //}
                                                        Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                        string colnamemst = "*";
                                                        string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        DateTime txtdob1 = Convert.ToDateTime(dtrmst.Rows[0]["DOB"]);
                                                        string txtdob = txtdob1.ToShortDateString();

                                                        string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                            + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                        string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + dtrmst.Rows[0]["First_Name"].ToString() + "','" + dtrmst.Rows[0]["Middle_Name"].ToString() + "',"
                                                            + "'" + dtrmst.Rows[0]["Last_Name"].ToString() + "','" + txtdob + "','" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                            + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                        int ins = dal.insertion("pisl_users", colName, colValue);
                                                        if (ins == 0)
                                                        {
                                                            string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                            MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                            message = "Please, Check Your Mail For Login Details";
                                                            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                            MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                        }
                                                        else
                                                        {
                                                            message = "Try after some time";
                                                        }

                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }

                        }
                        else
                        {
                            message = "Your Registration No and Passing Year is Not Exist with Us";
                        }
                    }
                    else
                    {
                        //Insert Login Record in Pisl_Users
                        if (chk_TermCondition == true)
                        {
                            if (txtOTP == Session["otp"].ToString())
                            {
                                if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                {
                                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                    Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                    if (foundMatch == true)
                                    {
                                        if (txt_Password == txt_ConfirmPassword)
                                        {
                                            if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                            {
                                                //if (Tbl_Name== "pisl_users") { }
                                                string pass = Encrypt(txt_Password.Trim());
                                                string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                if (string.IsNullOrEmpty(Regd_ID))
                                                {
                                                    Regd_ID = "0";
                                                }
                                                Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                if (ddl_regType == "-1")
                                                {
                                                    ddl_regType = "";
                                                }


                                                string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                    + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                int ins = dal.insertion("pisl_users", colName, colValue);
                                                if (ins == 0)
                                                {
                                                    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                    message = "Please, Check Your Mail";
                                                    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                }
                                                else
                                                {
                                                    message = "Try after some time";
                                                }

                                                //string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                //    + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                //string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                //    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                //    + "1,0,0,'"+ lk.GetDateTime()+ "','','" + Regd_ID1 + "'";
                                                //int ins = dal.insertion("pisl_users", colName, colValue);
                                                //if (ins == 0)
                                                //{
                                                //    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                //    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                //    message = "Please, Check Your Mail";
                                                //    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                //    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                //}
                                                //else
                                                //{
                                                //    message = "Try after some time";
                                                //}
                                            }
                                            else
                                            {
                                                message = "Enter A Valid Email";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password and Confrim Password is Not Same";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                    }
                                }
                                else
                                {
                                    message = "Password Length must between 8 to 18 letters";
                                }
                            }
                            else
                            {
                                message = "Enter the Valid OTP";
                            }
                        }
                        else
                        {
                            message = "Please check the Terms and Conditions";
                        }

                        //}
                    }
                }
                else
                {
                    message = "Mobile No. is Already Exists";
                }
            }
            else
            {
                message = "Email Already exists!!";
            }
            //
            //Cut the Code From There

        }
        catch
        {

        }
        return message;
    }

    public ActionResult SignupVerification()
    {
        string message = "";
        try
        {
            if (Request.QueryString["email"] != null && Request.QueryString["hash"] != null)
            {
                string email = Request.QueryString["email"];
                string hash = Request.QueryString["hash"];
                string cond = "Email='" + email.Trim() + "' and Hash='" + hash.Trim() + "' and Active=0";
                DataTable dt = dal.GetList("pisl_users", "*", cond);
                if (dt.Rows.Count > 0)
                {
                    int upd = dal.Updation("pisl_users", "Active=1", cond);
                    if (upd == 0)
                    {
                        message = "Your account has been activated, you can now login";
                    }
                    else
                    {
                        message = "Try after some time";
                    }
                }
                else
                {
                    message = "The url is either invalid or you already have activated your account.";
                }
            }
            else
            {
                message = "Invalid approach, please use the link that has been send to your email.";
            }
        }
        catch
        { }
        ViewBag.lbl_status = message;
        return View();
    }
    public ActionResult contact()
    {
        return View();
    }

    public ActionResult about()
    {
        return View();
    }
    public ActionResult faqs()
    {
        return View();
    }
    // Start forgot password
    public ActionResult forgotpassword()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public string sendCode(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        string message = string.Empty;
        try
        {
            string clientCaptcha = CaptchaCaseID;
            string serverCaptcha = Session["CAPTCHA"].ToString();
            if (!clientCaptcha.Equals(serverCaptcha))
            {
                ViewBag.ShowCAPTCHA = serverCaptcha;
                message = "Sorry, please write exact text as written below.";
            }
            else
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' ";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string name = Convert.ToString(dt.Rows[0]["First_Name"]);
                                        string Mobile = Convert.ToString(dt.Rows[0]["Mobile"]);

                                        MailFormat mf = new MailFormat();
                                        string code = MRPLookup.RandamStringGenerator1();
                                        string mailBody = mf.SendCodeOnMail(name, code);
                                        MRPLookup.SendSMS("otp", Mobile, "", "", code, "", "", "", "", "", "", "");
                                        string colValue = "Code='" + code.Trim() + "'";
                                        int updCode = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "'");
                                        if (updCode == 0)
                                        {
                                            string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(), "Reset Password Code " + System.DateTime.Now + "", mailBody, "", "");
                                            if (sendmailStatus != "Technical issue! Please try agiain")
                                            {
                                                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

                                            }
                                            else
                                            {
                                                message = sendmailStatus;
                                            }
                                        }
                                        else
                                        {
                                            message = "Please try after some time.";
                                        }

                                    }
                                    else
                                    {
                                        message = "Enter a New Password.";
                                    }
                                }
                                else
                                {
                                    message = "Your Email And Mobile Number Do not Match with DMC Registered Users.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
        }
        catch (Exception ex)
        {

        }
        return message;
    }
    public string forgotpasswordCaseID(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact text as written below.";
            // return message;
        }
        else
        {
            if (txtCode != "0")
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string mobile = Convert.ToString(dt.Rows[0]["Mobile"]);
                                    string firstName = Convert.ToString(dt.Rows[0]["First_Name"]);
                                    string lastName = Convert.ToString(dt.Rows[0]["Last_Name"]);
                                    //string new_password = Encrypt(MRPLookup.RandamStringGenerator1());
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string colValue = "password='" + new_PasswordMD5.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                                        updPassword = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                        if (updPassword == 0)
                                        {
                                            updPassword = dal.Updation("pisl_users", "Code='0'", "Email='" + txtEmail.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                            string hostName = Dns.GetHostName();
                                            string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                            string colName = "activity,email,password,ip,system,description,date";
                                            colValue = "'Change Passs','" + txtEmail + "','" + txtPassword + "','" + IP + "','" + mobile + "','" + new_PasswordMD5 + "',getdate()";
                                            int ins = dal.insertion("tbl_activity", colName, colValue);
                                            message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                            MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                                            // Send SMS and mail for password reset.
                                            

                                        }
                                        else
                                        {
                                            message = "Please try after some time";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please try another password.";
                                    }

                                }
                                else
                                {
                                    message = "Your Details Dont Match or You have NOT registered with DMC.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
            else
            {
                message = "Code not match";
            }
        }
        return message;
    }

    public ActionResult introduction()
    {
        return View();
    }

    public ActionResult powers()
    {
        return View();
    }

    public ActionResult thecouncil()
    {
        return View();
    }

    //public ActionResult gallery()
    //{
    //    return View();
    //}
    public ActionResult Gallery()
    {
        return View();
    }

    public ActionResult accomplishments()
    {
        return View();
    }

    public ActionResult registration()
    {
        return View();
    }
    public ActionResult cmeperforma()
    {
        return View();
    }
    public ActionResult cmeonline()
    {
        return View();
    }
    public ActionResult cmerequirements()
    {
        return View();
    }
    public ActionResult cmepassbook()
    {
        return View();
    }
    public ActionResult duties()
    {
        return View();
    }
    public ActionResult inst_general()
    {
        return View();
    }

    public ActionResult inst_fees()
    {
        return View();
    }
    public ActionResult inst_docupload()
    {
        return View();
    }
    public ActionResult disclaimer()
    {
        return View();
    }
    public ActionResult feestructure()
    {
        return View();
    }
    public ActionResult privacypolicy()
    {
        return View();
    }
    public ActionResult termofuse()
    {
        return View();
    }

    public ActionResult litigations()
    {
        return View();
    }


    public ActionResult council_meeting()
    {
        return View();
    }
    public ActionResult Cme_workshop_Conference()
    {
        return View();
    }

    public ActionResult Media_room()
    {
        return View();
    }
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    public ActionResult LogOut()
    {
        Session.Abandon();
        return RedirectToAction("Index", "Home");
    }
    public ActionResult SearchElectrolData(string regid)
    {
        string msg = "";
        DataTable dtSearch = dal.GetList("tbl_electrolData", "*", "RegNo='" + regid.Trim() + "'");
        if (dtSearch.Rows.Count > 0)
        {
            return Json(MRPLookup.DataTableToJSONWithJSONNet(dtSearch), JsonRequestBehavior.AllowGet);
        }
        else
        {
            msg = "Data not found";
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
    }
    public ActionResult SearchElectrolDataUpdate(string regid)
    {
        int upd = 1;
        upd = dal.Updation("tbl_electrolData", "Status='Completed',Date='" + lk.GetDateTime() + "'", "ID='" + regid.Trim() + "'");
        if (upd == 0)
        {

            return Json(upd, JsonRequestBehavior.AllowGet);
        }
        else
        {
            return Json(upd, JsonRequestBehavior.AllowGet);
        }
    }

    public ActionResult TotalCount()
    {
        DataTable dtcntCompleted = dal.GetList("tbl_electrolData", "count(*) as cntCompleted", "status='Completed'");
        DataTable dtcntNotCompleted = dal.GetList("tbl_electrolData", "count(*) as cntNotCompleted", "status ='Valid'");
        string totalCmpleteStatus = "Completed: " + Convert.ToString(dtcntCompleted.Rows[0]["cntCompleted"]) + "  Not Completed: " + Convert.ToString(dtcntNotCompleted.Rows[0]["cntNotCompleted"]);
        return Json(totalCmpleteStatus, JsonRequestBehavior.AllowGet);
    }
    public ActionResult Renewal_Reminder(string key)
    {
        string msg = "";
        try
        {

            key = "1111";
            string validKey = "1111";
            // MRPLookup.SendSMS("Renewal_expired_tdy", "9899849487", "Dinesh", "", "", "", "", "", "", "", "", "");
            if (key == validKey)
            {
                string expiry_frtyfive = Convert.ToDateTime(DateTime.Now.AddDays(30)).ToString("yyyy-MM-dd");//date(('Y-m-d'), strtotime('+30 days'));
                string expiry_tdy = Convert.ToDateTime(DateTime.Now).ToString("yyyy-MM-dd");//date('Y-m-d');
                string expiry_pastfifty = Convert.ToDateTime(DateTime.Now.AddDays(-50)).ToString("yyyy-MM-dd");// date(('Y-m-d'), strtotime('-50 days'));
                string cond = "(Expiry_Date = '" + expiry_frtyfive + "' OR  Expiry_Date = '" + expiry_tdy + "' OR Expiry_Date = '" + expiry_pastfifty + " ') AND (Mobile !='' OR  Email !='')";
                //DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", cond);
                string strConnString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                SqlConnection con = new SqlConnection(strConnString);
                //SqlConnection con = new SqlConnection(@"Data Source=103.20.212.254,1232;Initial Catalog=dmcaws_New;User Id=sa;Password=bD$x89K3$@K9UaQsKQ");
                //SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-PKTADCN;Initial Catalog=dmcaws1;integrated security=true");
                con.Open();
                SqlCommand cmd = new SqlCommand("select * from pisl_fresh_registration_mst where " + cond + "", con);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                con.Close();
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string First_Name = Convert.ToString(dt.Rows[i]["First_Name"]);
                        string Last_Name = Convert.ToString(dt.Rows[i]["Last_Name"]);
                        string Regd_ID = Convert.ToString(dt.Rows[i]["Regd_ID"]);
                        string Regd_Type = Convert.ToString(dt.Rows[i]["Regd_Type"]);
                        string Mobile = Convert.ToString(dt.Rows[i]["Mobile"]);
                        string Expiry_Date = Convert.ToDateTime(dt.Rows[i]["Expiry_Date"]).ToString("yyyy-MM-dd");
                        string date_approved = Convert.ToDateTime(dt.Rows[i]["date_approved"]).ToString("yyyy-MM-dd");
                        string tdydate = Convert.ToDateTime(System.DateTime.Now).ToString("yyyy-MM-dd");
                        string to = Convert.ToString(dt.Rows[i]["Email"]);

                        string subject1 = "Renewal of Registration with Delhi Medical Council"; //// Give the email a subject
                        string subject2 = "Expiry of Registration with Delhi Medical Council";
                        string subject3 = "Deletion of Regd Number with Delhi Medical Council";
                        string message1 = "";
                        message1 += "Dear Dr " + First_Name + " " + Last_Name + ",";
                        message1 += "Greetings from Delhi Medical Council!!";

                        message1 += "   This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council is due for renewal.";
                        message1 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting ";
                        message1 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message1 += "For inclusion of any additional qualification, please produce the original degree at the office of Delhi Medical Council, so that your additional ";
                        message1 += "qualification certificate can be verified with the original document. The original degree / diploma Certificate will be returned immediately after verification. ";

                        message1 += "<b>This is a system generated email and we request you not to reply to this email. Please ignore if already applied.</b>";

                        message1 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message1 += "Warm Regards,";

                        message1 += "Delhi Medical Council.";
                        message1 += "Ground Floor, B Wing, B Block-1";
                        message1 += "DMCR IT Park, Shastri Park";
                        message1 += "New Delhi-110053";
                        message1 += "Tel: +91-011-46621000";
                        message1 += "Website - www.delhimedicalcouncil.org	 ";

                        string message2 = "";
                        message2 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message2 += "Greetings from Delhi Medical Council!!";

                        message2 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council expired on " + Expiry_Date + " and  is due for renewal. ";

                        message2 += "We request you to kindly renew your registration within thirty days and keep your registration in force. You can renew your registration online by visiting ";
                        message2 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message2 += "Please take note that in case you do not apply for renewal of registration within the stipulated period, your name shall be removed from the State Medical ";
                        message2 += "Register maintained by the Delhi Medical Council in accordance with the provisions of Section 22 of the Delhi Medical Council Act, 1997 which will debar";
                        message2 += "you from practicing Allopathic in the state of Delhi.";

                        message2 += "<b>Kindly ignore this email, in case you have already applied for renewal of registration</b>";

                        message2 += "This is a system generated email and we request you not to reply to this email.";

                        message2 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message2 += "Warm Regards,";

                        message2 += "Delhi Medical Council.";
                        message2 += "Ground Floor, B Wing, B Block-1";
                        message2 += "DMCR IT Park, Shastri Park";
                        message2 += "New Delhi-110053";
                        message2 += "Tel: +91-011-46621000";
                        message2 += "Website - www.delhimedicalcouncil.org";

                        string message3 = "";
                        message3 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message3 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council has expired on " + Expiry_Date + ". You ";
                        message3 += "failed to renew the registration with Delhi Medical Council, in spite of notices/Emails (public / individual) issued for renewal. Hence, in accordance with the ";
                        message3 += "provisions of section 22(3) of Delhi Medical Council Act, 1997; your name under Registration number " + Regd_ID + "-" + Regd_Type + "  has been removed from the State ";
                        message3 += "Medical Register of Delhi Medical Council.";

                        message3 += "Please note that if you wish to have your name re-entered in the State Medical Register of Delhi Medical Council, you may do so, by paying fees as detailed herein below,";
                        message3 += "in addition to fee for renewal of registration (Rs. 2000/-)";

                        message3 += "Late fees for non-renewal of registration:-";
                        message3 += "(a) upto six months from the date from 		Rs. 1000/- (Rupees One Thousand only)";
                        message3 += "    which registration is due for renewal";
                        message3 += "(b) for period more than six months 	    Rs. 2000/- (Rupees One Thousand only)";
                        message3 += "     but upto one year";
                        message3 += "(c) for period more than one year 			Rs. 1000/- (Rupees One Thousand per year and Part thereof)";

                        message3 += "Please also note that any person servicing or practicing modern scientific system of medicine (allopathy) in Delhi without holding valid registration with Delhi Medical Council is liable for action under the provisions of Delhi Medical Council Act, 1997.";
                        message3 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting www.delhimedicalcouncil.org and apply under Online Renewal & Services.";

                        message3 += "<b>Kindly ignore this letter, in case you have already applied for renewal of registration</b>";

                        message3 += "This is a system generated email and we request you not to reply to this email.";

                        message3 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message3 += "Warm Regards,";

                        message3 += "Delhi Medical Council.";
                        message3 += "Ground Floor, B Wing, B Block-1";
                        message3 += "DMCR IT Park, Shastri Park";
                        message3 += "New Delhi-110053";
                        message3 += "Tel: +91-011-46621000";
                        message3 += "Website - www.delhimedicalcouncil.org,";

                        string headers = "From: DMC Registration System <registration@delhimedicalcouncil.org>' . '\r\n'"; // Set from headers

                        string message = "";
                        string subject = "";
                        string trigger = "";
                        string msgtxt = "";
                        if (Convert.ToDateTime(Expiry_Date) > Convert.ToDateTime(tdydate))
                        {
                            message = message1;
                            subject = subject1;
                            trigger = "Renewal_due_reminder";
                            msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Renewal of your DMC Regd No " + Regd_ID + " - " + Regd_Type + " is due. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }

                        }
                        else if (Convert.ToDateTime(Expiry_Date) == Convert.ToDateTime(tdydate))
                        {
                            message = message2;
                            subject = subject2;
                            trigger = "Renewal_expired_tdy";
                            // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Registration of DMC Regd No " + Regd_ID + " - " + Regd_Type + " expired today. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }
                        }
                        //else if (Convert.ToDateTime(Expiry_Date) < Convert.ToDateTime(tdydate))
                        //{
                        //    message = message2;
                        //    subject = subject2;
                        //    trigger = "Renewal_expired_fifty";
                        //   // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Your  ID " + Regd_ID + " - " + Regd_Type + " has been removed from the State Medical Register of DMC . Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                        //    if (!string.IsNullOrEmpty(to))
                        //    {
                        //       // MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //    if (!string.IsNullOrEmpty(Mobile))
                        //    {
                        //       // MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(to))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(Mobile))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}

                    }
                }

            }
            else
            {
                msg = "Key not match";
                string path = "C:\\TestService\\ServiceLog.txt";
                using (StreamWriter writer = new StreamWriter(path, true))
                {
                    writer.WriteLine(string.Format(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt"), DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt")));
                    writer.Close();
                }
            }
        }
        catch
        {

        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult certverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["cert"];
            string Regd_type = "";
            string regd_id = "";

            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["cert"]);
            var splitedString = decodedstr.Split('-');
            Regd_type = splitedString[0];
            regd_id = splitedString[1];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            switch (Regd_type)
            {
                case "RRE":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "FRS":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "PROV":
                    db = "pisl_prov_registration_mst";
                    qual_db = "pisl_prov_regi_qual_mst";
                    break;

                default:
                    Message = "This certificate cannnot be verified";
                    break;

            }

            var check_namechange = dal.GetList("tbl_NameChangeHistory_New", "CaseID,Name=(case when (New_MiddleName is null or  New_MiddleName='') then New_FirstName+' '+New_LastName when (New_MiddleName is null or  New_MiddleName='') and (New_LastName is null or New_LastName='') then New_FirstName else New_FirstName+' '+New_MiddleName+' '+New_LastName end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_namechange.Rows.Count > 0)
            {
                string CaseID = check_namechange.Rows[0]["CaseID"].ToString();
                ViewBag.Name = check_namechange.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                if (check_Doctordata.Rows.Count > 0)
                {
                    string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
                    ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                    DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                    DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                    DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                    ViewBag.qual = dt_qual;
                    ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                    ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                    Message = "success";
                }
                else
                {
                    Message = "This Entry Cannot be Verified";
                }
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;

        return View();
    }
    public ActionResult VeryfyCertificate(string value)
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        var qstring = value;
        var decodedStr = MRPLookup.Decrypt1(qstring);
        var splitedString = decodedStr.Split('-');
        var Regd_type = splitedString[0];
        var regd_id = splitedString[1];
        var db = "";
        var qual_db = "";
        //string regdtype=
        switch (Regd_type)
        {
            case "RRE":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "FRS":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "PROV":
                db = "pisl_prov_registration_mst";
                qual_db = "pisl_prov_regi_qual_mst";
                break;

            default:
                Message = "This certificate cannnot be verified";
                break;

        }
        var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
        if (check_Doctordata.Rows.Count > 0)
        {
            string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
            DataTable dt_Documents = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
            DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign' ");

        }
        else
        {
            Message = "This Entry Cannot be Verified";
        }
        return Json("", JsonRequestBehavior.AllowGet);
    }
    public ActionResult letterverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["letter"];
            string Regd_type = "";
            string regd_id = "";
            string ID = "";
            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["letter"]);
            var splitedString = decodedstr.Split('-');
            ID = splitedString[0];
            Regd_type = splitedString[1];
            regd_id = splitedString[2];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            //switch ()
            //{
            //    case "RRE":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "FRS":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "PROV":
            //        db = "pisl_prov_registration_mst";
            //        qual_db = "pisl_prov_regi_qual_mst";
            //        break;

            //    default:
            //        Message = "This certificate cannnot be verified";
            //        break;

            //}
            var letter_type = "";
            var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,date_approved,drg_from,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "ID='" + ID + "' and Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_Doctordata.Rows.Count > 0)
            {
                switch (check_Doctordata.Rows[0]["drg_from"].ToString())
                {
                    case "noc":
                        letter_type = "No Objection Certificate";
                        break;

                    case "gdst":
                        letter_type = "Good Standing Certificate";
                        break;
                }
                ViewBag.lettertype = letter_type;
                ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("pisl_fresh_regi_qual_mst", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='Sign'");
                if (!string.IsNullOrEmpty(check_Doctordata.Rows[0]["date_approved"].ToString()))
                {
                    ViewBag.DateApproved = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).ToString("dd MMMM,yyyy");
                    ViewBag.expiry = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).AddDays(-1).AddMonths(6).ToString("dd MMMM, yyyy");
                }
                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(ID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                Message = "This Entry Cannot be Verified";
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;
        return View();
    }
    public ActionResult Regi_search()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public ActionResult search_ur_dr()
    {

        return View();
    }
    public ActionResult regi_search_submit(string Regid, string Types)
    {
        try
        {


            string regid = Request.QueryString["Regd_ID"];
            string type = Request.QueryString["Type"]; ;
            //string type = frm["type"].Trim();
            //string regid = frm["regid"].Trim();
            string colname = "*";
            string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "' ORDER BY S_No DESC";
            DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
            if (dt.Rows.Count > 0)
            {
                DateTime ddob = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                DateTime dapproved = Convert.ToDateTime(dt.Rows[0]["date_approved"].ToString());
                DateTime dexpiry = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                ViewBag.dateapproved = dapproved.ToShortDateString();
                ViewBag.expirydate = dexpiry.ToShortDateString();
                ViewBag.dob = ddob.ToShortDateString();
                ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


                DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
                if (result_remarks.Rows.Count > 0)
                {
                    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    {
                        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    }
                }
                DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
                if (qualificationdt.Rows.Count > 0)
                {
                    ViewBag.qualdata = qualificationdt;
                }

            }
            return View();
        }
        catch (Exception ex)
        {
            return View();
        }
    }
    public ActionResult regi_search_submits(FormCollection frm)
    {

        string clientCaptcha = frm["CL_CAPCHA"].ToString();
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;

            return Json("-1");
        }
        string msg = "";
        //string type = Regd_ID;
        //string regid = Type;
        string type = frm["type"].Trim();
        string regid = frm["regid"].Trim();
        string colname = "*";
        string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
        if (dt.Rows.Count > 0)
        {
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
            if (result_remarks.Rows.Count > 0)
            {
                for (int i = 0; i < result_remarks.Rows.Count; i++)
                {
                    ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                }
            }
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult search_ur_dr_submit(FormCollection frm)
    {
        try
        {



            string First_Name = Request.QueryString["First_Name"];
            string Last_Name = frm["Last_Name"];
            string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
            string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
            string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
            string Mobile = Request.QueryString["Mobile"];
            string Email = Request.QueryString["Email"];

            if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Last_Name) && !string.IsNullOrEmpty(Corr_Add_Line_1) && !string.IsNullOrEmpty(Corr_Add_Line_2) && !string.IsNullOrEmpty(Corr_Add_Pincode) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Mobile='" + Mobile + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}

                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "Email='" + Email + "' and Mobile='" + Mobile + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }


            return View();
        }
        catch (Exception ex)
        {
            return View();

        }
    }


    public ActionResult search_ur_dr_submit2(FormCollection frm)
    {
        string msg = "";
        string First_Name = frm["First_Name"];
        string Last_Name = frm["Last_Name"];
        string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
        string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
        string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
        string Mobile = frm["Mobile"];
        string Email = frm["Email"];

        string condtions = "First_Name='" + First_Name.Trim() + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
        if (dt.Rows.Count > 0)
        {
            //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
            //if (result_remarks.Rows.Count > 0)
            //{
            //    for (int i = 0; i < result_remarks.Rows.Count; i++)
            //    {
            //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
            //    }
            //}
            string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", condtions2);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        else
        {
            msg = "Not Data Found";
        }


        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult cme()
    {
        return View();
    }
    public ActionResult status_comp2021()
    {
        return View();
    }

    public ActionResult ForgetEmailPasswordProv()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public dynamic getForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB)
    {
        //select pu.First_Name,pu.Last_Name,pu.email,pu.Mobile from pisl_users as pu inner join pisl_prov_regi_qual_mst as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type where pu.Regd_ID = 18430 and pu.DOB = '1991-10-26' and pfq.passing_date = 2016 and pfq.quali_course = 'M.B.B.S.'
        List<dynamic> OBJ = new List<dynamic>();
        string dob = lk.convertdate1(txt_DOB);
        try
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else {
                db = "pisl_fresh_regi_qual_mst";
            }

            DataTable dt1 = dal.GetList("pisl_users as pu inner join "+db+" as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType.ToUpper() + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                OBJ.Add(MRPLookup.Convert_DatatableToList(dt1).ToList());
                return Json(OBJ, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        catch (Exception)
        {

            return null;
        }
        
    }

    public string otpForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail)
    {
        string message = string.Empty;
        string dob = lk.convertdate1(txt_DOB);
        string db = "";
        if (txtRegType.ToUpper() == "PROV")
        {
            db = "pisl_prov_regi_qual_mst";
        }
        else
        {
            db = "pisl_fresh_regi_qual_mst";
        }
        DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
        if (dt1.Rows.Count > 0)
        {
            MailFormat mf = new MailFormat();
            string code = MRPLookup.RandamStringGenerator1();
            Session["provotp"] = code;
            string mailBody = "Your OTP is: " + code + ". DMC";
            string sendmailStatus= MRPLookup.sendMail(txtEmail.Trim(), "DMC | OTP Verification", mailBody, "", "");


            //string mailBody = mf.SendCodeOnMail(dt1.Rows[0]["First_Name"].ToString(), code);
            //string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(),"Reset Password Code" + System.DateTime.Now + "", mailBody, "", "");
            if (sendmailStatus != "Technical issue! Please try agiain")
            {
                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

            }
            else
            {
                message = sendmailStatus;
            }


            return message;
        }
        return "Some thing went wrong...!";
    }

    public string submitForgetEmailPasswordProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail, string txtMobileNo,string CaptchaCaseID,string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (Session["provotp"].ToString()!=txtCode)
        {
            return "Otp incorrect";
        }

        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact Captcha as written below.";
            // return message;
        }
        else
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else
            {
                db = "pisl_fresh_regi_qual_mst";
            }
            string dob = lk.convertdate1(txt_DOB);
            DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile,pu.Regd_ID,pu.Regd_Type", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                if (Convert.ToString(dt1.Rows[0]["Regd_ID"]) != "" && Convert.ToString(dt1.Rows[0]["Regd_Type"]) != "")
                {
                      string colValue = "Email='" + txtEmail.Trim() + "',Mobile='" + txtMobileNo.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                      updPassword = dal.Updation("pisl_users", colValue, "Regd_ID='"+dt1.Rows[0]["Regd_ID"].ToString()+ "' and Regd_Type='"+ dt1.Rows[0]["Regd_Type"].ToString() + "'");
               
                   
                     var tblCurrentStatuscolomns = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                     var Currentupdatestatuss = dal.Updation("pisl_temp_registrations", tblCurrentStatuscolomns, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");

                    var tblCurrentStatuscolomns1 = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                    var Currentupdatestatuss1 = dal.Updation("pisl_fresh_registration_mst", tblCurrentStatuscolomns1, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");



                    message = "Your Email and Mobile Changed successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                    //MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                   // Send SMS and mail for password reset.
                }
                else
                {
                    message = "Please try after some time";
                }
            }
            else
            {
                message = "Data Not found..!";
            }
        }
        return message;
    }
    public string sendOTP(string EmailId)
    {
        string message = "";
        string cond = "email='" + EmailId + "'";
        DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
        if (dtLogin.Rows.Count > 0)
        {
            string mobile = dtLogin.Rows[0]["Mobile"].ToString();
            Session["otp"] = GetRandomText();
            string OTP = Session["otp"].ToString();
            //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
            string mailBody = "Your OTP is: " + OTP + ". DMC";
            MRPLookup.sendMail(EmailId.Trim(), "DMC | OTP Verification", mailBody, "", "");
            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
            MRPLookup.SendSMS("otp", mobile.Trim(), "", "", OTP, "", "", "", "", "", "", "");
            message = "Please check your email or Mobile for OTP";
        }
        else
        {
            message = "Email not found, Please enter a valid email";
        }
        return message;
    }

    public ActionResult ChangePassward(FormCollection frm)
    {
        string Result = "";
        if (frm["txtOTP"].ToString() == Session["OTP"].ToString())
        {
            if (frm["txt_password"].Length >= 8 && frm["txt_password"].Length <= 18)
            {
                Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                Boolean foundMatch = regexObj.IsMatch(frm["txt_password"]);
                if (foundMatch == true)
                {
                    string where = "email='" + frm["txt_email"] + "'";// and Mobile='"+ frm["txt_contactno"] + "'";
                    DataTable dt_dr_details = dal.GetList("pisl_users", "*", where);
                    if (dt_dr_details != null)
                    {
                        if (dt_dr_details.Rows.Count > 0)
                        {
                            string pass = Encrypt(frm["txt_password"].Trim());
                            string col = " password='" + pass + "'";
                            var update = dal.Updation("pisl_users", col, "email='" + dt_dr_details.Rows[0]["email"].ToString() + "'");
                            if (update == 0)
                            {
                                string hostName = Dns.GetHostName();
                                string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                string colName = "activity,email,password,ip,system,description,date";
                                string colValue = "'Change Passs','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + frm["txt_password"].ToString().Trim() + "','" + IP + "','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + pass + "',getdate()";
                                int ins = dal.insertion("tbl_activity", colName, colValue);
                                string message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                MRPLookup.SendSMS("forgot_pwd", dt_dr_details.Rows[0]["Mobile"].ToString(), dt_dr_details.Rows[0]["First_Name"].ToString(), dt_dr_details.Rows[0]["Last_Name"].ToString(), "", "", dt_dr_details.Rows[0]["email"].ToString(), frm["txt_password"].ToString().Trim(), "", "", "", "");
                                Result = "0";
                            }
                            else
                            {
                                Result = "Somthing wrong Error !";
                            }
                        }
                        else
                        {
                            Result = "This is not registered email please check.";
                        }
                    }
                }
                else
                {
                    Result = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                }
            }
            else
            {
                Result = "Password Length must between 8 to 18 letters";
            }
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
    public ActionResult verifyOTP(string otp)
    {
        string Result = "";
        if (otp == Session["otp"].ToString())
        {
            Result = "DONE";
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
}
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using DelhimedicalcouncilORG;
using System.Data;
using System.Security.Cryptography;
using System.Text;
using System.IO;
using System.Drawing;
using System.Net;
using System.Net.Mail;

using System.Text.RegularExpressions;
using System.Data.SqlClient;
using System.Configuration;

namespace DelhimedicalcouncilORG.Controllers
{
public class homeController : Controller
{
    // GET: home
    DAL dal = new DAL();
    MRPLookup lk = new MRPLookup();
    MailFormat mf = new MailFormat();


    private string RetrieveContent(string webPage)
    {
        HttpWebResponse response = null;//used to get response
        StreamReader respStream = null;//used to read response into string
        try
        {
            //create a request object using the url passed in
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(webPage);
            request.Timeout = 10000;

            //go get a response from the page
            response = (HttpWebResponse)request.GetResponse();

            //create a streamreader object from the response
            respStream = new StreamReader(response.GetResponseStream());

            //get the contents of the page as a string and return it
            return respStream.ReadToEnd();
        }
        catch (Exception ex)//houston we have a problem!
        {
            throw ex;
        }
        finally
        {
            //close it down, we’re going home!
            response.Close();
            respStream.Close();
        }
    }

    //using a regular expression, find all of the href or urls
    //in the content of the page
    private void GetAllUrls(string content)
    {
        //regular expression
        string pattern = @"(?:href\s*=)(?:[\s""']*)(?.*?)(?:[\s>""'])";

        //Set up regex object
        Regex RegExpr = new Regex(pattern, RegexOptions.IgnoreCase);

        //get the first match
        Match match = RegExpr.Match(content);

        //loop through matches
        while (match.Success)
        {

            //output the match info
            Console.WriteLine("href match: " + match.Groups[0].Value);
            //WriteToLog(@"C:\matchlog.txt", "href match: " + match.Groups[0].Value + "\r\n");

            Console.WriteLine("Url match: " + match.Groups[1].Value);
            //WriteToLog(@"C:\matchlog.txt", "Url | Location | mailto match: " + match.Groups[1].Value + "\r\n");

            //get next match
            match = match.NextMatch();
        }
    }

    //Write to a log file
    //private void WriteToLog(string file, string message)
    //{
    //using (StreamWriter w = File.AppendText(file))
    //{
    //w.WriteLine(DateTime.Now.ToString() + ": " + message); w.Close();
    //}
    //}




    /// <summary>
    /// ////////////////////////
    /// </summary>
    /// <returns></returns>
    /// 

    public ActionResult Index()
    {




        return View();
    }
    //Start Login//
    public ActionResult login()
    {
        // Session["CAPTCHA"] = "111111";// GetRandomText();
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }

    
    public string Login_Form(string EmailId, string password, string ip, string captcha)
    
    {



        var dateTime = DateTime.Now;
        var tt = dateTime.Hour;


        var dayOfWeek = dateTime.DayOfWeek;
        var day = dayOfWeek.ToString();

        //Decrypt("","");
        //70789
        //554e981f4946f37a4818f1cea3928fe3
        //drtushargupta90@gmail.com
        string message = string.Empty;
        string clientCaptcha = captcha;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            ViewBag.CaptchaError = "Sorry, please write exact text as written above.";
            message = "11,11";
            return message;
        }
        else
            if (Session["checkSession"] == null)
        {
            ip = Request.ServerVariables["REMOTE_ADDR"].ToString();

            string pass = Encrypt(password);
            // string decoded = MRPLookup.Decrypt1(HttpUtility.UrlDecode(pass));
            string cond = "email='" + EmailId + "' and password='" + pass + "' and active!=3 ";//and active=1
            DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
            if (dtLogin.Rows.Count > 0)
            {
                if (Convert.ToString(dtLogin.Rows[0]["Regd_Type"]) == "PROV" && dtLogin.Rows.Count == 1)
                {
                    DataTable dt_temp_D = dal.GetList("pisl_temp_registrations", "Regd_ID,Regd_Type,Final_Status,Approved_By,date_approved,type", "email='" + EmailId.Trim() + "' order by ID desc");
                    for (int i = 0; i < dt_temp_D.Rows.Count; i++)
                    {
                        if (Convert.ToString(dt_temp_D.Rows[i]["Regd_Type"]) != "PROV" && Convert.ToString(dt_temp_D.Rows[i]["Final_Status"]) == "Approved" && Convert.ToString(dt_temp_D.Rows[i]["Approved_By"]) != null && Convert.ToString(dt_temp_D.Rows[i]["date_approved"]) != null && Convert.ToString(dt_temp_D.Rows[i]["type"]) != "service")
                        {



                            string colnameWithValue = "Regd_ID=" + Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]) + ",Regd_Type='" + dt_temp_D.Rows[i]["Regd_Type"].ToString() + "'";
                            string conditions = "S_No=" + Convert.ToInt32(dtLogin.Rows[0]["S_No"]) + "";
                            var Update_paymentUpdate = dal.Updation("pisl_users", colnameWithValue, conditions);
                            if (Update_paymentUpdate == 0)
                            {
                                dtLogin.Rows[0]["Regd_ID"] = Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]);
                                dtLogin.Rows[0]["Regd_Type"] = dt_temp_D.Rows[i]["Regd_Type"].ToString();

                            }
                            break;
                        }
                    }
                }


                for (int i = 0; i < dtLogin.Rows.Count; i++)
                {
                    string hash = Convert.ToString(dtLogin.Rows[i]["hash"]);
                    string decryptedstring = Decrypt(pass, hash);

                    string gid = Convert.ToString(dtLogin.Rows[i]["GID"]);
                    //string active = Convert.ToString(dtLogin.Rows[0]["active"]);
                    if (gid == "0")//Login for doctor
                    {
                        //DataTable dt_lastloginRecord = dal.GetList("pisl_users where email='" + EmailId + "' order by S_No desc", "TOP 1 *", "");
                        if (dtLogin != null && dtLogin.Rows.Count > 0)
                        {

                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[i]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[i]["Regd_Type"]);
                            }
                            else
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                            }
                            if (dtLogin.Rows[i]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[i]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }

                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                        }
                        else
                        {
                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[0]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            }
                            if (dtLogin.Rows[0]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }
                        }


                        message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 2;
                    }
                    else if (gid == "1")//Login for internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["isno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 1;
                            }
                            else
                            {
                                message = "0,6";
                            }
                        }

                        else
                        {
                            message = "0,5";
                        }
                    }
                    else if (gid == "2")//Login for admin and internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["asno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 3;
                            }
                            else
                            {
                                message = "0,6";
                            }

                        }
                        else
                        {
                            message = "0,5";
                        }
                    }
                }
            }
            else
            {
                message = "0,0";
            }
        }
        else
        {
            message = "10,10";
        }
        return message;
    }

    public string Encrypt(string password)
    {
        // Decrypt("", "");
        //string password = @"1234abcd";

        // byte array representation of that string
        byte[] encodedPassword = new UTF8Encoding().GetBytes(password);

        // need MD5 to calculate the hash
        byte[] hash = ((HashAlgorithm)CryptoConfig.CreateFromName("MD5")).ComputeHash(encodedPassword);

        // string representation (similar to UNIX format)
        string encoded = BitConverter.ToString(hash)
           // without dashes
           .Replace("-", string.Empty)
           // make lowercase
           .ToLower();
        return encoded;
    }
    public string Decrypt(string password, string hash1)
    {//https://md5decrypt.net/#answer
        string ss = "";
        string source = "zdNot3oAz5I%3DjRspJg78a%2FY%3D";// "Hello World!";
        MD5 md5 = System.Security.Cryptography.MD5.Create();
        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(password);
        byte[] hash = md5.ComputeHash(inputBytes);

        // step 2, convert byte array to hex string
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < hash.Length; i++)
        {
            sb.Append(hash[i].ToString("X2"));
        }
        return sb.ToString();
    }
    static string GetMd5Hash(MD5 md5Hash, string input)
    {

        // Convert the input string to a byte array and compute the hash.
        byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));

        // Create a new Stringbuilder to collect the bytes
        // and create a string.
        StringBuilder sBuilder = new StringBuilder();

        // Loop through each byte of the hashed data 
        // and format each one as a hexadecimal string.
        for (int i = 0; i < data.Length; i++)
        {
            sBuilder.Append(data[i].ToString("x2"));
        }

        // Return the hexadecimal string.
        return sBuilder.ToString();
    }
    public FileResult GetCaptchaImage()
    {
        MemoryStream ms = new MemoryStream();
        if (Session["CAPTCHA"] != null)
        {
            string text = Session["CAPTCHA"].ToString();

            //first, create a dummy bitmap just to get a graphics object
            Image img = new Bitmap(1, 1);
            Graphics drawing = Graphics.FromImage(img);

            Font font = new Font("Jokerman", 15);
            //measure the string to see how big the image needs to be
            SizeF textSize = drawing.MeasureString(text, font);

            //free up the dummy image and old graphics object
            img.Dispose();
            drawing.Dispose();

            //create a new image of the right size
            img = new Bitmap((int)textSize.Width + 40, (int)textSize.Height + 20);
            drawing = Graphics.FromImage(img);

            Color backColor = Color.SeaShell;
            Color textColor = Color.Red;
            //paint the background
            drawing.Clear(backColor);

            //create a brush for the text
            Brush textBrush = new SolidBrush(textColor);

            drawing.DrawString(text, font, textBrush, 20, 10);

            drawing.Save();

            font.Dispose();
            textBrush.Dispose();
            drawing.Dispose();


            img.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
            img.Dispose();

            return File(ms.ToArray(), "image/png");
        }
        else
        {
            return File(ms.ToArray(), "image/png");
        }
    }
    private string GetRandomText()
    {
        StringBuilder randomText = new StringBuilder();
        string alphabets = "12345679ABCEFGHKLMNPRSTUVWXZ";
        Random r = new Random();
        for (int j = 0; j <= 5; j++)
        {
            randomText.Append(alphabets[r.Next(alphabets.Length)]);
        }
        return randomText.ToString();
    }
    //End Login//
    public ActionResult signup()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    [HttpPost]
    public string sendotpsignup(string txt_Email, string txt_ContactNo)
    {
        string msg = "";
        try
        {
            var CheckEmail = IsEmailandMobileExists(txt_Email, "");
            var checkMobile = IsEmailandMobileExists("", txt_ContactNo);
            if (CheckEmail == false && checkMobile == false)
            {

                Session["otp"] = GetRandomText();
                string OTP = Session["otp"].ToString();
                //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
                string mailBody = "Your OTP is: " + OTP + ". DMC";
                MRPLookup.sendMail(txt_Email.Trim(), "DMC | OTP Verification", mailBody, "", "");

                //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
              

                MRPLookup.SendSMS("otp", txt_ContactNo.Trim(), "", "", OTP, "", "", "", "", "", "", "");
                msg = "0";
            }
            else if (CheckEmail == true && checkMobile == true)
            {
                msg = "Email and Mobile no. are already exists!!";
            }
            else
            {
                if (checkMobile == true && CheckEmail == false)
                {
                    msg = "Mobile No. is Already Exists!!";
                }
                else if (CheckEmail == true && checkMobile == false)
                {
                    msg = "Email Address is Already Exists!!";
                }


            }
        }
        catch (Exception ex)
        {
            msg = "1";
        }
        return msg;
    }
    public bool IsEmailandMobileExists(string email, string mobile)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        try
        {
            tableName = "pisl_users";
            colname = "*";
            if (!string.IsNullOrEmpty(email))
            {
                cond = "email='" + email + "'";
            }
            if (!string.IsNullOrEmpty(mobile))
            {
                cond = "mobile='" + mobile + "'";
            }
            //cond=
            DataTable dt_datacheck = dal.GetList(tableName, colname, cond);
            if (dt_datacheck != null && dt_datacheck.Rows.Count > 0)
            {
                IsExists = true;
            }

        }
        catch (Exception ex)
        {
            IsExists = false;
            throw;
        }
        return IsExists;
    }

    public ActionResult IsDocDataExists(string regd_type, string regd_no, string DOB, string PassingYear)
    {
        //List<dynamic> list = new List<dynamic>();
        string message = "";
        try
        {
            var tbl_name = "";

            var userExists = IsRegd_Exists(regd_type, regd_no, DOB, PassingYear, out tbl_name);
            if (userExists == true && tbl_name == "pisl_users")
            {

                message = "Already Registered With us. Please Login With Your Credential";
            }
            else
                if (userExists == true && tbl_name == "pisl_fresh_registration_mst")
            {
                message = "Your Registration No. is Expired. Please SignUp Again.";
            }
            else
            {
                message = "NotExists";
                //message = "Your Registration No. is Not Exists!";
            }
        }
        catch (Exception ex)
        {

        }
        return Json(message, JsonRequestBehavior.AllowGet);
    }
    public bool IsRegd_Exists(string regd_type, string regd_no, string DOB, string PassingYear, out string Tbl_Name)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        Tbl_Name = "";
        DataTable dt_UserCheck = null;
        try
        {
            tableName = "pisl_users";
            colname = "*";
            cond = "Regd_Type='" + regd_type + "' and Regd_ID='" + regd_no.Trim() + "'";
            dt_UserCheck = dal.GetList(tableName, colname, cond);
            if (dt_UserCheck == null || dt_UserCheck.Rows.Count == 0)
            {
                tableName = "pisl_fresh_regi_qual_mst";
                colname = "*";
                cond = "quali_type='Basic Qualification' AND Regd_ID='" + regd_no + "' "
                    + "AND Regd_Type='" + regd_type + "' AND passing_date =  '" + PassingYear.Trim() + "'";
                dt_UserCheck = dal.GetList(tableName, colname, cond);
                if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                {
                    Tbl_Name = "pisl_fresh_regi_qual_mst";

                    tableName = "pisl_fresh_registration_mst";
                    colname = "*";
                    cond = "Regd_ID='" + regd_no + "' AND Regd_Type='" + regd_type + "'";
                    dt_UserCheck = dal.GetList(tableName, colname, cond);
                    if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                    {
                        Tbl_Name = "pisl_fresh_registration_mst";
                        IsExists = true;
                    }
                    else
                    {
                        IsExists = false;
                    }
                }
                else
                {

                    IsExists = false;
                }
            }
            else
            {
                Tbl_Name = "pisl_users";
                IsExists = true;
            }
        }
        catch (Exception ex)
        {


            throw;
        }
        return IsExists;
    }

    [HttpPost]
    public string createsignup(string txt_Email, string txt_ContactNo, string txt_FirstName, string txt_MiddleName,
        string txt_LastName, string txt_Password, string txt_ConfirmPassword, string txt_DOB, bool chk_TermCondition,
        string Captcha, string Regd_ID, string txtOTP, string ddl_regType, string txt_oldData, string passingYear)
    {
        string message = "";
        string dob = lk.convertdate1(txt_DOB);
        string Tbl_Name = "";
        try
        {
            if (!IsEmailandMobileExists(txt_Email, ""))
            {
                if (!IsEmailandMobileExists("", txt_ContactNo))
                {
                    if (ddl_regType == "FRS" || ddl_regType == "RRE")
                    {
                        if (IsRegd_Exists(ddl_regType, Regd_ID, dob, passingYear, out Tbl_Name))
                        {
                            Tbl_Name = Tbl_Name;
                            if (Tbl_Name == "pisl_users")
                            {
                                //if Pisl_user Table Record Exists but no Email and Mobile No exists
                                //in this case update the Email and Mobile No.
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        DataTable dt_Email_Mobile_Check = dal.GetList("pisl_users",
                                                        "top 1*", " Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                        if (dt_Email_Mobile_Check != null)
                                                        {
                                                            if (dt_Email_Mobile_Check.Rows.Count > 0)
                                                            {
                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_Email_Mobile_Check.Rows[0]["email"])))
                                                                {
                                                                    string pass = Encrypt(txt_Password.Trim());
                                                                    string hash = Encrypt(MRPLookup.RandamStringGenerator1());
                                                                    var updateDt = dal.Updation("pisl_users",
                                                                        "email='" + txt_Email.Trim() + "',mobile='" + txt_ContactNo.Trim() + "',password='" + pass + "',hash='" + hash + "'",
                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                    if (updateDt == 0)
                                                                    {
                                                                        DataTable dt_fresh_Check = dal.GetList("pisl_fresh_registration_mst",
                                                                            "top 1 * ",
                                                                            "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                        if (dt_fresh_Check != null)
                                                                        {
                                                                            if (dt_fresh_Check.Rows.Count > 0)
                                                                            {
                                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_fresh_Check.Rows[0]["Email"])))
                                                                                {
                                                                                    var updateDt_fresh = dal.Updation("pisl_fresh_registration_mst",
                                                                                        "Email='" + txt_Email.Trim() + "',Mobile='" + txt_ContactNo.Trim() + "'",
                                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");

                                                                                    if (updateDt_fresh != 0)
                                                                                    {
                                                                                        message = "Error!!";
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                                        MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                                        message = "Please, Check Your Mail For Login Details";
                                                                        //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                                        MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                                    }
                                                                    else
                                                                    {
                                                                        message = "Error!!";
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    message = "Your record are already Exists with us!!";
                                                                }
                                                            }
                                                        } //End Updation
                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }
                            else if (Tbl_Name == "pisl_fresh_regi_qual_mst" || Tbl_Name == "pisl_fresh_registration_mst")
                            {
                                //Insert Login Record in Pisl_Users
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        string pass = Encrypt(txt_Password.Trim());
                                                        string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                        if (string.IsNullOrEmpty(Regd_ID))
                                                        {
                                                            Regd_ID = "0";
                                                        }
                                                        //if (txt_oldData != "")
                                                        //{
                                                        //    string colnamemst = "*";
                                                        //    string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        //    DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        //    if (dtrmst.Rows.Count > 0)
                                                        //    {
                                                        //        string oldtype = "";
                                                        //        if (ddl_regType == "FRS")
                                                        //        {
                                                        //            oldtype = "service";
                                                        //        }
                                                        //        else if (ddl_regType == "RRE")
                                                        //        {
                                                        //            oldtype = "reregi";
                                                        //        }
                                                        //        var corrAddress1 = dtrmst.Rows[0]["Corr_Add_Line_1"].ToString();
                                                        //        var corrAddress2 = dtrmst.Rows[0]["Corr_Add_Line_2"].ToString();
                                                        //        var perAddress1 = dtrmst.Rows[0]["Per_Add_Line_1"].ToString();
                                                        //        var perAddress2 = dtrmst.Rows[0]["Per_Add_Line_2"].ToString();

                                                        //        string colNameold = "Regd_ID,Regd_Type,type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,date_entered,Father_Name,POB,Gender,Nationality,Corr_Add_Line_1,Corr_Add_Line_2,Corr_Add_State,Corr_Add_Pincode,Corr_Add_Country,Per_Add_Line_1,Per_Add_Line_2,Per_Add_Line_State,Per_Add_Line_Pincode,Per_Add_Line_Country";

                                                        //        string colValueold = "'" + Regd_ID + "','" + ddl_regType + "','" + oldtype + "','" + txt_FirstName + "','" + txt_MiddleName + "','"  + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "', '"+ lk.GetDateTime()+ "' ,'"+ dtrmst.Rows[0]["Father_Name"] + "','" + dtrmst.Rows[0]["POB"] + "','" + dtrmst.Rows[0]["Gender"] + "','" + dtrmst.Rows[0]["Nationality"] + "','" + corrAddress1 + "','" + corrAddress2 + "','" + dtrmst.Rows[0]["Corr_Add_State"] + "','" + dtrmst.Rows[0]["Corr_Add_Pincode"] + "','" + dtrmst.Rows[0]["Corr_Add_Country"] + "','" + perAddress1 + "','" + perAddress2 + "','" + dtrmst.Rows[0]["Per_Add_Line_State"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Pincode"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Country"] + "'";
                                                        //        int insold = dal.insertion("pisl_temp_registrations", colNameold, colValueold);
                                                        //    }
                                                        //}
                                                        Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                        string colnamemst = "*";
                                                        string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        DateTime txtdob1 = Convert.ToDateTime(dtrmst.Rows[0]["DOB"]);
                                                        string txtdob = txtdob1.ToShortDateString();

                                                        string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                            + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                        string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + dtrmst.Rows[0]["First_Name"].ToString() + "','" + dtrmst.Rows[0]["Middle_Name"].ToString() + "',"
                                                            + "'" + dtrmst.Rows[0]["Last_Name"].ToString() + "','" + txtdob + "','" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                            + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                        int ins = dal.insertion("pisl_users", colName, colValue);
                                                        if (ins == 0)
                                                        {
                                                            string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                            MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                            message = "Please, Check Your Mail For Login Details";
                                                            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                            MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                        }
                                                        else
                                                        {
                                                            message = "Try after some time";
                                                        }

                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }

                        }
                        else
                        {
                            message = "Your Registration No and Passing Year is Not Exist with Us";
                        }
                    }
                    else
                    {
                        //Insert Login Record in Pisl_Users
                        if (chk_TermCondition == true)
                        {
                            if (txtOTP == Session["otp"].ToString())
                            {
                                if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                {
                                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                    Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                    if (foundMatch == true)
                                    {
                                        if (txt_Password == txt_ConfirmPassword)
                                        {
                                            if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                            {
                                                //if (Tbl_Name== "pisl_users") { }
                                                string pass = Encrypt(txt_Password.Trim());
                                                string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                if (string.IsNullOrEmpty(Regd_ID))
                                                {
                                                    Regd_ID = "0";
                                                }
                                                Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                if (ddl_regType == "-1")
                                                {
                                                    ddl_regType = "";
                                                }


                                                string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                    + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                int ins = dal.insertion("pisl_users", colName, colValue);
                                                if (ins == 0)
                                                {
                                                    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                    message = "Please, Check Your Mail";
                                                    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                }
                                                else
                                                {
                                                    message = "Try after some time";
                                                }

                                                //string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                //    + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                //string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                //    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                //    + "1,0,0,'"+ lk.GetDateTime()+ "','','" + Regd_ID1 + "'";
                                                //int ins = dal.insertion("pisl_users", colName, colValue);
                                                //if (ins == 0)
                                                //{
                                                //    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                //    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                //    message = "Please, Check Your Mail";
                                                //    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                //    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                //}
                                                //else
                                                //{
                                                //    message = "Try after some time";
                                                //}
                                            }
                                            else
                                            {
                                                message = "Enter A Valid Email";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password and Confrim Password is Not Same";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                    }
                                }
                                else
                                {
                                    message = "Password Length must between 8 to 18 letters";
                                }
                            }
                            else
                            {
                                message = "Enter the Valid OTP";
                            }
                        }
                        else
                        {
                            message = "Please check the Terms and Conditions";
                        }

                        //}
                    }
                }
                else
                {
                    message = "Mobile No. is Already Exists";
                }
            }
            else
            {
                message = "Email Already exists!!";
            }
            //
            //Cut the Code From There

        }
        catch
        {

        }
        return message;
    }

    public ActionResult SignupVerification()
    {
        string message = "";
        try
        {
            if (Request.QueryString["email"] != null && Request.QueryString["hash"] != null)
            {
                string email = Request.QueryString["email"];
                string hash = Request.QueryString["hash"];
                string cond = "Email='" + email.Trim() + "' and Hash='" + hash.Trim() + "' and Active=0";
                DataTable dt = dal.GetList("pisl_users", "*", cond);
                if (dt.Rows.Count > 0)
                {
                    int upd = dal.Updation("pisl_users", "Active=1", cond);
                    if (upd == 0)
                    {
                        message = "Your account has been activated, you can now login";
                    }
                    else
                    {
                        message = "Try after some time";
                    }
                }
                else
                {
                    message = "The url is either invalid or you already have activated your account.";
                }
            }
            else
            {
                message = "Invalid approach, please use the link that has been send to your email.";
            }
        }
        catch
        { }
        ViewBag.lbl_status = message;
        return View();
    }
    public ActionResult contact()
    {
        return View();
    }

    public ActionResult about()
    {
        return View();
    }
    public ActionResult faqs()
    {
        return View();
    }
    // Start forgot password
    public ActionResult forgotpassword()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public string sendCode(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        string message = string.Empty;
        try
        {
            string clientCaptcha = CaptchaCaseID;
            string serverCaptcha = Session["CAPTCHA"].ToString();
            if (!clientCaptcha.Equals(serverCaptcha))
            {
                ViewBag.ShowCAPTCHA = serverCaptcha;
                message = "Sorry, please write exact text as written below.";
            }
            else
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' ";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string name = Convert.ToString(dt.Rows[0]["First_Name"]);
                                        string Mobile = Convert.ToString(dt.Rows[0]["Mobile"]);

                                        MailFormat mf = new MailFormat();
                                        string code = MRPLookup.RandamStringGenerator1();
                                        string mailBody = mf.SendCodeOnMail(name, code);
                                        MRPLookup.SendSMS("otp", Mobile, "", "", code, "", "", "", "", "", "", "");
                                        string colValue = "Code='" + code.Trim() + "'";
                                        int updCode = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "'");
                                        if (updCode == 0)
                                        {
                                            string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(), "Reset Password Code " + System.DateTime.Now + "", mailBody, "", "");
                                            if (sendmailStatus != "Technical issue! Please try agiain")
                                            {
                                                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

                                            }
                                            else
                                            {
                                                message = sendmailStatus;
                                            }
                                        }
                                        else
                                        {
                                            message = "Please try after some time.";
                                        }

                                    }
                                    else
                                    {
                                        message = "Enter a New Password.";
                                    }
                                }
                                else
                                {
                                    message = "Your Email And Mobile Number Do not Match with DMC Registered Users.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
        }
        catch (Exception ex)
        {

        }
        return message;
    }
    public string forgotpasswordCaseID(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact text as written below.";
            // return message;
        }
        else
        {
            if (txtCode != "0")
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string mobile = Convert.ToString(dt.Rows[0]["Mobile"]);
                                    string firstName = Convert.ToString(dt.Rows[0]["First_Name"]);
                                    string lastName = Convert.ToString(dt.Rows[0]["Last_Name"]);
                                    //string new_password = Encrypt(MRPLookup.RandamStringGenerator1());
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string colValue = "password='" + new_PasswordMD5.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                                        updPassword = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                        if (updPassword == 0)
                                        {
                                            updPassword = dal.Updation("pisl_users", "Code='0'", "Email='" + txtEmail.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                            string hostName = Dns.GetHostName();
                                            string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                            string colName = "activity,email,password,ip,system,description,date";
                                            colValue = "'Change Passs','" + txtEmail + "','" + txtPassword + "','" + IP + "','" + mobile + "','" + new_PasswordMD5 + "',getdate()";
                                            int ins = dal.insertion("tbl_activity", colName, colValue);
                                            message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                            MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                                            // Send SMS and mail for password reset.
                                            

                                        }
                                        else
                                        {
                                            message = "Please try after some time";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please try another password.";
                                    }

                                }
                                else
                                {
                                    message = "Your Details Dont Match or You have NOT registered with DMC.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
            else
            {
                message = "Code not match";
            }
        }
        return message;
    }

    public ActionResult introduction()
    {
        return View();
    }

    public ActionResult powers()
    {
        return View();
    }

    public ActionResult thecouncil()
    {
        return View();
    }

    //public ActionResult gallery()
    //{
    //    return View();
    //}
    public ActionResult Gallery()
    {
        return View();
    }

    public ActionResult accomplishments()
    {
        return View();
    }

    public ActionResult registration()
    {
        return View();
    }
    public ActionResult cmeperforma()
    {
        return View();
    }
    public ActionResult cmeonline()
    {
        return View();
    }
    public ActionResult cmerequirements()
    {
        return View();
    }
    public ActionResult cmepassbook()
    {
        return View();
    }
    public ActionResult duties()
    {
        return View();
    }
    public ActionResult inst_general()
    {
        return View();
    }

    public ActionResult inst_fees()
    {
        return View();
    }
    public ActionResult inst_docupload()
    {
        return View();
    }
    public ActionResult disclaimer()
    {
        return View();
    }
    public ActionResult feestructure()
    {
        return View();
    }
    public ActionResult privacypolicy()
    {
        return View();
    }
    public ActionResult termofuse()
    {
        return View();
    }

    public ActionResult litigations()
    {
        return View();
    }


    public ActionResult council_meeting()
    {
        return View();
    }
    public ActionResult Cme_workshop_Conference()
    {
        return View();
    }

    public ActionResult Media_room()
    {
        return View();
    }
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    public ActionResult LogOut()
    {
        Session.Abandon();
        return RedirectToAction("Index", "Home");
    }
    public ActionResult SearchElectrolData(string regid)
    {
        string msg = "";
        DataTable dtSearch = dal.GetList("tbl_electrolData", "*", "RegNo='" + regid.Trim() + "'");
        if (dtSearch.Rows.Count > 0)
        {
            return Json(MRPLookup.DataTableToJSONWithJSONNet(dtSearch), JsonRequestBehavior.AllowGet);
        }
        else
        {
            msg = "Data not found";
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
    }
    public ActionResult SearchElectrolDataUpdate(string regid)
    {
        int upd = 1;
        upd = dal.Updation("tbl_electrolData", "Status='Completed',Date='" + lk.GetDateTime() + "'", "ID='" + regid.Trim() + "'");
        if (upd == 0)
        {

            return Json(upd, JsonRequestBehavior.AllowGet);
        }
        else
        {
            return Json(upd, JsonRequestBehavior.AllowGet);
        }
    }

    public ActionResult TotalCount()
    {
        DataTable dtcntCompleted = dal.GetList("tbl_electrolData", "count(*) as cntCompleted", "status='Completed'");
        DataTable dtcntNotCompleted = dal.GetList("tbl_electrolData", "count(*) as cntNotCompleted", "status ='Valid'");
        string totalCmpleteStatus = "Completed: " + Convert.ToString(dtcntCompleted.Rows[0]["cntCompleted"]) + "  Not Completed: " + Convert.ToString(dtcntNotCompleted.Rows[0]["cntNotCompleted"]);
        return Json(totalCmpleteStatus, JsonRequestBehavior.AllowGet);
    }
    public ActionResult Renewal_Reminder(string key)
    {
        string msg = "";
        try
        {

            key = "1111";
            string validKey = "1111";
            // MRPLookup.SendSMS("Renewal_expired_tdy", "9899849487", "Dinesh", "", "", "", "", "", "", "", "", "");
            if (key == validKey)
            {
                string expiry_frtyfive = Convert.ToDateTime(DateTime.Now.AddDays(30)).ToString("yyyy-MM-dd");//date(('Y-m-d'), strtotime('+30 days'));
                string expiry_tdy = Convert.ToDateTime(DateTime.Now).ToString("yyyy-MM-dd");//date('Y-m-d');
                string expiry_pastfifty = Convert.ToDateTime(DateTime.Now.AddDays(-50)).ToString("yyyy-MM-dd");// date(('Y-m-d'), strtotime('-50 days'));
                string cond = "(Expiry_Date = '" + expiry_frtyfive + "' OR  Expiry_Date = '" + expiry_tdy + "' OR Expiry_Date = '" + expiry_pastfifty + " ') AND (Mobile !='' OR  Email !='')";
                //DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", cond);
                string strConnString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                SqlConnection con = new SqlConnection(strConnString);
                //SqlConnection con = new SqlConnection(@"Data Source=103.20.212.254,1232;Initial Catalog=dmcaws_New;User Id=sa;Password=bD$x89K3$@K9UaQsKQ");
                //SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-PKTADCN;Initial Catalog=dmcaws1;integrated security=true");
                con.Open();
                SqlCommand cmd = new SqlCommand("select * from pisl_fresh_registration_mst where " + cond + "", con);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                con.Close();
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string First_Name = Convert.ToString(dt.Rows[i]["First_Name"]);
                        string Last_Name = Convert.ToString(dt.Rows[i]["Last_Name"]);
                        string Regd_ID = Convert.ToString(dt.Rows[i]["Regd_ID"]);
                        string Regd_Type = Convert.ToString(dt.Rows[i]["Regd_Type"]);
                        string Mobile = Convert.ToString(dt.Rows[i]["Mobile"]);
                        string Expiry_Date = Convert.ToDateTime(dt.Rows[i]["Expiry_Date"]).ToString("yyyy-MM-dd");
                        string date_approved = Convert.ToDateTime(dt.Rows[i]["date_approved"]).ToString("yyyy-MM-dd");
                        string tdydate = Convert.ToDateTime(System.DateTime.Now).ToString("yyyy-MM-dd");
                        string to = Convert.ToString(dt.Rows[i]["Email"]);

                        string subject1 = "Renewal of Registration with Delhi Medical Council"; //// Give the email a subject
                        string subject2 = "Expiry of Registration with Delhi Medical Council";
                        string subject3 = "Deletion of Regd Number with Delhi Medical Council";
                        string message1 = "";
                        message1 += "Dear Dr " + First_Name + " " + Last_Name + ",";
                        message1 += "Greetings from Delhi Medical Council!!";

                        message1 += "   This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council is due for renewal.";
                        message1 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting ";
                        message1 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message1 += "For inclusion of any additional qualification, please produce the original degree at the office of Delhi Medical Council, so that your additional ";
                        message1 += "qualification certificate can be verified with the original document. The original degree / diploma Certificate will be returned immediately after verification. ";

                        message1 += "<b>This is a system generated email and we request you not to reply to this email. Please ignore if already applied.</b>";

                        message1 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message1 += "Warm Regards,";

                        message1 += "Delhi Medical Council.";
                        message1 += "Ground Floor, B Wing, B Block-1";
                        message1 += "DMCR IT Park, Shastri Park";
                        message1 += "New Delhi-110053";
                        message1 += "Tel: +91-011-46621000";
                        message1 += "Website - www.delhimedicalcouncil.org	 ";

                        string message2 = "";
                        message2 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message2 += "Greetings from Delhi Medical Council!!";

                        message2 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council expired on " + Expiry_Date + " and  is due for renewal. ";

                        message2 += "We request you to kindly renew your registration within thirty days and keep your registration in force. You can renew your registration online by visiting ";
                        message2 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message2 += "Please take note that in case you do not apply for renewal of registration within the stipulated period, your name shall be removed from the State Medical ";
                        message2 += "Register maintained by the Delhi Medical Council in accordance with the provisions of Section 22 of the Delhi Medical Council Act, 1997 which will debar";
                        message2 += "you from practicing Allopathic in the state of Delhi.";

                        message2 += "<b>Kindly ignore this email, in case you have already applied for renewal of registration</b>";

                        message2 += "This is a system generated email and we request you not to reply to this email.";

                        message2 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message2 += "Warm Regards,";

                        message2 += "Delhi Medical Council.";
                        message2 += "Ground Floor, B Wing, B Block-1";
                        message2 += "DMCR IT Park, Shastri Park";
                        message2 += "New Delhi-110053";
                        message2 += "Tel: +91-011-46621000";
                        message2 += "Website - www.delhimedicalcouncil.org";

                        string message3 = "";
                        message3 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message3 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council has expired on " + Expiry_Date + ". You ";
                        message3 += "failed to renew the registration with Delhi Medical Council, in spite of notices/Emails (public / individual) issued for renewal. Hence, in accordance with the ";
                        message3 += "provisions of section 22(3) of Delhi Medical Council Act, 1997; your name under Registration number " + Regd_ID + "-" + Regd_Type + "  has been removed from the State ";
                        message3 += "Medical Register of Delhi Medical Council.";

                        message3 += "Please note that if you wish to have your name re-entered in the State Medical Register of Delhi Medical Council, you may do so, by paying fees as detailed herein below,";
                        message3 += "in addition to fee for renewal of registration (Rs. 2000/-)";

                        message3 += "Late fees for non-renewal of registration:-";
                        message3 += "(a) upto six months from the date from 		Rs. 1000/- (Rupees One Thousand only)";
                        message3 += "    which registration is due for renewal";
                        message3 += "(b) for period more than six months 	    Rs. 2000/- (Rupees One Thousand only)";
                        message3 += "     but upto one year";
                        message3 += "(c) for period more than one year 			Rs. 1000/- (Rupees One Thousand per year and Part thereof)";

                        message3 += "Please also note that any person servicing or practicing modern scientific system of medicine (allopathy) in Delhi without holding valid registration with Delhi Medical Council is liable for action under the provisions of Delhi Medical Council Act, 1997.";
                        message3 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting www.delhimedicalcouncil.org and apply under Online Renewal & Services.";

                        message3 += "<b>Kindly ignore this letter, in case you have already applied for renewal of registration</b>";

                        message3 += "This is a system generated email and we request you not to reply to this email.";

                        message3 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message3 += "Warm Regards,";

                        message3 += "Delhi Medical Council.";
                        message3 += "Ground Floor, B Wing, B Block-1";
                        message3 += "DMCR IT Park, Shastri Park";
                        message3 += "New Delhi-110053";
                        message3 += "Tel: +91-011-46621000";
                        message3 += "Website - www.delhimedicalcouncil.org,";

                        string headers = "From: DMC Registration System <registration@delhimedicalcouncil.org>' . '\r\n'"; // Set from headers

                        string message = "";
                        string subject = "";
                        string trigger = "";
                        string msgtxt = "";
                        if (Convert.ToDateTime(Expiry_Date) > Convert.ToDateTime(tdydate))
                        {
                            message = message1;
                            subject = subject1;
                            trigger = "Renewal_due_reminder";
                            msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Renewal of your DMC Regd No " + Regd_ID + " - " + Regd_Type + " is due. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }

                        }
                        else if (Convert.ToDateTime(Expiry_Date) == Convert.ToDateTime(tdydate))
                        {
                            message = message2;
                            subject = subject2;
                            trigger = "Renewal_expired_tdy";
                            // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Registration of DMC Regd No " + Regd_ID + " - " + Regd_Type + " expired today. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }
                        }
                        //else if (Convert.ToDateTime(Expiry_Date) < Convert.ToDateTime(tdydate))
                        //{
                        //    message = message2;
                        //    subject = subject2;
                        //    trigger = "Renewal_expired_fifty";
                        //   // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Your  ID " + Regd_ID + " - " + Regd_Type + " has been removed from the State Medical Register of DMC . Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                        //    if (!string.IsNullOrEmpty(to))
                        //    {
                        //       // MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //    if (!string.IsNullOrEmpty(Mobile))
                        //    {
                        //       // MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(to))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(Mobile))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}

                    }
                }

            }
            else
            {
                msg = "Key not match";
                string path = "C:\\TestService\\ServiceLog.txt";
                using (StreamWriter writer = new StreamWriter(path, true))
                {
                    writer.WriteLine(string.Format(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt"), DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt")));
                    writer.Close();
                }
            }
        }
        catch
        {

        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult certverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["cert"];
            string Regd_type = "";
            string regd_id = "";

            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["cert"]);
            var splitedString = decodedstr.Split('-');
            Regd_type = splitedString[0];
            regd_id = splitedString[1];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            switch (Regd_type)
            {
                case "RRE":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "FRS":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "PROV":
                    db = "pisl_prov_registration_mst";
                    qual_db = "pisl_prov_regi_qual_mst";
                    break;

                default:
                    Message = "This certificate cannnot be verified";
                    break;

            }

            var check_namechange = dal.GetList("tbl_NameChangeHistory_New", "CaseID,Name=(case when (New_MiddleName is null or  New_MiddleName='') then New_FirstName+' '+New_LastName when (New_MiddleName is null or  New_MiddleName='') and (New_LastName is null or New_LastName='') then New_FirstName else New_FirstName+' '+New_MiddleName+' '+New_LastName end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_namechange.Rows.Count > 0)
            {
                string CaseID = check_namechange.Rows[0]["CaseID"].ToString();
                ViewBag.Name = check_namechange.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                if (check_Doctordata.Rows.Count > 0)
                {
                    string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
                    ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                    DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                    DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                    DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                    ViewBag.qual = dt_qual;
                    ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                    ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                    Message = "success";
                }
                else
                {
                    Message = "This Entry Cannot be Verified";
                }
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;

        return View();
    }
    public ActionResult VeryfyCertificate(string value)
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        var qstring = value;
        var decodedStr = MRPLookup.Decrypt1(qstring);
        var splitedString = decodedStr.Split('-');
        var Regd_type = splitedString[0];
        var regd_id = splitedString[1];
        var db = "";
        var qual_db = "";
        //string regdtype=
        switch (Regd_type)
        {
            case "RRE":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "FRS":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "PROV":
                db = "pisl_prov_registration_mst";
                qual_db = "pisl_prov_regi_qual_mst";
                break;

            default:
                Message = "This certificate cannnot be verified";
                break;

        }
        var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
        if (check_Doctordata.Rows.Count > 0)
        {
            string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
            DataTable dt_Documents = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
            DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign' ");

        }
        else
        {
            Message = "This Entry Cannot be Verified";
        }
        return Json("", JsonRequestBehavior.AllowGet);
    }
    public ActionResult letterverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["letter"];
            string Regd_type = "";
            string regd_id = "";
            string ID = "";
            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["letter"]);
            var splitedString = decodedstr.Split('-');
            ID = splitedString[0];
            Regd_type = splitedString[1];
            regd_id = splitedString[2];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            //switch ()
            //{
            //    case "RRE":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "FRS":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "PROV":
            //        db = "pisl_prov_registration_mst";
            //        qual_db = "pisl_prov_regi_qual_mst";
            //        break;

            //    default:
            //        Message = "This certificate cannnot be verified";
            //        break;

            //}
            var letter_type = "";
            var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,date_approved,drg_from,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "ID='" + ID + "' and Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_Doctordata.Rows.Count > 0)
            {
                switch (check_Doctordata.Rows[0]["drg_from"].ToString())
                {
                    case "noc":
                        letter_type = "No Objection Certificate";
                        break;

                    case "gdst":
                        letter_type = "Good Standing Certificate";
                        break;
                }
                ViewBag.lettertype = letter_type;
                ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("pisl_fresh_regi_qual_mst", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='Sign'");
                if (!string.IsNullOrEmpty(check_Doctordata.Rows[0]["date_approved"].ToString()))
                {
                    ViewBag.DateApproved = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).ToString("dd MMMM,yyyy");
                    ViewBag.expiry = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).AddDays(-1).AddMonths(6).ToString("dd MMMM, yyyy");
                }
                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(ID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                Message = "This Entry Cannot be Verified";
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;
        return View();
    }
    public ActionResult Regi_search()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public ActionResult search_ur_dr()
    {

        return View();
    }
    public ActionResult regi_search_submit(string Regid, string Types)
    {
        try
        {


            string regid = Request.QueryString["Regd_ID"];
            string type = Request.QueryString["Type"]; ;
            //string type = frm["type"].Trim();
            //string regid = frm["regid"].Trim();
            string colname = "*";
            string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "' ORDER BY S_No DESC";
            DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
            if (dt.Rows.Count > 0)
            {
                DateTime ddob = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                DateTime dapproved = Convert.ToDateTime(dt.Rows[0]["date_approved"].ToString());
                DateTime dexpiry = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                ViewBag.dateapproved = dapproved.ToShortDateString();
                ViewBag.expirydate = dexpiry.ToShortDateString();
                ViewBag.dob = ddob.ToShortDateString();
                ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


                DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
                if (result_remarks.Rows.Count > 0)
                {
                    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    {
                        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    }
                }
                DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
                if (qualificationdt.Rows.Count > 0)
                {
                    ViewBag.qualdata = qualificationdt;
                }

            }
            return View();
        }
        catch (Exception ex)
        {
            return View();
        }
    }
    public ActionResult regi_search_submits(FormCollection frm)
    {

        string clientCaptcha = frm["CL_CAPCHA"].ToString();
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;

            return Json("-1");
        }
        string msg = "";
        //string type = Regd_ID;
        //string regid = Type;
        string type = frm["type"].Trim();
        string regid = frm["regid"].Trim();
        string colname = "*";
        string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
        if (dt.Rows.Count > 0)
        {
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
            if (result_remarks.Rows.Count > 0)
            {
                for (int i = 0; i < result_remarks.Rows.Count; i++)
                {
                    ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                }
            }
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult search_ur_dr_submit(FormCollection frm)
    {
        try
        {



            string First_Name = Request.QueryString["First_Name"];
            string Last_Name = frm["Last_Name"];
            string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
            string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
            string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
            string Mobile = Request.QueryString["Mobile"];
            string Email = Request.QueryString["Email"];

            if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Last_Name) && !string.IsNullOrEmpty(Corr_Add_Line_1) && !string.IsNullOrEmpty(Corr_Add_Line_2) && !string.IsNullOrEmpty(Corr_Add_Pincode) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Mobile='" + Mobile + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}

                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "Email='" + Email + "' and Mobile='" + Mobile + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }


            return View();
        }
        catch (Exception ex)
        {
            return View();

        }
    }


    public ActionResult search_ur_dr_submit2(FormCollection frm)
    {
        string msg = "";
        string First_Name = frm["First_Name"];
        string Last_Name = frm["Last_Name"];
        string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
        string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
        string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
        string Mobile = frm["Mobile"];
        string Email = frm["Email"];

        string condtions = "First_Name='" + First_Name.Trim() + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
        if (dt.Rows.Count > 0)
        {
            //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
            //if (result_remarks.Rows.Count > 0)
            //{
            //    for (int i = 0; i < result_remarks.Rows.Count; i++)
            //    {
            //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
            //    }
            //}
            string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", condtions2);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        else
        {
            msg = "Not Data Found";
        }


        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult cme()
    {
        return View();
    }
    public ActionResult status_comp2021()
    {
        return View();
    }

    public ActionResult ForgetEmailPasswordProv()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public dynamic getForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB)
    {
        //select pu.First_Name,pu.Last_Name,pu.email,pu.Mobile from pisl_users as pu inner join pisl_prov_regi_qual_mst as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type where pu.Regd_ID = 18430 and pu.DOB = '1991-10-26' and pfq.passing_date = 2016 and pfq.quali_course = 'M.B.B.S.'
        List<dynamic> OBJ = new List<dynamic>();
        string dob = lk.convertdate1(txt_DOB);
        try
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else {
                db = "pisl_fresh_regi_qual_mst";
            }

            DataTable dt1 = dal.GetList("pisl_users as pu inner join "+db+" as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType.ToUpper() + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                OBJ.Add(MRPLookup.Convert_DatatableToList(dt1).ToList());
                return Json(OBJ, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        catch (Exception)
        {

            return null;
        }
        
    }

    public string otpForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail)
    {
        string message = string.Empty;
        string dob = lk.convertdate1(txt_DOB);
        string db = "";
        if (txtRegType.ToUpper() == "PROV")
        {
            db = "pisl_prov_regi_qual_mst";
        }
        else
        {
            db = "pisl_fresh_regi_qual_mst";
        }
        DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
        if (dt1.Rows.Count > 0)
        {
            MailFormat mf = new MailFormat();
            string code = MRPLookup.RandamStringGenerator1();
            Session["provotp"] = code;
            string mailBody = "Your OTP is: " + code + ". DMC";
            string sendmailStatus= MRPLookup.sendMail(txtEmail.Trim(), "DMC | OTP Verification", mailBody, "", "");


            //string mailBody = mf.SendCodeOnMail(dt1.Rows[0]["First_Name"].ToString(), code);
            //string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(),"Reset Password Code" + System.DateTime.Now + "", mailBody, "", "");
            if (sendmailStatus != "Technical issue! Please try agiain")
            {
                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

            }
            else
            {
                message = sendmailStatus;
            }


            return message;
        }
        return "Some thing went wrong...!";
    }

    public string submitForgetEmailPasswordProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail, string txtMobileNo,string CaptchaCaseID,string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (Session["provotp"].ToString()!=txtCode)
        {
            return "Otp incorrect";
        }

        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact Captcha as written below.";
            // return message;
        }
        else
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else
            {
                db = "pisl_fresh_regi_qual_mst";
            }
            string dob = lk.convertdate1(txt_DOB);
            DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile,pu.Regd_ID,pu.Regd_Type", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                if (Convert.ToString(dt1.Rows[0]["Regd_ID"]) != "" && Convert.ToString(dt1.Rows[0]["Regd_Type"]) != "")
                {
                      string colValue = "Email='" + txtEmail.Trim() + "',Mobile='" + txtMobileNo.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                      updPassword = dal.Updation("pisl_users", colValue, "Regd_ID='"+dt1.Rows[0]["Regd_ID"].ToString()+ "' and Regd_Type='"+ dt1.Rows[0]["Regd_Type"].ToString() + "'");
               
                   
                     var tblCurrentStatuscolomns = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                     var Currentupdatestatuss = dal.Updation("pisl_temp_registrations", tblCurrentStatuscolomns, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");

                    var tblCurrentStatuscolomns1 = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                    var Currentupdatestatuss1 = dal.Updation("pisl_fresh_registration_mst", tblCurrentStatuscolomns1, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");



                    message = "Your Email and Mobile Changed successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                    //MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                   // Send SMS and mail for password reset.
                }
                else
                {
                    message = "Please try after some time";
                }
            }
            else
            {
                message = "Data Not found..!";
            }
        }
        return message;
    }
    public string sendOTP(string EmailId)
    {
        string message = "";
        string cond = "email='" + EmailId + "'";
        DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
        if (dtLogin.Rows.Count > 0)
        {
            string mobile = dtLogin.Rows[0]["Mobile"].ToString();
            Session["otp"] = GetRandomText();
            string OTP = Session["otp"].ToString();
            //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
            string mailBody = "Your OTP is: " + OTP + ". DMC";
            MRPLookup.sendMail(EmailId.Trim(), "DMC | OTP Verification", mailBody, "", "");
            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
            MRPLookup.SendSMS("otp", mobile.Trim(), "", "", OTP, "", "", "", "", "", "", "");
            message = "Please check your email or Mobile for OTP";
        }
        else
        {
            message = "Email not found, Please enter a valid email";
        }
        return message;
    }

    public ActionResult ChangePassward(FormCollection frm)
    {
        string Result = "";
        if (frm["txtOTP"].ToString() == Session["OTP"].ToString())
        {
            if (frm["txt_password"].Length >= 8 && frm["txt_password"].Length <= 18)
            {
                Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                Boolean foundMatch = regexObj.IsMatch(frm["txt_password"]);
                if (foundMatch == true)
                {
                    string where = "email='" + frm["txt_email"] + "'";// and Mobile='"+ frm["txt_contactno"] + "'";
                    DataTable dt_dr_details = dal.GetList("pisl_users", "*", where);
                    if (dt_dr_details != null)
                    {
                        if (dt_dr_details.Rows.Count > 0)
                        {
                            string pass = Encrypt(frm["txt_password"].Trim());
                            string col = " password='" + pass + "'";
                            var update = dal.Updation("pisl_users", col, "email='" + dt_dr_details.Rows[0]["email"].ToString() + "'");
                            if (update == 0)
                            {
                                string hostName = Dns.GetHostName();
                                string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                string colName = "activity,email,password,ip,system,description,date";
                                string colValue = "'Change Passs','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + frm["txt_password"].ToString().Trim() + "','" + IP + "','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + pass + "',getdate()";
                                int ins = dal.insertion("tbl_activity", colName, colValue);
                                string message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                MRPLookup.SendSMS("forgot_pwd", dt_dr_details.Rows[0]["Mobile"].ToString(), dt_dr_details.Rows[0]["First_Name"].ToString(), dt_dr_details.Rows[0]["Last_Name"].ToString(), "", "", dt_dr_details.Rows[0]["email"].ToString(), frm["txt_password"].ToString().Trim(), "", "", "", "");
                                Result = "0";
                            }
                            else
                            {
                                Result = "Somthing wrong Error !";
                            }
                        }
                        else
                        {
                            Result = "This is not registered email please check.";
                        }
                    }
                }
                else
                {
                    Result = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                }
            }
            else
            {
                Result = "Password Length must between 8 to 18 letters";
            }
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
    public ActionResult verifyOTP(string otp)
    {
        string Result = "";
        if (otp == Session["otp"].ToString())
        {
            Result = "DONE";
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
}
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using DelhimedicalcouncilORG;
using System.Data;
using System.Security.Cryptography;
using System.Text;
using System.IO;
using System.Drawing;
using System.Net;
using System.Net.Mail;

using System.Text.RegularExpressions;
using System.Data.SqlClient;
using System.Configuration;

namespace DelhimedicalcouncilORG.Controllers
{
public class homeController : Controller
{
    // GET: home
    DAL dal = new DAL();
    MRPLookup lk = new MRPLookup();
    MailFormat mf = new MailFormat();


    private string RetrieveContent(string webPage)
    {
        HttpWebResponse response = null;//used to get response
        StreamReader respStream = null;//used to read response into string
        try
        {
            //create a request object using the url passed in
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(webPage);
            request.Timeout = 10000;

            //go get a response from the page
            response = (HttpWebResponse)request.GetResponse();

            //create a streamreader object from the response
            respStream = new StreamReader(response.GetResponseStream());

            //get the contents of the page as a string and return it
            return respStream.ReadToEnd();
        }
        catch (Exception ex)//houston we have a problem!
        {
            throw ex;
        }
        finally
        {
            //close it down, we’re going home!
            response.Close();
            respStream.Close();
        }
    }

    //using a regular expression, find all of the href or urls
    //in the content of the page
    private void GetAllUrls(string content)
    {
        //regular expression
        string pattern = @"(?:href\s*=)(?:[\s""']*)(?.*?)(?:[\s>""'])";

        //Set up regex object
        Regex RegExpr = new Regex(pattern, RegexOptions.IgnoreCase);

        //get the first match
        Match match = RegExpr.Match(content);

        //loop through matches
        while (match.Success)
        {

            //output the match info
            Console.WriteLine("href match: " + match.Groups[0].Value);
            //WriteToLog(@"C:\matchlog.txt", "href match: " + match.Groups[0].Value + "\r\n");

            Console.WriteLine("Url match: " + match.Groups[1].Value);
            //WriteToLog(@"C:\matchlog.txt", "Url | Location | mailto match: " + match.Groups[1].Value + "\r\n");

            //get next match
            match = match.NextMatch();
        }
    }

    //Write to a log file
    //private void WriteToLog(string file, string message)
    //{
    //using (StreamWriter w = File.AppendText(file))
    //{
    //w.WriteLine(DateTime.Now.ToString() + ": " + message); w.Close();
    //}
    //}




    /// <summary>
    /// ////////////////////////
    /// </summary>
    /// <returns></returns>
    /// 

    public ActionResult Index()
    {




        return View();
    }
    //Start Login//
    public ActionResult login()
    {
        // Session["CAPTCHA"] = "111111";// GetRandomText();
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }

    
    public string Login_Form(string EmailId, string password, string ip, string captcha)
    
    {



        var dateTime = DateTime.Now;
        var tt = dateTime.Hour;


        var dayOfWeek = dateTime.DayOfWeek;
        var day = dayOfWeek.ToString();

        //Decrypt("","");
        //70789
        //554e981f4946f37a4818f1cea3928fe3
        //drtushargupta90@gmail.com
        string message = string.Empty;
        string clientCaptcha = captcha;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            ViewBag.CaptchaError = "Sorry, please write exact text as written above.";
            message = "11,11";
            return message;
        }
        else
            if (Session["checkSession"] == null)
        {
            ip = Request.ServerVariables["REMOTE_ADDR"].ToString();

            string pass = Encrypt(password);
            // string decoded = MRPLookup.Decrypt1(HttpUtility.UrlDecode(pass));
            string cond = "email='" + EmailId + "' and password='" + pass + "' and active!=3 ";//and active=1
            DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
            if (dtLogin.Rows.Count > 0)
            {
                if (Convert.ToString(dtLogin.Rows[0]["Regd_Type"]) == "PROV" && dtLogin.Rows.Count == 1)
                {
                    DataTable dt_temp_D = dal.GetList("pisl_temp_registrations", "Regd_ID,Regd_Type,Final_Status,Approved_By,date_approved,type", "email='" + EmailId.Trim() + "' order by ID desc");
                    for (int i = 0; i < dt_temp_D.Rows.Count; i++)
                    {
                        if (Convert.ToString(dt_temp_D.Rows[i]["Regd_Type"]) != "PROV" && Convert.ToString(dt_temp_D.Rows[i]["Final_Status"]) == "Approved" && Convert.ToString(dt_temp_D.Rows[i]["Approved_By"]) != null && Convert.ToString(dt_temp_D.Rows[i]["date_approved"]) != null && Convert.ToString(dt_temp_D.Rows[i]["type"]) != "service")
                        {



                            string colnameWithValue = "Regd_ID=" + Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]) + ",Regd_Type='" + dt_temp_D.Rows[i]["Regd_Type"].ToString() + "'";
                            string conditions = "S_No=" + Convert.ToInt32(dtLogin.Rows[0]["S_No"]) + "";
                            var Update_paymentUpdate = dal.Updation("pisl_users", colnameWithValue, conditions);
                            if (Update_paymentUpdate == 0)
                            {
                                dtLogin.Rows[0]["Regd_ID"] = Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]);
                                dtLogin.Rows[0]["Regd_Type"] = dt_temp_D.Rows[i]["Regd_Type"].ToString();

                            }
                            break;
                        }
                    }
                }


                for (int i = 0; i < dtLogin.Rows.Count; i++)
                {
                    string hash = Convert.ToString(dtLogin.Rows[i]["hash"]);
                    string decryptedstring = Decrypt(pass, hash);

                    string gid = Convert.ToString(dtLogin.Rows[i]["GID"]);
                    //string active = Convert.ToString(dtLogin.Rows[0]["active"]);
                    if (gid == "0")//Login for doctor
                    {
                        //DataTable dt_lastloginRecord = dal.GetList("pisl_users where email='" + EmailId + "' order by S_No desc", "TOP 1 *", "");
                        if (dtLogin != null && dtLogin.Rows.Count > 0)
                        {

                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[i]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[i]["Regd_Type"]);
                            }
                            else
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                            }
                            if (dtLogin.Rows[i]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[i]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }

                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                        }
                        else
                        {
                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[0]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            }
                            if (dtLogin.Rows[0]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }
                        }


                        message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 2;
                    }
                    else if (gid == "1")//Login for internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["isno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 1;
                            }
                            else
                            {
                                message = "0,6";
                            }
                        }

                        else
                        {
                            message = "0,5";
                        }
                    }
                    else if (gid == "2")//Login for admin and internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["asno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 3;
                            }
                            else
                            {
                                message = "0,6";
                            }

                        }
                        else
                        {
                            message = "0,5";
                        }
                    }
                }
            }
            else
            {
                message = "0,0";
            }
        }
        else
        {
            message = "10,10";
        }
        return message;
    }

    public string Encrypt(string password)
    {
        // Decrypt("", "");
        //string password = @"1234abcd";

        // byte array representation of that string
        byte[] encodedPassword = new UTF8Encoding().GetBytes(password);

        // need MD5 to calculate the hash
        byte[] hash = ((HashAlgorithm)CryptoConfig.CreateFromName("MD5")).ComputeHash(encodedPassword);

        // string representation (similar to UNIX format)
        string encoded = BitConverter.ToString(hash)
           // without dashes
           .Replace("-", string.Empty)
           // make lowercase
           .ToLower();
        return encoded;
    }
    public string Decrypt(string password, string hash1)
    {//https://md5decrypt.net/#answer
        string ss = "";
        string source = "zdNot3oAz5I%3DjRspJg78a%2FY%3D";// "Hello World!";
        MD5 md5 = System.Security.Cryptography.MD5.Create();
        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(password);
        byte[] hash = md5.ComputeHash(inputBytes);

        // step 2, convert byte array to hex string
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < hash.Length; i++)
        {
            sb.Append(hash[i].ToString("X2"));
        }
        return sb.ToString();
    }
    static string GetMd5Hash(MD5 md5Hash, string input)
    {

        // Convert the input string to a byte array and compute the hash.
        byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));

        // Create a new Stringbuilder to collect the bytes
        // and create a string.
        StringBuilder sBuilder = new StringBuilder();

        // Loop through each byte of the hashed data 
        // and format each one as a hexadecimal string.
        for (int i = 0; i < data.Length; i++)
        {
            sBuilder.Append(data[i].ToString("x2"));
        }

        // Return the hexadecimal string.
        return sBuilder.ToString();
    }
    public FileResult GetCaptchaImage()
    {
        MemoryStream ms = new MemoryStream();
        if (Session["CAPTCHA"] != null)
        {
            string text = Session["CAPTCHA"].ToString();

            //first, create a dummy bitmap just to get a graphics object
            Image img = new Bitmap(1, 1);
            Graphics drawing = Graphics.FromImage(img);

            Font font = new Font("Jokerman", 15);
            //measure the string to see how big the image needs to be
            SizeF textSize = drawing.MeasureString(text, font);

            //free up the dummy image and old graphics object
            img.Dispose();
            drawing.Dispose();

            //create a new image of the right size
            img = new Bitmap((int)textSize.Width + 40, (int)textSize.Height + 20);
            drawing = Graphics.FromImage(img);

            Color backColor = Color.SeaShell;
            Color textColor = Color.Red;
            //paint the background
            drawing.Clear(backColor);

            //create a brush for the text
            Brush textBrush = new SolidBrush(textColor);

            drawing.DrawString(text, font, textBrush, 20, 10);

            drawing.Save();

            font.Dispose();
            textBrush.Dispose();
            drawing.Dispose();


            img.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
            img.Dispose();

            return File(ms.ToArray(), "image/png");
        }
        else
        {
            return File(ms.ToArray(), "image/png");
        }
    }
    private string GetRandomText()
    {
        StringBuilder randomText = new StringBuilder();
        string alphabets = "12345679ABCEFGHKLMNPRSTUVWXZ";
        Random r = new Random();
        for (int j = 0; j <= 5; j++)
        {
            randomText.Append(alphabets[r.Next(alphabets.Length)]);
        }
        return randomText.ToString();
    }
    //End Login//
    public ActionResult signup()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    [HttpPost]
    public string sendotpsignup(string txt_Email, string txt_ContactNo)
    {
        string msg = "";
        try
        {
            var CheckEmail = IsEmailandMobileExists(txt_Email, "");
            var checkMobile = IsEmailandMobileExists("", txt_ContactNo);
            if (CheckEmail == false && checkMobile == false)
            {

                Session["otp"] = GetRandomText();
                string OTP = Session["otp"].ToString();
                //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
                string mailBody = "Your OTP is: " + OTP + ". DMC";
                MRPLookup.sendMail(txt_Email.Trim(), "DMC | OTP Verification", mailBody, "", "");

                //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
              

                MRPLookup.SendSMS("otp", txt_ContactNo.Trim(), "", "", OTP, "", "", "", "", "", "", "");
                msg = "0";
            }
            else if (CheckEmail == true && checkMobile == true)
            {
                msg = "Email and Mobile no. are already exists!!";
            }
            else
            {
                if (checkMobile == true && CheckEmail == false)
                {
                    msg = "Mobile No. is Already Exists!!";
                }
                else if (CheckEmail == true && checkMobile == false)
                {
                    msg = "Email Address is Already Exists!!";
                }


            }
        }
        catch (Exception ex)
        {
            msg = "1";
        }
        return msg;
    }
    public bool IsEmailandMobileExists(string email, string mobile)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        try
        {
            tableName = "pisl_users";
            colname = "*";
            if (!string.IsNullOrEmpty(email))
            {
                cond = "email='" + email + "'";
            }
            if (!string.IsNullOrEmpty(mobile))
            {
                cond = "mobile='" + mobile + "'";
            }
            //cond=
            DataTable dt_datacheck = dal.GetList(tableName, colname, cond);
            if (dt_datacheck != null && dt_datacheck.Rows.Count > 0)
            {
                IsExists = true;
            }

        }
        catch (Exception ex)
        {
            IsExists = false;
            throw;
        }
        return IsExists;
    }

    public ActionResult IsDocDataExists(string regd_type, string regd_no, string DOB, string PassingYear)
    {
        //List<dynamic> list = new List<dynamic>();
        string message = "";
        try
        {
            var tbl_name = "";

            var userExists = IsRegd_Exists(regd_type, regd_no, DOB, PassingYear, out tbl_name);
            if (userExists == true && tbl_name == "pisl_users")
            {

                message = "Already Registered With us. Please Login With Your Credential";
            }
            else
                if (userExists == true && tbl_name == "pisl_fresh_registration_mst")
            {
                message = "Your Registration No. is Expired. Please SignUp Again.";
            }
            else
            {
                message = "NotExists";
                //message = "Your Registration No. is Not Exists!";
            }
        }
        catch (Exception ex)
        {

        }
        return Json(message, JsonRequestBehavior.AllowGet);
    }
    public bool IsRegd_Exists(string regd_type, string regd_no, string DOB, string PassingYear, out string Tbl_Name)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        Tbl_Name = "";
        DataTable dt_UserCheck = null;
        try
        {
            tableName = "pisl_users";
            colname = "*";
            cond = "Regd_Type='" + regd_type + "' and Regd_ID='" + regd_no.Trim() + "'";
            dt_UserCheck = dal.GetList(tableName, colname, cond);
            if (dt_UserCheck == null || dt_UserCheck.Rows.Count == 0)
            {
                tableName = "pisl_fresh_regi_qual_mst";
                colname = "*";
                cond = "quali_type='Basic Qualification' AND Regd_ID='" + regd_no + "' "
                    + "AND Regd_Type='" + regd_type + "' AND passing_date =  '" + PassingYear.Trim() + "'";
                dt_UserCheck = dal.GetList(tableName, colname, cond);
                if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                {
                    Tbl_Name = "pisl_fresh_regi_qual_mst";

                    tableName = "pisl_fresh_registration_mst";
                    colname = "*";
                    cond = "Regd_ID='" + regd_no + "' AND Regd_Type='" + regd_type + "'";
                    dt_UserCheck = dal.GetList(tableName, colname, cond);
                    if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                    {
                        Tbl_Name = "pisl_fresh_registration_mst";
                        IsExists = true;
                    }
                    else
                    {
                        IsExists = false;
                    }
                }
                else
                {

                    IsExists = false;
                }
            }
            else
            {
                Tbl_Name = "pisl_users";
                IsExists = true;
            }
        }
        catch (Exception ex)
        {


            throw;
        }
        return IsExists;
    }

    [HttpPost]
    public string createsignup(string txt_Email, string txt_ContactNo, string txt_FirstName, string txt_MiddleName,
        string txt_LastName, string txt_Password, string txt_ConfirmPassword, string txt_DOB, bool chk_TermCondition,
        string Captcha, string Regd_ID, string txtOTP, string ddl_regType, string txt_oldData, string passingYear)
    {
        string message = "";
        string dob = lk.convertdate1(txt_DOB);
        string Tbl_Name = "";
        try
        {
            if (!IsEmailandMobileExists(txt_Email, ""))
            {
                if (!IsEmailandMobileExists("", txt_ContactNo))
                {
                    if (ddl_regType == "FRS" || ddl_regType == "RRE")
                    {
                        if (IsRegd_Exists(ddl_regType, Regd_ID, dob, passingYear, out Tbl_Name))
                        {
                            Tbl_Name = Tbl_Name;
                            if (Tbl_Name == "pisl_users")
                            {
                                //if Pisl_user Table Record Exists but no Email and Mobile No exists
                                //in this case update the Email and Mobile No.
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        DataTable dt_Email_Mobile_Check = dal.GetList("pisl_users",
                                                        "top 1*", " Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                        if (dt_Email_Mobile_Check != null)
                                                        {
                                                            if (dt_Email_Mobile_Check.Rows.Count > 0)
                                                            {
                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_Email_Mobile_Check.Rows[0]["email"])))
                                                                {
                                                                    string pass = Encrypt(txt_Password.Trim());
                                                                    string hash = Encrypt(MRPLookup.RandamStringGenerator1());
                                                                    var updateDt = dal.Updation("pisl_users",
                                                                        "email='" + txt_Email.Trim() + "',mobile='" + txt_ContactNo.Trim() + "',password='" + pass + "',hash='" + hash + "'",
                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                    if (updateDt == 0)
                                                                    {
                                                                        DataTable dt_fresh_Check = dal.GetList("pisl_fresh_registration_mst",
                                                                            "top 1 * ",
                                                                            "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                        if (dt_fresh_Check != null)
                                                                        {
                                                                            if (dt_fresh_Check.Rows.Count > 0)
                                                                            {
                                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_fresh_Check.Rows[0]["Email"])))
                                                                                {
                                                                                    var updateDt_fresh = dal.Updation("pisl_fresh_registration_mst",
                                                                                        "Email='" + txt_Email.Trim() + "',Mobile='" + txt_ContactNo.Trim() + "'",
                                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");

                                                                                    if (updateDt_fresh != 0)
                                                                                    {
                                                                                        message = "Error!!";
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                                        MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                                        message = "Please, Check Your Mail For Login Details";
                                                                        //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                                        MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                                    }
                                                                    else
                                                                    {
                                                                        message = "Error!!";
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    message = "Your record are already Exists with us!!";
                                                                }
                                                            }
                                                        } //End Updation
                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }
                            else if (Tbl_Name == "pisl_fresh_regi_qual_mst" || Tbl_Name == "pisl_fresh_registration_mst")
                            {
                                //Insert Login Record in Pisl_Users
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        string pass = Encrypt(txt_Password.Trim());
                                                        string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                        if (string.IsNullOrEmpty(Regd_ID))
                                                        {
                                                            Regd_ID = "0";
                                                        }
                                                        //if (txt_oldData != "")
                                                        //{
                                                        //    string colnamemst = "*";
                                                        //    string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        //    DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        //    if (dtrmst.Rows.Count > 0)
                                                        //    {
                                                        //        string oldtype = "";
                                                        //        if (ddl_regType == "FRS")
                                                        //        {
                                                        //            oldtype = "service";
                                                        //        }
                                                        //        else if (ddl_regType == "RRE")
                                                        //        {
                                                        //            oldtype = "reregi";
                                                        //        }
                                                        //        var corrAddress1 = dtrmst.Rows[0]["Corr_Add_Line_1"].ToString();
                                                        //        var corrAddress2 = dtrmst.Rows[0]["Corr_Add_Line_2"].ToString();
                                                        //        var perAddress1 = dtrmst.Rows[0]["Per_Add_Line_1"].ToString();
                                                        //        var perAddress2 = dtrmst.Rows[0]["Per_Add_Line_2"].ToString();

                                                        //        string colNameold = "Regd_ID,Regd_Type,type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,date_entered,Father_Name,POB,Gender,Nationality,Corr_Add_Line_1,Corr_Add_Line_2,Corr_Add_State,Corr_Add_Pincode,Corr_Add_Country,Per_Add_Line_1,Per_Add_Line_2,Per_Add_Line_State,Per_Add_Line_Pincode,Per_Add_Line_Country";

                                                        //        string colValueold = "'" + Regd_ID + "','" + ddl_regType + "','" + oldtype + "','" + txt_FirstName + "','" + txt_MiddleName + "','"  + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "', '"+ lk.GetDateTime()+ "' ,'"+ dtrmst.Rows[0]["Father_Name"] + "','" + dtrmst.Rows[0]["POB"] + "','" + dtrmst.Rows[0]["Gender"] + "','" + dtrmst.Rows[0]["Nationality"] + "','" + corrAddress1 + "','" + corrAddress2 + "','" + dtrmst.Rows[0]["Corr_Add_State"] + "','" + dtrmst.Rows[0]["Corr_Add_Pincode"] + "','" + dtrmst.Rows[0]["Corr_Add_Country"] + "','" + perAddress1 + "','" + perAddress2 + "','" + dtrmst.Rows[0]["Per_Add_Line_State"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Pincode"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Country"] + "'";
                                                        //        int insold = dal.insertion("pisl_temp_registrations", colNameold, colValueold);
                                                        //    }
                                                        //}
                                                        Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                        string colnamemst = "*";
                                                        string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        DateTime txtdob1 = Convert.ToDateTime(dtrmst.Rows[0]["DOB"]);
                                                        string txtdob = txtdob1.ToShortDateString();

                                                        string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                            + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                        string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + dtrmst.Rows[0]["First_Name"].ToString() + "','" + dtrmst.Rows[0]["Middle_Name"].ToString() + "',"
                                                            + "'" + dtrmst.Rows[0]["Last_Name"].ToString() + "','" + txtdob + "','" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                            + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                        int ins = dal.insertion("pisl_users", colName, colValue);
                                                        if (ins == 0)
                                                        {
                                                            string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                            MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                            message = "Please, Check Your Mail For Login Details";
                                                            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                            MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                        }
                                                        else
                                                        {
                                                            message = "Try after some time";
                                                        }

                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }

                        }
                        else
                        {
                            message = "Your Registration No and Passing Year is Not Exist with Us";
                        }
                    }
                    else
                    {
                        //Insert Login Record in Pisl_Users
                        if (chk_TermCondition == true)
                        {
                            if (txtOTP == Session["otp"].ToString())
                            {
                                if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                {
                                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                    Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                    if (foundMatch == true)
                                    {
                                        if (txt_Password == txt_ConfirmPassword)
                                        {
                                            if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                            {
                                                //if (Tbl_Name== "pisl_users") { }
                                                string pass = Encrypt(txt_Password.Trim());
                                                string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                if (string.IsNullOrEmpty(Regd_ID))
                                                {
                                                    Regd_ID = "0";
                                                }
                                                Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                if (ddl_regType == "-1")
                                                {
                                                    ddl_regType = "";
                                                }


                                                string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                    + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                int ins = dal.insertion("pisl_users", colName, colValue);
                                                if (ins == 0)
                                                {
                                                    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                    message = "Please, Check Your Mail";
                                                    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                }
                                                else
                                                {
                                                    message = "Try after some time";
                                                }

                                                //string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                //    + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                //string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                //    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                //    + "1,0,0,'"+ lk.GetDateTime()+ "','','" + Regd_ID1 + "'";
                                                //int ins = dal.insertion("pisl_users", colName, colValue);
                                                //if (ins == 0)
                                                //{
                                                //    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                //    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                //    message = "Please, Check Your Mail";
                                                //    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                //    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                //}
                                                //else
                                                //{
                                                //    message = "Try after some time";
                                                //}
                                            }
                                            else
                                            {
                                                message = "Enter A Valid Email";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password and Confrim Password is Not Same";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                    }
                                }
                                else
                                {
                                    message = "Password Length must between 8 to 18 letters";
                                }
                            }
                            else
                            {
                                message = "Enter the Valid OTP";
                            }
                        }
                        else
                        {
                            message = "Please check the Terms and Conditions";
                        }

                        //}
                    }
                }
                else
                {
                    message = "Mobile No. is Already Exists";
                }
            }
            else
            {
                message = "Email Already exists!!";
            }
            //
            //Cut the Code From There

        }
        catch
        {

        }
        return message;
    }

    public ActionResult SignupVerification()
    {
        string message = "";
        try
        {
            if (Request.QueryString["email"] != null && Request.QueryString["hash"] != null)
            {
                string email = Request.QueryString["email"];
                string hash = Request.QueryString["hash"];
                string cond = "Email='" + email.Trim() + "' and Hash='" + hash.Trim() + "' and Active=0";
                DataTable dt = dal.GetList("pisl_users", "*", cond);
                if (dt.Rows.Count > 0)
                {
                    int upd = dal.Updation("pisl_users", "Active=1", cond);
                    if (upd == 0)
                    {
                        message = "Your account has been activated, you can now login";
                    }
                    else
                    {
                        message = "Try after some time";
                    }
                }
                else
                {
                    message = "The url is either invalid or you already have activated your account.";
                }
            }
            else
            {
                message = "Invalid approach, please use the link that has been send to your email.";
            }
        }
        catch
        { }
        ViewBag.lbl_status = message;
        return View();
    }
    public ActionResult contact()
    {
        return View();
    }

    public ActionResult about()
    {
        return View();
    }
    public ActionResult faqs()
    {
        return View();
    }
    // Start forgot password
    public ActionResult forgotpassword()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public string sendCode(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        string message = string.Empty;
        try
        {
            string clientCaptcha = CaptchaCaseID;
            string serverCaptcha = Session["CAPTCHA"].ToString();
            if (!clientCaptcha.Equals(serverCaptcha))
            {
                ViewBag.ShowCAPTCHA = serverCaptcha;
                message = "Sorry, please write exact text as written below.";
            }
            else
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' ";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string name = Convert.ToString(dt.Rows[0]["First_Name"]);
                                        string Mobile = Convert.ToString(dt.Rows[0]["Mobile"]);

                                        MailFormat mf = new MailFormat();
                                        string code = MRPLookup.RandamStringGenerator1();
                                        string mailBody = mf.SendCodeOnMail(name, code);
                                        MRPLookup.SendSMS("otp", Mobile, "", "", code, "", "", "", "", "", "", "");
                                        string colValue = "Code='" + code.Trim() + "'";
                                        int updCode = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "'");
                                        if (updCode == 0)
                                        {
                                            string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(), "Reset Password Code " + System.DateTime.Now + "", mailBody, "", "");
                                            if (sendmailStatus != "Technical issue! Please try agiain")
                                            {
                                                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

                                            }
                                            else
                                            {
                                                message = sendmailStatus;
                                            }
                                        }
                                        else
                                        {
                                            message = "Please try after some time.";
                                        }

                                    }
                                    else
                                    {
                                        message = "Enter a New Password.";
                                    }
                                }
                                else
                                {
                                    message = "Your Email And Mobile Number Do not Match with DMC Registered Users.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
        }
        catch (Exception ex)
        {

        }
        return message;
    }
    public string forgotpasswordCaseID(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact text as written below.";
            // return message;
        }
        else
        {
            if (txtCode != "0")
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string mobile = Convert.ToString(dt.Rows[0]["Mobile"]);
                                    string firstName = Convert.ToString(dt.Rows[0]["First_Name"]);
                                    string lastName = Convert.ToString(dt.Rows[0]["Last_Name"]);
                                    //string new_password = Encrypt(MRPLookup.RandamStringGenerator1());
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string colValue = "password='" + new_PasswordMD5.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                                        updPassword = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                        if (updPassword == 0)
                                        {
                                            updPassword = dal.Updation("pisl_users", "Code='0'", "Email='" + txtEmail.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                            string hostName = Dns.GetHostName();
                                            string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                            string colName = "activity,email,password,ip,system,description,date";
                                            colValue = "'Change Passs','" + txtEmail + "','" + txtPassword + "','" + IP + "','" + mobile + "','" + new_PasswordMD5 + "',getdate()";
                                            int ins = dal.insertion("tbl_activity", colName, colValue);
                                            message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                            MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                                            // Send SMS and mail for password reset.
                                            

                                        }
                                        else
                                        {
                                            message = "Please try after some time";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please try another password.";
                                    }

                                }
                                else
                                {
                                    message = "Your Details Dont Match or You have NOT registered with DMC.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
            else
            {
                message = "Code not match";
            }
        }
        return message;
    }

    public ActionResult introduction()
    {
        return View();
    }

    public ActionResult powers()
    {
        return View();
    }

    public ActionResult thecouncil()
    {
        return View();
    }

    //public ActionResult gallery()
    //{
    //    return View();
    //}
    public ActionResult Gallery()
    {
        return View();
    }

    public ActionResult accomplishments()
    {
        return View();
    }

    public ActionResult registration()
    {
        return View();
    }
    public ActionResult cmeperforma()
    {
        return View();
    }
    public ActionResult cmeonline()
    {
        return View();
    }
    public ActionResult cmerequirements()
    {
        return View();
    }
    public ActionResult cmepassbook()
    {
        return View();
    }
    public ActionResult duties()
    {
        return View();
    }
    public ActionResult inst_general()
    {
        return View();
    }

    public ActionResult inst_fees()
    {
        return View();
    }
    public ActionResult inst_docupload()
    {
        return View();
    }
    public ActionResult disclaimer()
    {
        return View();
    }
    public ActionResult feestructure()
    {
        return View();
    }
    public ActionResult privacypolicy()
    {
        return View();
    }
    public ActionResult termofuse()
    {
        return View();
    }

    public ActionResult litigations()
    {
        return View();
    }


    public ActionResult council_meeting()
    {
        return View();
    }
    public ActionResult Cme_workshop_Conference()
    {
        return View();
    }

    public ActionResult Media_room()
    {
        return View();
    }
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    public ActionResult LogOut()
    {
        Session.Abandon();
        return RedirectToAction("Index", "Home");
    }
    public ActionResult SearchElectrolData(string regid)
    {
        string msg = "";
        DataTable dtSearch = dal.GetList("tbl_electrolData", "*", "RegNo='" + regid.Trim() + "'");
        if (dtSearch.Rows.Count > 0)
        {
            return Json(MRPLookup.DataTableToJSONWithJSONNet(dtSearch), JsonRequestBehavior.AllowGet);
        }
        else
        {
            msg = "Data not found";
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
    }
    public ActionResult SearchElectrolDataUpdate(string regid)
    {
        int upd = 1;
        upd = dal.Updation("tbl_electrolData", "Status='Completed',Date='" + lk.GetDateTime() + "'", "ID='" + regid.Trim() + "'");
        if (upd == 0)
        {

            return Json(upd, JsonRequestBehavior.AllowGet);
        }
        else
        {
            return Json(upd, JsonRequestBehavior.AllowGet);
        }
    }

    public ActionResult TotalCount()
    {
        DataTable dtcntCompleted = dal.GetList("tbl_electrolData", "count(*) as cntCompleted", "status='Completed'");
        DataTable dtcntNotCompleted = dal.GetList("tbl_electrolData", "count(*) as cntNotCompleted", "status ='Valid'");
        string totalCmpleteStatus = "Completed: " + Convert.ToString(dtcntCompleted.Rows[0]["cntCompleted"]) + "  Not Completed: " + Convert.ToString(dtcntNotCompleted.Rows[0]["cntNotCompleted"]);
        return Json(totalCmpleteStatus, JsonRequestBehavior.AllowGet);
    }
    public ActionResult Renewal_Reminder(string key)
    {
        string msg = "";
        try
        {

            key = "1111";
            string validKey = "1111";
            // MRPLookup.SendSMS("Renewal_expired_tdy", "9899849487", "Dinesh", "", "", "", "", "", "", "", "", "");
            if (key == validKey)
            {
                string expiry_frtyfive = Convert.ToDateTime(DateTime.Now.AddDays(30)).ToString("yyyy-MM-dd");//date(('Y-m-d'), strtotime('+30 days'));
                string expiry_tdy = Convert.ToDateTime(DateTime.Now).ToString("yyyy-MM-dd");//date('Y-m-d');
                string expiry_pastfifty = Convert.ToDateTime(DateTime.Now.AddDays(-50)).ToString("yyyy-MM-dd");// date(('Y-m-d'), strtotime('-50 days'));
                string cond = "(Expiry_Date = '" + expiry_frtyfive + "' OR  Expiry_Date = '" + expiry_tdy + "' OR Expiry_Date = '" + expiry_pastfifty + " ') AND (Mobile !='' OR  Email !='')";
                //DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", cond);
                string strConnString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                SqlConnection con = new SqlConnection(strConnString);
                //SqlConnection con = new SqlConnection(@"Data Source=103.20.212.254,1232;Initial Catalog=dmcaws_New;User Id=sa;Password=bD$x89K3$@K9UaQsKQ");
                //SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-PKTADCN;Initial Catalog=dmcaws1;integrated security=true");
                con.Open();
                SqlCommand cmd = new SqlCommand("select * from pisl_fresh_registration_mst where " + cond + "", con);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                con.Close();
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string First_Name = Convert.ToString(dt.Rows[i]["First_Name"]);
                        string Last_Name = Convert.ToString(dt.Rows[i]["Last_Name"]);
                        string Regd_ID = Convert.ToString(dt.Rows[i]["Regd_ID"]);
                        string Regd_Type = Convert.ToString(dt.Rows[i]["Regd_Type"]);
                        string Mobile = Convert.ToString(dt.Rows[i]["Mobile"]);
                        string Expiry_Date = Convert.ToDateTime(dt.Rows[i]["Expiry_Date"]).ToString("yyyy-MM-dd");
                        string date_approved = Convert.ToDateTime(dt.Rows[i]["date_approved"]).ToString("yyyy-MM-dd");
                        string tdydate = Convert.ToDateTime(System.DateTime.Now).ToString("yyyy-MM-dd");
                        string to = Convert.ToString(dt.Rows[i]["Email"]);

                        string subject1 = "Renewal of Registration with Delhi Medical Council"; //// Give the email a subject
                        string subject2 = "Expiry of Registration with Delhi Medical Council";
                        string subject3 = "Deletion of Regd Number with Delhi Medical Council";
                        string message1 = "";
                        message1 += "Dear Dr " + First_Name + " " + Last_Name + ",";
                        message1 += "Greetings from Delhi Medical Council!!";

                        message1 += "   This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council is due for renewal.";
                        message1 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting ";
                        message1 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message1 += "For inclusion of any additional qualification, please produce the original degree at the office of Delhi Medical Council, so that your additional ";
                        message1 += "qualification certificate can be verified with the original document. The original degree / diploma Certificate will be returned immediately after verification. ";

                        message1 += "<b>This is a system generated email and we request you not to reply to this email. Please ignore if already applied.</b>";

                        message1 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message1 += "Warm Regards,";

                        message1 += "Delhi Medical Council.";
                        message1 += "Ground Floor, B Wing, B Block-1";
                        message1 += "DMCR IT Park, Shastri Park";
                        message1 += "New Delhi-110053";
                        message1 += "Tel: +91-011-46621000";
                        message1 += "Website - www.delhimedicalcouncil.org	 ";

                        string message2 = "";
                        message2 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message2 += "Greetings from Delhi Medical Council!!";

                        message2 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council expired on " + Expiry_Date + " and  is due for renewal. ";

                        message2 += "We request you to kindly renew your registration within thirty days and keep your registration in force. You can renew your registration online by visiting ";
                        message2 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message2 += "Please take note that in case you do not apply for renewal of registration within the stipulated period, your name shall be removed from the State Medical ";
                        message2 += "Register maintained by the Delhi Medical Council in accordance with the provisions of Section 22 of the Delhi Medical Council Act, 1997 which will debar";
                        message2 += "you from practicing Allopathic in the state of Delhi.";

                        message2 += "<b>Kindly ignore this email, in case you have already applied for renewal of registration</b>";

                        message2 += "This is a system generated email and we request you not to reply to this email.";

                        message2 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message2 += "Warm Regards,";

                        message2 += "Delhi Medical Council.";
                        message2 += "Ground Floor, B Wing, B Block-1";
                        message2 += "DMCR IT Park, Shastri Park";
                        message2 += "New Delhi-110053";
                        message2 += "Tel: +91-011-46621000";
                        message2 += "Website - www.delhimedicalcouncil.org";

                        string message3 = "";
                        message3 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message3 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council has expired on " + Expiry_Date + ". You ";
                        message3 += "failed to renew the registration with Delhi Medical Council, in spite of notices/Emails (public / individual) issued for renewal. Hence, in accordance with the ";
                        message3 += "provisions of section 22(3) of Delhi Medical Council Act, 1997; your name under Registration number " + Regd_ID + "-" + Regd_Type + "  has been removed from the State ";
                        message3 += "Medical Register of Delhi Medical Council.";

                        message3 += "Please note that if you wish to have your name re-entered in the State Medical Register of Delhi Medical Council, you may do so, by paying fees as detailed herein below,";
                        message3 += "in addition to fee for renewal of registration (Rs. 2000/-)";

                        message3 += "Late fees for non-renewal of registration:-";
                        message3 += "(a) upto six months from the date from 		Rs. 1000/- (Rupees One Thousand only)";
                        message3 += "    which registration is due for renewal";
                        message3 += "(b) for period more than six months 	    Rs. 2000/- (Rupees One Thousand only)";
                        message3 += "     but upto one year";
                        message3 += "(c) for period more than one year 			Rs. 1000/- (Rupees One Thousand per year and Part thereof)";

                        message3 += "Please also note that any person servicing or practicing modern scientific system of medicine (allopathy) in Delhi without holding valid registration with Delhi Medical Council is liable for action under the provisions of Delhi Medical Council Act, 1997.";
                        message3 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting www.delhimedicalcouncil.org and apply under Online Renewal & Services.";

                        message3 += "<b>Kindly ignore this letter, in case you have already applied for renewal of registration</b>";

                        message3 += "This is a system generated email and we request you not to reply to this email.";

                        message3 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message3 += "Warm Regards,";

                        message3 += "Delhi Medical Council.";
                        message3 += "Ground Floor, B Wing, B Block-1";
                        message3 += "DMCR IT Park, Shastri Park";
                        message3 += "New Delhi-110053";
                        message3 += "Tel: +91-011-46621000";
                        message3 += "Website - www.delhimedicalcouncil.org,";

                        string headers = "From: DMC Registration System <registration@delhimedicalcouncil.org>' . '\r\n'"; // Set from headers

                        string message = "";
                        string subject = "";
                        string trigger = "";
                        string msgtxt = "";
                        if (Convert.ToDateTime(Expiry_Date) > Convert.ToDateTime(tdydate))
                        {
                            message = message1;
                            subject = subject1;
                            trigger = "Renewal_due_reminder";
                            msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Renewal of your DMC Regd No " + Regd_ID + " - " + Regd_Type + " is due. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }

                        }
                        else if (Convert.ToDateTime(Expiry_Date) == Convert.ToDateTime(tdydate))
                        {
                            message = message2;
                            subject = subject2;
                            trigger = "Renewal_expired_tdy";
                            // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Registration of DMC Regd No " + Regd_ID + " - " + Regd_Type + " expired today. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }
                        }
                        //else if (Convert.ToDateTime(Expiry_Date) < Convert.ToDateTime(tdydate))
                        //{
                        //    message = message2;
                        //    subject = subject2;
                        //    trigger = "Renewal_expired_fifty";
                        //   // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Your  ID " + Regd_ID + " - " + Regd_Type + " has been removed from the State Medical Register of DMC . Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                        //    if (!string.IsNullOrEmpty(to))
                        //    {
                        //       // MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //    if (!string.IsNullOrEmpty(Mobile))
                        //    {
                        //       // MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(to))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(Mobile))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}

                    }
                }

            }
            else
            {
                msg = "Key not match";
                string path = "C:\\TestService\\ServiceLog.txt";
                using (StreamWriter writer = new StreamWriter(path, true))
                {
                    writer.WriteLine(string.Format(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt"), DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt")));
                    writer.Close();
                }
            }
        }
        catch
        {

        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult certverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["cert"];
            string Regd_type = "";
            string regd_id = "";

            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["cert"]);
            var splitedString = decodedstr.Split('-');
            Regd_type = splitedString[0];
            regd_id = splitedString[1];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            switch (Regd_type)
            {
                case "RRE":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "FRS":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "PROV":
                    db = "pisl_prov_registration_mst";
                    qual_db = "pisl_prov_regi_qual_mst";
                    break;

                default:
                    Message = "This certificate cannnot be verified";
                    break;

            }

            var check_namechange = dal.GetList("tbl_NameChangeHistory_New", "CaseID,Name=(case when (New_MiddleName is null or  New_MiddleName='') then New_FirstName+' '+New_LastName when (New_MiddleName is null or  New_MiddleName='') and (New_LastName is null or New_LastName='') then New_FirstName else New_FirstName+' '+New_MiddleName+' '+New_LastName end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_namechange.Rows.Count > 0)
            {
                string CaseID = check_namechange.Rows[0]["CaseID"].ToString();
                ViewBag.Name = check_namechange.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                if (check_Doctordata.Rows.Count > 0)
                {
                    string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
                    ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                    DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                    DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                    DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                    ViewBag.qual = dt_qual;
                    ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                    ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                    Message = "success";
                }
                else
                {
                    Message = "This Entry Cannot be Verified";
                }
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;

        return View();
    }
    public ActionResult VeryfyCertificate(string value)
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        var qstring = value;
        var decodedStr = MRPLookup.Decrypt1(qstring);
        var splitedString = decodedStr.Split('-');
        var Regd_type = splitedString[0];
        var regd_id = splitedString[1];
        var db = "";
        var qual_db = "";
        //string regdtype=
        switch (Regd_type)
        {
            case "RRE":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "FRS":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "PROV":
                db = "pisl_prov_registration_mst";
                qual_db = "pisl_prov_regi_qual_mst";
                break;

            default:
                Message = "This certificate cannnot be verified";
                break;

        }
        var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
        if (check_Doctordata.Rows.Count > 0)
        {
            string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
            DataTable dt_Documents = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
            DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign' ");

        }
        else
        {
            Message = "This Entry Cannot be Verified";
        }
        return Json("", JsonRequestBehavior.AllowGet);
    }
    public ActionResult letterverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["letter"];
            string Regd_type = "";
            string regd_id = "";
            string ID = "";
            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["letter"]);
            var splitedString = decodedstr.Split('-');
            ID = splitedString[0];
            Regd_type = splitedString[1];
            regd_id = splitedString[2];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            //switch ()
            //{
            //    case "RRE":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "FRS":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "PROV":
            //        db = "pisl_prov_registration_mst";
            //        qual_db = "pisl_prov_regi_qual_mst";
            //        break;

            //    default:
            //        Message = "This certificate cannnot be verified";
            //        break;

            //}
            var letter_type = "";
            var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,date_approved,drg_from,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "ID='" + ID + "' and Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_Doctordata.Rows.Count > 0)
            {
                switch (check_Doctordata.Rows[0]["drg_from"].ToString())
                {
                    case "noc":
                        letter_type = "No Objection Certificate";
                        break;

                    case "gdst":
                        letter_type = "Good Standing Certificate";
                        break;
                }
                ViewBag.lettertype = letter_type;
                ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("pisl_fresh_regi_qual_mst", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='Sign'");
                if (!string.IsNullOrEmpty(check_Doctordata.Rows[0]["date_approved"].ToString()))
                {
                    ViewBag.DateApproved = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).ToString("dd MMMM,yyyy");
                    ViewBag.expiry = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).AddDays(-1).AddMonths(6).ToString("dd MMMM, yyyy");
                }
                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(ID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                Message = "This Entry Cannot be Verified";
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;
        return View();
    }
    public ActionResult Regi_search()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public ActionResult search_ur_dr()
    {

        return View();
    }
    public ActionResult regi_search_submit(string Regid, string Types)
    {
        try
        {


            string regid = Request.QueryString["Regd_ID"];
            string type = Request.QueryString["Type"]; ;
            //string type = frm["type"].Trim();
            //string regid = frm["regid"].Trim();
            string colname = "*";
            string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "' ORDER BY S_No DESC";
            DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
            if (dt.Rows.Count > 0)
            {
                DateTime ddob = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                DateTime dapproved = Convert.ToDateTime(dt.Rows[0]["date_approved"].ToString());
                DateTime dexpiry = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                ViewBag.dateapproved = dapproved.ToShortDateString();
                ViewBag.expirydate = dexpiry.ToShortDateString();
                ViewBag.dob = ddob.ToShortDateString();
                ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


                DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
                if (result_remarks.Rows.Count > 0)
                {
                    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    {
                        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    }
                }
                DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
                if (qualificationdt.Rows.Count > 0)
                {
                    ViewBag.qualdata = qualificationdt;
                }

            }
            return View();
        }
        catch (Exception ex)
        {
            return View();
        }
    }
    public ActionResult regi_search_submits(FormCollection frm)
    {

        string clientCaptcha = frm["CL_CAPCHA"].ToString();
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;

            return Json("-1");
        }
        string msg = "";
        //string type = Regd_ID;
        //string regid = Type;
        string type = frm["type"].Trim();
        string regid = frm["regid"].Trim();
        string colname = "*";
        string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
        if (dt.Rows.Count > 0)
        {
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
            if (result_remarks.Rows.Count > 0)
            {
                for (int i = 0; i < result_remarks.Rows.Count; i++)
                {
                    ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                }
            }
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult search_ur_dr_submit(FormCollection frm)
    {
        try
        {



            string First_Name = Request.QueryString["First_Name"];
            string Last_Name = frm["Last_Name"];
            string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
            string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
            string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
            string Mobile = Request.QueryString["Mobile"];
            string Email = Request.QueryString["Email"];

            if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Last_Name) && !string.IsNullOrEmpty(Corr_Add_Line_1) && !string.IsNullOrEmpty(Corr_Add_Line_2) && !string.IsNullOrEmpty(Corr_Add_Pincode) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Mobile='" + Mobile + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}

                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "Email='" + Email + "' and Mobile='" + Mobile + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }


            return View();
        }
        catch (Exception ex)
        {
            return View();

        }
    }


    public ActionResult search_ur_dr_submit2(FormCollection frm)
    {
        string msg = "";
        string First_Name = frm["First_Name"];
        string Last_Name = frm["Last_Name"];
        string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
        string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
        string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
        string Mobile = frm["Mobile"];
        string Email = frm["Email"];

        string condtions = "First_Name='" + First_Name.Trim() + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
        if (dt.Rows.Count > 0)
        {
            //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
            //if (result_remarks.Rows.Count > 0)
            //{
            //    for (int i = 0; i < result_remarks.Rows.Count; i++)
            //    {
            //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
            //    }
            //}
            string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", condtions2);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        else
        {
            msg = "Not Data Found";
        }


        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult cme()
    {
        return View();
    }
    public ActionResult status_comp2021()
    {
        return View();
    }

    public ActionResult ForgetEmailPasswordProv()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public dynamic getForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB)
    {
        //select pu.First_Name,pu.Last_Name,pu.email,pu.Mobile from pisl_users as pu inner join pisl_prov_regi_qual_mst as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type where pu.Regd_ID = 18430 and pu.DOB = '1991-10-26' and pfq.passing_date = 2016 and pfq.quali_course = 'M.B.B.S.'
        List<dynamic> OBJ = new List<dynamic>();
        string dob = lk.convertdate1(txt_DOB);
        try
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else {
                db = "pisl_fresh_regi_qual_mst";
            }

            DataTable dt1 = dal.GetList("pisl_users as pu inner join "+db+" as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType.ToUpper() + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                OBJ.Add(MRPLookup.Convert_DatatableToList(dt1).ToList());
                return Json(OBJ, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        catch (Exception)
        {

            return null;
        }
        
    }

    public string otpForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail)
    {
        string message = string.Empty;
        string dob = lk.convertdate1(txt_DOB);
        string db = "";
        if (txtRegType.ToUpper() == "PROV")
        {
            db = "pisl_prov_regi_qual_mst";
        }
        else
        {
            db = "pisl_fresh_regi_qual_mst";
        }
        DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
        if (dt1.Rows.Count > 0)
        {
            MailFormat mf = new MailFormat();
            string code = MRPLookup.RandamStringGenerator1();
            Session["provotp"] = code;
            string mailBody = "Your OTP is: " + code + ". DMC";
            string sendmailStatus= MRPLookup.sendMail(txtEmail.Trim(), "DMC | OTP Verification", mailBody, "", "");


            //string mailBody = mf.SendCodeOnMail(dt1.Rows[0]["First_Name"].ToString(), code);
            //string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(),"Reset Password Code" + System.DateTime.Now + "", mailBody, "", "");
            if (sendmailStatus != "Technical issue! Please try agiain")
            {
                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

            }
            else
            {
                message = sendmailStatus;
            }


            return message;
        }
        return "Some thing went wrong...!";
    }

    public string submitForgetEmailPasswordProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail, string txtMobileNo,string CaptchaCaseID,string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (Session["provotp"].ToString()!=txtCode)
        {
            return "Otp incorrect";
        }

        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact Captcha as written below.";
            // return message;
        }
        else
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else
            {
                db = "pisl_fresh_regi_qual_mst";
            }
            string dob = lk.convertdate1(txt_DOB);
            DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile,pu.Regd_ID,pu.Regd_Type", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                if (Convert.ToString(dt1.Rows[0]["Regd_ID"]) != "" && Convert.ToString(dt1.Rows[0]["Regd_Type"]) != "")
                {
                      string colValue = "Email='" + txtEmail.Trim() + "',Mobile='" + txtMobileNo.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                      updPassword = dal.Updation("pisl_users", colValue, "Regd_ID='"+dt1.Rows[0]["Regd_ID"].ToString()+ "' and Regd_Type='"+ dt1.Rows[0]["Regd_Type"].ToString() + "'");
               
                   
                     var tblCurrentStatuscolomns = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                     var Currentupdatestatuss = dal.Updation("pisl_temp_registrations", tblCurrentStatuscolomns, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");

                    var tblCurrentStatuscolomns1 = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                    var Currentupdatestatuss1 = dal.Updation("pisl_fresh_registration_mst", tblCurrentStatuscolomns1, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");



                    message = "Your Email and Mobile Changed successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                    //MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                   // Send SMS and mail for password reset.
                }
                else
                {
                    message = "Please try after some time";
                }
            }
            else
            {
                message = "Data Not found..!";
            }
        }
        return message;
    }
    public string sendOTP(string EmailId)
    {
        string message = "";
        string cond = "email='" + EmailId + "'";
        DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
        if (dtLogin.Rows.Count > 0)
        {
            string mobile = dtLogin.Rows[0]["Mobile"].ToString();
            Session["otp"] = GetRandomText();
            string OTP = Session["otp"].ToString();
            //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
            string mailBody = "Your OTP is: " + OTP + ". DMC";
            MRPLookup.sendMail(EmailId.Trim(), "DMC | OTP Verification", mailBody, "", "");
            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
            MRPLookup.SendSMS("otp", mobile.Trim(), "", "", OTP, "", "", "", "", "", "", "");
            message = "Please check your email or Mobile for OTP";
        }
        else
        {
            message = "Email not found, Please enter a valid email";
        }
        return message;
    }

    public ActionResult ChangePassward(FormCollection frm)
    {
        string Result = "";
        if (frm["txtOTP"].ToString() == Session["OTP"].ToString())
        {
            if (frm["txt_password"].Length >= 8 && frm["txt_password"].Length <= 18)
            {
                Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                Boolean foundMatch = regexObj.IsMatch(frm["txt_password"]);
                if (foundMatch == true)
                {
                    string where = "email='" + frm["txt_email"] + "'";// and Mobile='"+ frm["txt_contactno"] + "'";
                    DataTable dt_dr_details = dal.GetList("pisl_users", "*", where);
                    if (dt_dr_details != null)
                    {
                        if (dt_dr_details.Rows.Count > 0)
                        {
                            string pass = Encrypt(frm["txt_password"].Trim());
                            string col = " password='" + pass + "'";
                            var update = dal.Updation("pisl_users", col, "email='" + dt_dr_details.Rows[0]["email"].ToString() + "'");
                            if (update == 0)
                            {
                                string hostName = Dns.GetHostName();
                                string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                string colName = "activity,email,password,ip,system,description,date";
                                string colValue = "'Change Passs','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + frm["txt_password"].ToString().Trim() + "','" + IP + "','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + pass + "',getdate()";
                                int ins = dal.insertion("tbl_activity", colName, colValue);
                                string message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                MRPLookup.SendSMS("forgot_pwd", dt_dr_details.Rows[0]["Mobile"].ToString(), dt_dr_details.Rows[0]["First_Name"].ToString(), dt_dr_details.Rows[0]["Last_Name"].ToString(), "", "", dt_dr_details.Rows[0]["email"].ToString(), frm["txt_password"].ToString().Trim(), "", "", "", "");
                                Result = "0";
                            }
                            else
                            {
                                Result = "Somthing wrong Error !";
                            }
                        }
                        else
                        {
                            Result = "This is not registered email please check.";
                        }
                    }
                }
                else
                {
                    Result = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                }
            }
            else
            {
                Result = "Password Length must between 8 to 18 letters";
            }
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
    public ActionResult verifyOTP(string otp)
    {
        string Result = "";
        if (otp == Session["otp"].ToString())
        {
            Result = "DONE";
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
}
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using DelhimedicalcouncilORG;
using System.Data;
using System.Security.Cryptography;
using System.Text;
using System.IO;
using System.Drawing;
using System.Net;
using System.Net.Mail;

using System.Text.RegularExpressions;
using System.Data.SqlClient;
using System.Configuration;

namespace DelhimedicalcouncilORG.Controllers
{
public class homeController : Controller
{
    // GET: home
    DAL dal = new DAL();
    MRPLookup lk = new MRPLookup();
    MailFormat mf = new MailFormat();


    private string RetrieveContent(string webPage)
    {
        HttpWebResponse response = null;//used to get response
        StreamReader respStream = null;//used to read response into string
        try
        {
            //create a request object using the url passed in
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(webPage);
            request.Timeout = 10000;

            //go get a response from the page
            response = (HttpWebResponse)request.GetResponse();

            //create a streamreader object from the response
            respStream = new StreamReader(response.GetResponseStream());

            //get the contents of the page as a string and return it
            return respStream.ReadToEnd();
        }
        catch (Exception ex)//houston we have a problem!
        {
            throw ex;
        }
        finally
        {
            //close it down, we’re going home!
            response.Close();
            respStream.Close();
        }
    }

    //using a regular expression, find all of the href or urls
    //in the content of the page
    private void GetAllUrls(string content)
    {
        //regular expression
        string pattern = @"(?:href\s*=)(?:[\s""']*)(?.*?)(?:[\s>""'])";

        //Set up regex object
        Regex RegExpr = new Regex(pattern, RegexOptions.IgnoreCase);

        //get the first match
        Match match = RegExpr.Match(content);

        //loop through matches
        while (match.Success)
        {

            //output the match info
            Console.WriteLine("href match: " + match.Groups[0].Value);
            //WriteToLog(@"C:\matchlog.txt", "href match: " + match.Groups[0].Value + "\r\n");

            Console.WriteLine("Url match: " + match.Groups[1].Value);
            //WriteToLog(@"C:\matchlog.txt", "Url | Location | mailto match: " + match.Groups[1].Value + "\r\n");

            //get next match
            match = match.NextMatch();
        }
    }

    //Write to a log file
    //private void WriteToLog(string file, string message)
    //{
    //using (StreamWriter w = File.AppendText(file))
    //{
    //w.WriteLine(DateTime.Now.ToString() + ": " + message); w.Close();
    //}
    //}




    /// <summary>
    /// ////////////////////////
    /// </summary>
    /// <returns></returns>
    /// 

    public ActionResult Index()
    {




        return View();
    }
    //Start Login//
    public ActionResult login()
    {
        // Session["CAPTCHA"] = "111111";// GetRandomText();
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }

    
    public string Login_Form(string EmailId, string password, string ip, string captcha)
    
    {



        var dateTime = DateTime.Now;
        var tt = dateTime.Hour;


        var dayOfWeek = dateTime.DayOfWeek;
        var day = dayOfWeek.ToString();

        //Decrypt("","");
        //70789
        //554e981f4946f37a4818f1cea3928fe3
        //drtushargupta90@gmail.com
        string message = string.Empty;
        string clientCaptcha = captcha;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            ViewBag.CaptchaError = "Sorry, please write exact text as written above.";
            message = "11,11";
            return message;
        }
        else
            if (Session["checkSession"] == null)
        {
            ip = Request.ServerVariables["REMOTE_ADDR"].ToString();

            string pass = Encrypt(password);
            // string decoded = MRPLookup.Decrypt1(HttpUtility.UrlDecode(pass));
            string cond = "email='" + EmailId + "' and password='" + pass + "' and active!=3 ";//and active=1
            DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
            if (dtLogin.Rows.Count > 0)
            {
                if (Convert.ToString(dtLogin.Rows[0]["Regd_Type"]) == "PROV" && dtLogin.Rows.Count == 1)
                {
                    DataTable dt_temp_D = dal.GetList("pisl_temp_registrations", "Regd_ID,Regd_Type,Final_Status,Approved_By,date_approved,type", "email='" + EmailId.Trim() + "' order by ID desc");
                    for (int i = 0; i < dt_temp_D.Rows.Count; i++)
                    {
                        if (Convert.ToString(dt_temp_D.Rows[i]["Regd_Type"]) != "PROV" && Convert.ToString(dt_temp_D.Rows[i]["Final_Status"]) == "Approved" && Convert.ToString(dt_temp_D.Rows[i]["Approved_By"]) != null && Convert.ToString(dt_temp_D.Rows[i]["date_approved"]) != null && Convert.ToString(dt_temp_D.Rows[i]["type"]) != "service")
                        {



                            string colnameWithValue = "Regd_ID=" + Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]) + ",Regd_Type='" + dt_temp_D.Rows[i]["Regd_Type"].ToString() + "'";
                            string conditions = "S_No=" + Convert.ToInt32(dtLogin.Rows[0]["S_No"]) + "";
                            var Update_paymentUpdate = dal.Updation("pisl_users", colnameWithValue, conditions);
                            if (Update_paymentUpdate == 0)
                            {
                                dtLogin.Rows[0]["Regd_ID"] = Convert.ToInt32(dt_temp_D.Rows[i]["Regd_ID"]);
                                dtLogin.Rows[0]["Regd_Type"] = dt_temp_D.Rows[i]["Regd_Type"].ToString();

                            }
                            break;
                        }
                    }
                }


                for (int i = 0; i < dtLogin.Rows.Count; i++)
                {
                    string hash = Convert.ToString(dtLogin.Rows[i]["hash"]);
                    string decryptedstring = Decrypt(pass, hash);

                    string gid = Convert.ToString(dtLogin.Rows[i]["GID"]);
                    //string active = Convert.ToString(dtLogin.Rows[0]["active"]);
                    if (gid == "0")//Login for doctor
                    {
                        //DataTable dt_lastloginRecord = dal.GetList("pisl_users where email='" + EmailId + "' order by S_No desc", "TOP 1 *", "");
                        if (dtLogin != null && dtLogin.Rows.Count > 0)
                        {

                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[i]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[i]["Regd_Type"]);
                            }
                            else
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                            }
                            if (dtLogin.Rows[i]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[i]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }

                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                        }
                        else
                        {
                            System.Web.HttpContext.Current.Session["usno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                            System.Web.HttpContext.Current.Session["email"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                            //System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                            //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            System.Web.HttpContext.Current.Session["uname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                            if (!string.IsNullOrEmpty(dtLogin.Rows[0]["Regd_Type"].ToString()))
                            {
                                System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dtLogin.Rows[0]["Regd_Type"]);
                            }
                            if (dtLogin.Rows[0]["Regd_ID"].ToString() != "0")
                            {
                                System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dtLogin.Rows[0]["Regd_ID"]);
                                //System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_lastloginRecord.Rows[0]["Regd_Type"]);
                            }
                            else
                            {
                                DataTable dt_tempDetails = dal.GetList("pisl_temp_registrations",
                                    "top 1 Regd_ID,Regd_Type",
                                    "email='" + EmailId.Trim() + "' order by ID desc");
                                if (dt_tempDetails != null && dt_tempDetails.Rows.Count > 0)
                                {
                                    if (string.IsNullOrEmpty(Session["Regd_Type"].ToString()))
                                    {
                                        System.Web.HttpContext.Current.Session["Regd_Type"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_Type"]);
                                    }
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = Convert.ToString(dt_tempDetails.Rows[0]["Regd_ID"]);
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["Regd_ID"] = "0";
                                    //System.Web.HttpContext.Current.Session["Regd_Type"] = "";
                                }
                            }
                        }


                        message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 2;
                    }
                    else if (gid == "1")//Login for internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["isno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 1;
                            }
                            else
                            {
                                message = "0,6";
                            }
                        }

                        else
                        {
                            message = "0,5";
                        }
                    }
                    else if (gid == "2")//Login for admin and internal
                    {
                        if (tt > 8 && tt < 18)
                        {
                            if (day == "Monday" || day == "Tuesday" || day == "Wednesday" || day == "Thursday" || day == "Friday")
                            {
                                System.Web.HttpContext.Current.Session["iemail"] = Convert.ToString(dtLogin.Rows[0]["email"]);
                                System.Web.HttpContext.Current.Session["asno"] = Convert.ToString(dtLogin.Rows[0]["S_No"]);
                                System.Web.HttpContext.Current.Session["iname"] = Convert.ToString(dtLogin.Rows[0]["First_Name"]) + " " + Convert.ToString(dtLogin.Rows[0]["Last_Name"]);
                                // return RedirectToAction("Index", "internal");
                                Session["otp"] = GetRandomText();
                                string OTP = Session["otp"].ToString();
                                string mailBody = "Your OTP is: " + OTP + ". DMC";
                                MRPLookup.sendMail(dtLogin.Rows[0]["email"].ToString(), "DMC | OTP Verification", mailBody, "", "");
                                MRPLookup.SendSMS("otp", dtLogin.Rows[0]["Mobile"].ToString(), "", "", OTP, "", "", "", "", "", "", "");
                                message = Convert.ToString(dtLogin.Rows[0]["S_No"]) + "," + 3;
                            }
                            else
                            {
                                message = "0,6";
                            }

                        }
                        else
                        {
                            message = "0,5";
                        }
                    }
                }
            }
            else
            {
                message = "0,0";
            }
        }
        else
        {
            message = "10,10";
        }
        return message;
    }

    public string Encrypt(string password)
    {
        // Decrypt("", "");
        //string password = @"1234abcd";

        // byte array representation of that string
        byte[] encodedPassword = new UTF8Encoding().GetBytes(password);

        // need MD5 to calculate the hash
        byte[] hash = ((HashAlgorithm)CryptoConfig.CreateFromName("MD5")).ComputeHash(encodedPassword);

        // string representation (similar to UNIX format)
        string encoded = BitConverter.ToString(hash)
           // without dashes
           .Replace("-", string.Empty)
           // make lowercase
           .ToLower();
        return encoded;
    }
    public string Decrypt(string password, string hash1)
    {//https://md5decrypt.net/#answer
        string ss = "";
        string source = "zdNot3oAz5I%3DjRspJg78a%2FY%3D";// "Hello World!";
        MD5 md5 = System.Security.Cryptography.MD5.Create();
        byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(password);
        byte[] hash = md5.ComputeHash(inputBytes);

        // step 2, convert byte array to hex string
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < hash.Length; i++)
        {
            sb.Append(hash[i].ToString("X2"));
        }
        return sb.ToString();
    }
    static string GetMd5Hash(MD5 md5Hash, string input)
    {

        // Convert the input string to a byte array and compute the hash.
        byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));

        // Create a new Stringbuilder to collect the bytes
        // and create a string.
        StringBuilder sBuilder = new StringBuilder();

        // Loop through each byte of the hashed data 
        // and format each one as a hexadecimal string.
        for (int i = 0; i < data.Length; i++)
        {
            sBuilder.Append(data[i].ToString("x2"));
        }

        // Return the hexadecimal string.
        return sBuilder.ToString();
    }
    public FileResult GetCaptchaImage()
    {
        MemoryStream ms = new MemoryStream();
        if (Session["CAPTCHA"] != null)
        {
            string text = Session["CAPTCHA"].ToString();

            //first, create a dummy bitmap just to get a graphics object
            Image img = new Bitmap(1, 1);
            Graphics drawing = Graphics.FromImage(img);

            Font font = new Font("Jokerman", 15);
            //measure the string to see how big the image needs to be
            SizeF textSize = drawing.MeasureString(text, font);

            //free up the dummy image and old graphics object
            img.Dispose();
            drawing.Dispose();

            //create a new image of the right size
            img = new Bitmap((int)textSize.Width + 40, (int)textSize.Height + 20);
            drawing = Graphics.FromImage(img);

            Color backColor = Color.SeaShell;
            Color textColor = Color.Red;
            //paint the background
            drawing.Clear(backColor);

            //create a brush for the text
            Brush textBrush = new SolidBrush(textColor);

            drawing.DrawString(text, font, textBrush, 20, 10);

            drawing.Save();

            font.Dispose();
            textBrush.Dispose();
            drawing.Dispose();


            img.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
            img.Dispose();

            return File(ms.ToArray(), "image/png");
        }
        else
        {
            return File(ms.ToArray(), "image/png");
        }
    }
    private string GetRandomText()
    {
        StringBuilder randomText = new StringBuilder();
        string alphabets = "12345679ABCEFGHKLMNPRSTUVWXZ";
        Random r = new Random();
        for (int j = 0; j <= 5; j++)
        {
            randomText.Append(alphabets[r.Next(alphabets.Length)]);
        }
        return randomText.ToString();
    }
    //End Login//
    public ActionResult signup()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    [HttpPost]
    public string sendotpsignup(string txt_Email, string txt_ContactNo)
    {
        string msg = "";
        try
        {
            var CheckEmail = IsEmailandMobileExists(txt_Email, "");
            var checkMobile = IsEmailandMobileExists("", txt_ContactNo);
            if (CheckEmail == false && checkMobile == false)
            {

                Session["otp"] = GetRandomText();
                string OTP = Session["otp"].ToString();
                //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
                string mailBody = "Your OTP is: " + OTP + ". DMC";
                MRPLookup.sendMail(txt_Email.Trim(), "DMC | OTP Verification", mailBody, "", "");

                //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
              

                MRPLookup.SendSMS("otp", txt_ContactNo.Trim(), "", "", OTP, "", "", "", "", "", "", "");
                msg = "0";
            }
            else if (CheckEmail == true && checkMobile == true)
            {
                msg = "Email and Mobile no. are already exists!!";
            }
            else
            {
                if (checkMobile == true && CheckEmail == false)
                {
                    msg = "Mobile No. is Already Exists!!";
                }
                else if (CheckEmail == true && checkMobile == false)
                {
                    msg = "Email Address is Already Exists!!";
                }


            }
        }
        catch (Exception ex)
        {
            msg = "1";
        }
        return msg;
    }
    public bool IsEmailandMobileExists(string email, string mobile)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        try
        {
            tableName = "pisl_users";
            colname = "*";
            if (!string.IsNullOrEmpty(email))
            {
                cond = "email='" + email + "'";
            }
            if (!string.IsNullOrEmpty(mobile))
            {
                cond = "mobile='" + mobile + "'";
            }
            //cond=
            DataTable dt_datacheck = dal.GetList(tableName, colname, cond);
            if (dt_datacheck != null && dt_datacheck.Rows.Count > 0)
            {
                IsExists = true;
            }

        }
        catch (Exception ex)
        {
            IsExists = false;
            throw;
        }
        return IsExists;
    }

    public ActionResult IsDocDataExists(string regd_type, string regd_no, string DOB, string PassingYear)
    {
        //List<dynamic> list = new List<dynamic>();
        string message = "";
        try
        {
            var tbl_name = "";

            var userExists = IsRegd_Exists(regd_type, regd_no, DOB, PassingYear, out tbl_name);
            if (userExists == true && tbl_name == "pisl_users")
            {

                message = "Already Registered With us. Please Login With Your Credential";
            }
            else
                if (userExists == true && tbl_name == "pisl_fresh_registration_mst")
            {
                message = "Your Registration No. is Expired. Please SignUp Again.";
            }
            else
            {
                message = "NotExists";
                //message = "Your Registration No. is Not Exists!";
            }
        }
        catch (Exception ex)
        {

        }
        return Json(message, JsonRequestBehavior.AllowGet);
    }
    public bool IsRegd_Exists(string regd_type, string regd_no, string DOB, string PassingYear, out string Tbl_Name)
    {
        bool IsExists = false;
        string tableName = "";
        string colname = "";
        string cond = "";
        Tbl_Name = "";
        DataTable dt_UserCheck = null;
        try
        {
            tableName = "pisl_users";
            colname = "*";
            cond = "Regd_Type='" + regd_type + "' and Regd_ID='" + regd_no.Trim() + "'";
            dt_UserCheck = dal.GetList(tableName, colname, cond);
            if (dt_UserCheck == null || dt_UserCheck.Rows.Count == 0)
            {
                tableName = "pisl_fresh_regi_qual_mst";
                colname = "*";
                cond = "quali_type='Basic Qualification' AND Regd_ID='" + regd_no + "' "
                    + "AND Regd_Type='" + regd_type + "' AND passing_date =  '" + PassingYear.Trim() + "'";
                dt_UserCheck = dal.GetList(tableName, colname, cond);
                if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                {
                    Tbl_Name = "pisl_fresh_regi_qual_mst";

                    tableName = "pisl_fresh_registration_mst";
                    colname = "*";
                    cond = "Regd_ID='" + regd_no + "' AND Regd_Type='" + regd_type + "'";
                    dt_UserCheck = dal.GetList(tableName, colname, cond);
                    if (dt_UserCheck != null && dt_UserCheck.Rows.Count > 0)
                    {
                        Tbl_Name = "pisl_fresh_registration_mst";
                        IsExists = true;
                    }
                    else
                    {
                        IsExists = false;
                    }
                }
                else
                {

                    IsExists = false;
                }
            }
            else
            {
                Tbl_Name = "pisl_users";
                IsExists = true;
            }
        }
        catch (Exception ex)
        {


            throw;
        }
        return IsExists;
    }

    [HttpPost]
    public string createsignup(string txt_Email, string txt_ContactNo, string txt_FirstName, string txt_MiddleName,
        string txt_LastName, string txt_Password, string txt_ConfirmPassword, string txt_DOB, bool chk_TermCondition,
        string Captcha, string Regd_ID, string txtOTP, string ddl_regType, string txt_oldData, string passingYear)
    {
        string message = "";
        string dob = lk.convertdate1(txt_DOB);
        string Tbl_Name = "";
        try
        {
            if (!IsEmailandMobileExists(txt_Email, ""))
            {
                if (!IsEmailandMobileExists("", txt_ContactNo))
                {
                    if (ddl_regType == "FRS" || ddl_regType == "RRE")
                    {
                        if (IsRegd_Exists(ddl_regType, Regd_ID, dob, passingYear, out Tbl_Name))
                        {
                            Tbl_Name = Tbl_Name;
                            if (Tbl_Name == "pisl_users")
                            {
                                //if Pisl_user Table Record Exists but no Email and Mobile No exists
                                //in this case update the Email and Mobile No.
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        DataTable dt_Email_Mobile_Check = dal.GetList("pisl_users",
                                                        "top 1*", " Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                        if (dt_Email_Mobile_Check != null)
                                                        {
                                                            if (dt_Email_Mobile_Check.Rows.Count > 0)
                                                            {
                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_Email_Mobile_Check.Rows[0]["email"])))
                                                                {
                                                                    string pass = Encrypt(txt_Password.Trim());
                                                                    string hash = Encrypt(MRPLookup.RandamStringGenerator1());
                                                                    var updateDt = dal.Updation("pisl_users",
                                                                        "email='" + txt_Email.Trim() + "',mobile='" + txt_ContactNo.Trim() + "',password='" + pass + "',hash='" + hash + "'",
                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                    if (updateDt == 0)
                                                                    {
                                                                        DataTable dt_fresh_Check = dal.GetList("pisl_fresh_registration_mst",
                                                                            "top 1 * ",
                                                                            "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");
                                                                        if (dt_fresh_Check != null)
                                                                        {
                                                                            if (dt_fresh_Check.Rows.Count > 0)
                                                                            {
                                                                                if (string.IsNullOrEmpty(Convert.ToString(dt_fresh_Check.Rows[0]["Email"])))
                                                                                {
                                                                                    var updateDt_fresh = dal.Updation("pisl_fresh_registration_mst",
                                                                                        "Email='" + txt_Email.Trim() + "',Mobile='" + txt_ContactNo.Trim() + "'",
                                                                                        "Regd_ID='" + Regd_ID + "' and Regd_Type='" + ddl_regType + "'");

                                                                                    if (updateDt_fresh != 0)
                                                                                    {
                                                                                        message = "Error!!";
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                                        MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                                        message = "Please, Check Your Mail For Login Details";
                                                                        //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                                        MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                                    }
                                                                    else
                                                                    {
                                                                        message = "Error!!";
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    message = "Your record are already Exists with us!!";
                                                                }
                                                            }
                                                        } //End Updation
                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }
                            else if (Tbl_Name == "pisl_fresh_regi_qual_mst" || Tbl_Name == "pisl_fresh_registration_mst")
                            {
                                //Insert Login Record in Pisl_Users
                                if (chk_TermCondition == true)
                                {
                                    if (txtOTP == Session["otp"].ToString())
                                    {
                                        if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                        {
                                            Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                            Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                            if (foundMatch == true)
                                            {
                                                if (txt_Password == txt_ConfirmPassword)
                                                {
                                                    if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                                    {
                                                        string pass = Encrypt(txt_Password.Trim());
                                                        string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                        if (string.IsNullOrEmpty(Regd_ID))
                                                        {
                                                            Regd_ID = "0";
                                                        }
                                                        //if (txt_oldData != "")
                                                        //{
                                                        //    string colnamemst = "*";
                                                        //    string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        //    DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        //    if (dtrmst.Rows.Count > 0)
                                                        //    {
                                                        //        string oldtype = "";
                                                        //        if (ddl_regType == "FRS")
                                                        //        {
                                                        //            oldtype = "service";
                                                        //        }
                                                        //        else if (ddl_regType == "RRE")
                                                        //        {
                                                        //            oldtype = "reregi";
                                                        //        }
                                                        //        var corrAddress1 = dtrmst.Rows[0]["Corr_Add_Line_1"].ToString();
                                                        //        var corrAddress2 = dtrmst.Rows[0]["Corr_Add_Line_2"].ToString();
                                                        //        var perAddress1 = dtrmst.Rows[0]["Per_Add_Line_1"].ToString();
                                                        //        var perAddress2 = dtrmst.Rows[0]["Per_Add_Line_2"].ToString();

                                                        //        string colNameold = "Regd_ID,Regd_Type,type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,date_entered,Father_Name,POB,Gender,Nationality,Corr_Add_Line_1,Corr_Add_Line_2,Corr_Add_State,Corr_Add_Pincode,Corr_Add_Country,Per_Add_Line_1,Per_Add_Line_2,Per_Add_Line_State,Per_Add_Line_Pincode,Per_Add_Line_Country";

                                                        //        string colValueold = "'" + Regd_ID + "','" + ddl_regType + "','" + oldtype + "','" + txt_FirstName + "','" + txt_MiddleName + "','"  + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "', '"+ lk.GetDateTime()+ "' ,'"+ dtrmst.Rows[0]["Father_Name"] + "','" + dtrmst.Rows[0]["POB"] + "','" + dtrmst.Rows[0]["Gender"] + "','" + dtrmst.Rows[0]["Nationality"] + "','" + corrAddress1 + "','" + corrAddress2 + "','" + dtrmst.Rows[0]["Corr_Add_State"] + "','" + dtrmst.Rows[0]["Corr_Add_Pincode"] + "','" + dtrmst.Rows[0]["Corr_Add_Country"] + "','" + perAddress1 + "','" + perAddress2 + "','" + dtrmst.Rows[0]["Per_Add_Line_State"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Pincode"] + "','" + dtrmst.Rows[0]["Per_Add_Line_Country"] + "'";
                                                        //        int insold = dal.insertion("pisl_temp_registrations", colNameold, colValueold);
                                                        //    }
                                                        //}
                                                        Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                        string colnamemst = "*";
                                                        string condmst = "Regd_ID='" + Regd_ID + "' and  Regd_Type='" + ddl_regType + "'";
                                                        DataTable dtrmst = dal.GetList("pisl_fresh_registration_mst", colnamemst, condmst);
                                                        DateTime txtdob1 = Convert.ToDateTime(dtrmst.Rows[0]["DOB"]);
                                                        string txtdob = txtdob1.ToShortDateString();

                                                        string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                            + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                        string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + dtrmst.Rows[0]["First_Name"].ToString() + "','" + dtrmst.Rows[0]["Middle_Name"].ToString() + "',"
                                                            + "'" + dtrmst.Rows[0]["Last_Name"].ToString() + "','" + txtdob + "','" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                            + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                        int ins = dal.insertion("pisl_users", colName, colValue);
                                                        if (ins == 0)
                                                        {
                                                            string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                            MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                            message = "Please, Check Your Mail For Login Details";
                                                            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                            MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                        }
                                                        else
                                                        {
                                                            message = "Try after some time";
                                                        }

                                                    }
                                                    else
                                                    {
                                                        message = "Enter A Valid Email";
                                                    }
                                                }
                                                else
                                                {
                                                    message = "Password and Confrim Password is Not Same";
                                                }
                                            }
                                            else
                                            {
                                                message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password Length must between 8 to 18 letters";
                                        }
                                    }
                                    else
                                    {
                                        message = "Enter the Valid OTP";
                                    }
                                }
                                else
                                {
                                    message = "Please check the Terms and Conditions";
                                }

                            }

                        }
                        else
                        {
                            message = "Your Registration No and Passing Year is Not Exist with Us";
                        }
                    }
                    else
                    {
                        //Insert Login Record in Pisl_Users
                        if (chk_TermCondition == true)
                        {
                            if (txtOTP == Session["otp"].ToString())
                            {
                                if (txt_Password.Length >= 8 && txt_Password.Length <= 18)
                                {
                                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                                    Boolean foundMatch = regexObj.IsMatch(txt_Password);
                                    if (foundMatch == true)
                                    {
                                        if (txt_Password == txt_ConfirmPassword)
                                        {
                                            if (lk.IsValidEmail(txt_Email.Trim()) == true)
                                            {
                                                //if (Tbl_Name== "pisl_users") { }
                                                string pass = Encrypt(txt_Password.Trim());
                                                string hash = Encrypt(MRPLookup.RandamStringGenerator1());

                                                if (string.IsNullOrEmpty(Regd_ID))
                                                {
                                                    Regd_ID = "0";
                                                }
                                                Int32 Regd_ID1 = Convert.ToInt32(Regd_ID);
                                                if (ddl_regType == "-1")
                                                {
                                                    ddl_regType = "";
                                                }


                                                string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                    + "1,0,0,'" + lk.GetDateTime() + "','','" + Regd_ID1 + "'";
                                                int ins = dal.insertion("pisl_users", colName, colValue);
                                                if (ins == 0)
                                                {
                                                    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                    message = "Please, Check Your Mail";
                                                    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                }
                                                else
                                                {
                                                    message = "Try after some time";
                                                }

                                                //string colName = "Case_ID,Regd_ID,Regd_Type,First_Name,Middle_Name,Last_Name,DOB,Mobile,email,"
                                                //    + "password,hash,active,approved,GID,Register_Date,checked,DumpRegd_ID";
                                                //string colValue = "0," + Regd_ID1 + ",'" + ddl_regType + "','" + txt_FirstName + "','" + txt_MiddleName + "',"
                                                //    + "'" + txt_LastName + "'," + dob + ",'" + txt_ContactNo + "','" + txt_Email + "','" + pass + "','" + hash + "',"
                                                //    + "1,0,0,'"+ lk.GetDateTime()+ "','','" + Regd_ID1 + "'";
                                                //int ins = dal.insertion("pisl_users", colName, colValue);
                                                //if (ins == 0)
                                                //{
                                                //    string mailBody = mf.Signup(txt_FirstName, txt_Email, txt_Password.Trim(), hash);
                                                //    MRPLookup.sendMail(txt_Email.Trim(), "DMC | Signup", mailBody, "", "");
                                                //    message = "Please, Check Your Mail";
                                                //    //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
                                                //    MRPLookup.SendSMS("login_details", txt_ContactNo, txt_FirstName, txt_LastName, "", "", txt_Email, txt_Password.Trim(), "", "", "", "");
                                                //}
                                                //else
                                                //{
                                                //    message = "Try after some time";
                                                //}
                                            }
                                            else
                                            {
                                                message = "Enter A Valid Email";
                                            }
                                        }
                                        else
                                        {
                                            message = "Password and Confrim Password is Not Same";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                                    }
                                }
                                else
                                {
                                    message = "Password Length must between 8 to 18 letters";
                                }
                            }
                            else
                            {
                                message = "Enter the Valid OTP";
                            }
                        }
                        else
                        {
                            message = "Please check the Terms and Conditions";
                        }

                        //}
                    }
                }
                else
                {
                    message = "Mobile No. is Already Exists";
                }
            }
            else
            {
                message = "Email Already exists!!";
            }
            //
            //Cut the Code From There

        }
        catch
        {

        }
        return message;
    }

    public ActionResult SignupVerification()
    {
        string message = "";
        try
        {
            if (Request.QueryString["email"] != null && Request.QueryString["hash"] != null)
            {
                string email = Request.QueryString["email"];
                string hash = Request.QueryString["hash"];
                string cond = "Email='" + email.Trim() + "' and Hash='" + hash.Trim() + "' and Active=0";
                DataTable dt = dal.GetList("pisl_users", "*", cond);
                if (dt.Rows.Count > 0)
                {
                    int upd = dal.Updation("pisl_users", "Active=1", cond);
                    if (upd == 0)
                    {
                        message = "Your account has been activated, you can now login";
                    }
                    else
                    {
                        message = "Try after some time";
                    }
                }
                else
                {
                    message = "The url is either invalid or you already have activated your account.";
                }
            }
            else
            {
                message = "Invalid approach, please use the link that has been send to your email.";
            }
        }
        catch
        { }
        ViewBag.lbl_status = message;
        return View();
    }
    public ActionResult contact()
    {
        return View();
    }

    public ActionResult about()
    {
        return View();
    }
    public ActionResult faqs()
    {
        return View();
    }
    // Start forgot password
    public ActionResult forgotpassword()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public string sendCode(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        string message = string.Empty;
        try
        {
            string clientCaptcha = CaptchaCaseID;
            string serverCaptcha = Session["CAPTCHA"].ToString();
            if (!clientCaptcha.Equals(serverCaptcha))
            {
                ViewBag.ShowCAPTCHA = serverCaptcha;
                message = "Sorry, please write exact text as written below.";
            }
            else
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' ";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string name = Convert.ToString(dt.Rows[0]["First_Name"]);
                                        string Mobile = Convert.ToString(dt.Rows[0]["Mobile"]);

                                        MailFormat mf = new MailFormat();
                                        string code = MRPLookup.RandamStringGenerator1();
                                        string mailBody = mf.SendCodeOnMail(name, code);
                                        MRPLookup.SendSMS("otp", Mobile, "", "", code, "", "", "", "", "", "", "");
                                        string colValue = "Code='" + code.Trim() + "'";
                                        int updCode = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "'");
                                        if (updCode == 0)
                                        {
                                            string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(), "Reset Password Code " + System.DateTime.Now + "", mailBody, "", "");
                                            if (sendmailStatus != "Technical issue! Please try agiain")
                                            {
                                                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

                                            }
                                            else
                                            {
                                                message = sendmailStatus;
                                            }
                                        }
                                        else
                                        {
                                            message = "Please try after some time.";
                                        }

                                    }
                                    else
                                    {
                                        message = "Enter a New Password.";
                                    }
                                }
                                else
                                {
                                    message = "Your Email And Mobile Number Do not Match with DMC Registered Users.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
        }
        catch (Exception ex)
        {

        }
        return message;
    }
    public string forgotpasswordCaseID(string txtEmail, string txtPassword, string txtConfirmPassword, string txtMobileNo, string CaptchaCaseID, string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact text as written below.";
            // return message;
        }
        else
        {
            if (txtCode != "0")
            {
                if (txtPassword.Length >= 8 && txtPassword.Length <= 18)
                {
                    Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                    Boolean foundMatch = regexObj.IsMatch(txtPassword);
                    if (foundMatch == true)
                    {
                        if (txtPassword == txtConfirmPassword)
                        {
                            if (lk.IsValidEmail(txtEmail.Trim()) == true)
                            {
                                string condCaseId = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'";
                                DataTable dt = dal.GetList("pisl_users", "*", condCaseId);
                                if (dt.Rows.Count > 0)
                                {
                                    string mobile = Convert.ToString(dt.Rows[0]["Mobile"]);
                                    string firstName = Convert.ToString(dt.Rows[0]["First_Name"]);
                                    string lastName = Convert.ToString(dt.Rows[0]["Last_Name"]);
                                    //string new_password = Encrypt(MRPLookup.RandamStringGenerator1());
                                    string new_PasswordMD5 = Encrypt(txtPassword.Trim());
                                    string condCaseId1 = "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and password='" + new_PasswordMD5.Trim() + "'";
                                    DataTable dt1 = dal.GetList("pisl_users", "*", condCaseId1);
                                    if (dt1.Rows.Count == 0)
                                    {
                                        string colValue = "password='" + new_PasswordMD5.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                                        updPassword = dal.Updation("pisl_users", colValue, "Email='" + txtEmail.Trim() + "' and Mobile='" + txtMobileNo.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                        if (updPassword == 0)
                                        {
                                            updPassword = dal.Updation("pisl_users", "Code='0'", "Email='" + txtEmail.Trim() + "' and Code='" + txtCode.Trim() + "'");
                                            string hostName = Dns.GetHostName();
                                            string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                            string colName = "activity,email,password,ip,system,description,date";
                                            colValue = "'Change Passs','" + txtEmail + "','" + txtPassword + "','" + IP + "','" + mobile + "','" + new_PasswordMD5 + "',getdate()";
                                            int ins = dal.insertion("tbl_activity", colName, colValue);
                                            message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                            MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                                            // Send SMS and mail for password reset.
                                            

                                        }
                                        else
                                        {
                                            message = "Please try after some time";
                                        }
                                    }
                                    else
                                    {
                                        message = "Please try another password.";
                                    }

                                }
                                else
                                {
                                    message = "Your Details Dont Match or You have NOT registered with DMC.";
                                }
                            }
                            else
                            {
                                message = "Please, provide valid email";
                            }
                        }
                        else
                        {
                            message = "Password not match";
                        }
                    }
                    else
                    {
                        message = "Password should be only alphanumeric";
                    }
                }
                else
                {
                    message = "Password length min. 8, max 18 alphanumeric";
                }
            }
            else
            {
                message = "Code not match";
            }
        }
        return message;
    }

    public ActionResult introduction()
    {
        return View();
    }

    public ActionResult powers()
    {
        return View();
    }

    public ActionResult thecouncil()
    {
        return View();
    }

    //public ActionResult gallery()
    //{
    //    return View();
    //}
    public ActionResult Gallery()
    {
        return View();
    }

    public ActionResult accomplishments()
    {
        return View();
    }

    public ActionResult registration()
    {
        return View();
    }
    public ActionResult cmeperforma()
    {
        return View();
    }
    public ActionResult cmeonline()
    {
        return View();
    }
    public ActionResult cmerequirements()
    {
        return View();
    }
    public ActionResult cmepassbook()
    {
        return View();
    }
    public ActionResult duties()
    {
        return View();
    }
    public ActionResult inst_general()
    {
        return View();
    }

    public ActionResult inst_fees()
    {
        return View();
    }
    public ActionResult inst_docupload()
    {
        return View();
    }
    public ActionResult disclaimer()
    {
        return View();
    }
    public ActionResult feestructure()
    {
        return View();
    }
    public ActionResult privacypolicy()
    {
        return View();
    }
    public ActionResult termofuse()
    {
        return View();
    }

    public ActionResult litigations()
    {
        return View();
    }


    public ActionResult council_meeting()
    {
        return View();
    }
    public ActionResult Cme_workshop_Conference()
    {
        return View();
    }

    public ActionResult Media_room()
    {
        return View();
    }
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    //public ActionResult duties()
    //{
    //    return View();
    //}
    public ActionResult LogOut()
    {
        Session.Abandon();
        return RedirectToAction("Index", "Home");
    }
    public ActionResult SearchElectrolData(string regid)
    {
        string msg = "";
        DataTable dtSearch = dal.GetList("tbl_electrolData", "*", "RegNo='" + regid.Trim() + "'");
        if (dtSearch.Rows.Count > 0)
        {
            return Json(MRPLookup.DataTableToJSONWithJSONNet(dtSearch), JsonRequestBehavior.AllowGet);
        }
        else
        {
            msg = "Data not found";
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
    }
    public ActionResult SearchElectrolDataUpdate(string regid)
    {
        int upd = 1;
        upd = dal.Updation("tbl_electrolData", "Status='Completed',Date='" + lk.GetDateTime() + "'", "ID='" + regid.Trim() + "'");
        if (upd == 0)
        {

            return Json(upd, JsonRequestBehavior.AllowGet);
        }
        else
        {
            return Json(upd, JsonRequestBehavior.AllowGet);
        }
    }

    public ActionResult TotalCount()
    {
        DataTable dtcntCompleted = dal.GetList("tbl_electrolData", "count(*) as cntCompleted", "status='Completed'");
        DataTable dtcntNotCompleted = dal.GetList("tbl_electrolData", "count(*) as cntNotCompleted", "status ='Valid'");
        string totalCmpleteStatus = "Completed: " + Convert.ToString(dtcntCompleted.Rows[0]["cntCompleted"]) + "  Not Completed: " + Convert.ToString(dtcntNotCompleted.Rows[0]["cntNotCompleted"]);
        return Json(totalCmpleteStatus, JsonRequestBehavior.AllowGet);
    }
    public ActionResult Renewal_Reminder(string key)
    {
        string msg = "";
        try
        {

            key = "1111";
            string validKey = "1111";
            // MRPLookup.SendSMS("Renewal_expired_tdy", "9899849487", "Dinesh", "", "", "", "", "", "", "", "", "");
            if (key == validKey)
            {
                string expiry_frtyfive = Convert.ToDateTime(DateTime.Now.AddDays(30)).ToString("yyyy-MM-dd");//date(('Y-m-d'), strtotime('+30 days'));
                string expiry_tdy = Convert.ToDateTime(DateTime.Now).ToString("yyyy-MM-dd");//date('Y-m-d');
                string expiry_pastfifty = Convert.ToDateTime(DateTime.Now.AddDays(-50)).ToString("yyyy-MM-dd");// date(('Y-m-d'), strtotime('-50 days'));
                string cond = "(Expiry_Date = '" + expiry_frtyfive + "' OR  Expiry_Date = '" + expiry_tdy + "' OR Expiry_Date = '" + expiry_pastfifty + " ') AND (Mobile !='' OR  Email !='')";
                //DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", cond);
                string strConnString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                SqlConnection con = new SqlConnection(strConnString);
                //SqlConnection con = new SqlConnection(@"Data Source=103.20.212.254,1232;Initial Catalog=dmcaws_New;User Id=sa;Password=bD$x89K3$@K9UaQsKQ");
                //SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-PKTADCN;Initial Catalog=dmcaws1;integrated security=true");
                con.Open();
                SqlCommand cmd = new SqlCommand("select * from pisl_fresh_registration_mst where " + cond + "", con);
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                con.Close();
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string First_Name = Convert.ToString(dt.Rows[i]["First_Name"]);
                        string Last_Name = Convert.ToString(dt.Rows[i]["Last_Name"]);
                        string Regd_ID = Convert.ToString(dt.Rows[i]["Regd_ID"]);
                        string Regd_Type = Convert.ToString(dt.Rows[i]["Regd_Type"]);
                        string Mobile = Convert.ToString(dt.Rows[i]["Mobile"]);
                        string Expiry_Date = Convert.ToDateTime(dt.Rows[i]["Expiry_Date"]).ToString("yyyy-MM-dd");
                        string date_approved = Convert.ToDateTime(dt.Rows[i]["date_approved"]).ToString("yyyy-MM-dd");
                        string tdydate = Convert.ToDateTime(System.DateTime.Now).ToString("yyyy-MM-dd");
                        string to = Convert.ToString(dt.Rows[i]["Email"]);

                        string subject1 = "Renewal of Registration with Delhi Medical Council"; //// Give the email a subject
                        string subject2 = "Expiry of Registration with Delhi Medical Council";
                        string subject3 = "Deletion of Regd Number with Delhi Medical Council";
                        string message1 = "";
                        message1 += "Dear Dr " + First_Name + " " + Last_Name + ",";
                        message1 += "Greetings from Delhi Medical Council!!";

                        message1 += "   This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council is due for renewal.";
                        message1 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting ";
                        message1 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message1 += "For inclusion of any additional qualification, please produce the original degree at the office of Delhi Medical Council, so that your additional ";
                        message1 += "qualification certificate can be verified with the original document. The original degree / diploma Certificate will be returned immediately after verification. ";

                        message1 += "<b>This is a system generated email and we request you not to reply to this email. Please ignore if already applied.</b>";

                        message1 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message1 += "Warm Regards,";

                        message1 += "Delhi Medical Council.";
                        message1 += "Ground Floor, B Wing, B Block-1";
                        message1 += "DMCR IT Park, Shastri Park";
                        message1 += "New Delhi-110053";
                        message1 += "Tel: +91-011-46621000";
                        message1 += "Website - www.delhimedicalcouncil.org	 ";

                        string message2 = "";
                        message2 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message2 += "Greetings from Delhi Medical Council!!";

                        message2 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council expired on " + Expiry_Date + " and  is due for renewal. ";

                        message2 += "We request you to kindly renew your registration within thirty days and keep your registration in force. You can renew your registration online by visiting ";
                        message2 += "www.delhimedicalcouncil.org and apply under Online Renewal & Services.";
                        message2 += "Please take note that in case you do not apply for renewal of registration within the stipulated period, your name shall be removed from the State Medical ";
                        message2 += "Register maintained by the Delhi Medical Council in accordance with the provisions of Section 22 of the Delhi Medical Council Act, 1997 which will debar";
                        message2 += "you from practicing Allopathic in the state of Delhi.";

                        message2 += "<b>Kindly ignore this email, in case you have already applied for renewal of registration</b>";

                        message2 += "This is a system generated email and we request you not to reply to this email.";

                        message2 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message2 += "Warm Regards,";

                        message2 += "Delhi Medical Council.";
                        message2 += "Ground Floor, B Wing, B Block-1";
                        message2 += "DMCR IT Park, Shastri Park";
                        message2 += "New Delhi-110053";
                        message2 += "Tel: +91-011-46621000";
                        message2 += "Website - www.delhimedicalcouncil.org";

                        string message3 = "";
                        message3 += "Dear Dr " + First_Name + " " + Last_Name + ",";

                        message3 += "This is to inform you that your Registration No " + Regd_ID + "-" + Regd_Type + " dated " + date_approved + " with Delhi Medical Council has expired on " + Expiry_Date + ". You ";
                        message3 += "failed to renew the registration with Delhi Medical Council, in spite of notices/Emails (public / individual) issued for renewal. Hence, in accordance with the ";
                        message3 += "provisions of section 22(3) of Delhi Medical Council Act, 1997; your name under Registration number " + Regd_ID + "-" + Regd_Type + "  has been removed from the State ";
                        message3 += "Medical Register of Delhi Medical Council.";

                        message3 += "Please note that if you wish to have your name re-entered in the State Medical Register of Delhi Medical Council, you may do so, by paying fees as detailed herein below,";
                        message3 += "in addition to fee for renewal of registration (Rs. 2000/-)";

                        message3 += "Late fees for non-renewal of registration:-";
                        message3 += "(a) upto six months from the date from 		Rs. 1000/- (Rupees One Thousand only)";
                        message3 += "    which registration is due for renewal";
                        message3 += "(b) for period more than six months 	    Rs. 2000/- (Rupees One Thousand only)";
                        message3 += "     but upto one year";
                        message3 += "(c) for period more than one year 			Rs. 1000/- (Rupees One Thousand per year and Part thereof)";

                        message3 += "Please also note that any person servicing or practicing modern scientific system of medicine (allopathy) in Delhi without holding valid registration with Delhi Medical Council is liable for action under the provisions of Delhi Medical Council Act, 1997.";
                        message3 += "We request you to kindly renew your registration on time and keep your registration in force. You can renew your registration online by visiting www.delhimedicalcouncil.org and apply under Online Renewal & Services.";

                        message3 += "<b>Kindly ignore this letter, in case you have already applied for renewal of registration</b>";

                        message3 += "This is a system generated email and we request you not to reply to this email.";

                        message3 += "For any assistance, Please email us at registration@delhimedicalcouncil.org. You can also visit our website www.delhimedicalcouncil.org.";

                        message3 += "Warm Regards,";

                        message3 += "Delhi Medical Council.";
                        message3 += "Ground Floor, B Wing, B Block-1";
                        message3 += "DMCR IT Park, Shastri Park";
                        message3 += "New Delhi-110053";
                        message3 += "Tel: +91-011-46621000";
                        message3 += "Website - www.delhimedicalcouncil.org,";

                        string headers = "From: DMC Registration System <registration@delhimedicalcouncil.org>' . '\r\n'"; // Set from headers

                        string message = "";
                        string subject = "";
                        string trigger = "";
                        string msgtxt = "";
                        if (Convert.ToDateTime(Expiry_Date) > Convert.ToDateTime(tdydate))
                        {
                            message = message1;
                            subject = subject1;
                            trigger = "Renewal_due_reminder";
                            msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Renewal of your DMC Regd No " + Regd_ID + " - " + Regd_Type + " is due. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }

                        }
                        else if (Convert.ToDateTime(Expiry_Date) == Convert.ToDateTime(tdydate))
                        {
                            message = message2;
                            subject = subject2;
                            trigger = "Renewal_expired_tdy";
                            // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Registration of DMC Regd No " + Regd_ID + " - " + Regd_Type + " expired today. Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                            if (!string.IsNullOrEmpty(to))
                            {
                                MRPLookup.sendMail(to, subject, message, "", "");
                            }
                            if (!string.IsNullOrEmpty(Mobile))
                            {
                                MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                            }
                        }
                        //else if (Convert.ToDateTime(Expiry_Date) < Convert.ToDateTime(tdydate))
                        //{
                        //    message = message2;
                        //    subject = subject2;
                        //    trigger = "Renewal_expired_fifty";
                        //   // msgtxt = "Dear Doctor, " + First_Name + " " + Last_Name + ". Your  ID " + Regd_ID + " - " + Regd_Type + " has been removed from the State Medical Register of DMC . Visit www.delhimedicalcouncil.org to renew. Ignore if applied already.";
                        //    if (!string.IsNullOrEmpty(to))
                        //    {
                        //       // MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //    if (!string.IsNullOrEmpty(Mobile))
                        //    {
                        //       // MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(to))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.sendMail(to, subject, message, "", "");
                        //    }
                        //}
                        //if (!string.IsNullOrEmpty(Mobile))
                        //{
                        //    if (trigger == "Renewal_expired_fifty")
                        //    {
                        //        MRPLookup.SendSMS(trigger.Trim(), Mobile.Trim(), First_Name, Last_Name, "", "", "", "", "", "", Regd_ID, Regd_Type);
                        //    }
                        //}

                    }
                }

            }
            else
            {
                msg = "Key not match";
                string path = "C:\\TestService\\ServiceLog.txt";
                using (StreamWriter writer = new StreamWriter(path, true))
                {
                    writer.WriteLine(string.Format(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt"), DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt")));
                    writer.Close();
                }
            }
        }
        catch
        {

        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult certverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["cert"];
            string Regd_type = "";
            string regd_id = "";

            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["cert"]);
            var splitedString = decodedstr.Split('-');
            Regd_type = splitedString[0];
            regd_id = splitedString[1];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            switch (Regd_type)
            {
                case "RRE":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "FRS":
                    db = "pisl_fresh_registration_mst";
                    qual_db = "pisl_fresh_regi_qual_mst";
                    break;

                case "PROV":
                    db = "pisl_prov_registration_mst";
                    qual_db = "pisl_prov_regi_qual_mst";
                    break;

                default:
                    Message = "This certificate cannnot be verified";
                    break;

            }

            var check_namechange = dal.GetList("tbl_NameChangeHistory_New", "CaseID,Name=(case when (New_MiddleName is null or  New_MiddleName='') then New_FirstName+' '+New_LastName when (New_MiddleName is null or  New_MiddleName='') and (New_LastName is null or New_LastName='') then New_FirstName else New_FirstName+' '+New_MiddleName+' '+New_LastName end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_namechange.Rows.Count > 0)
            {
                string CaseID = check_namechange.Rows[0]["CaseID"].ToString();
                ViewBag.Name = check_namechange.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                if (check_Doctordata.Rows.Count > 0)
                {
                    string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
                    ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                    DataTable dt_qual = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                    DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
                    DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign'");

                    ViewBag.qual = dt_qual;
                    ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(CaseID, doc_details.Rows[0]["doc_name"].ToString());
                    ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                    Message = "success";
                }
                else
                {
                    Message = "This Entry Cannot be Verified";
                }
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;

        return View();
    }
    public ActionResult VeryfyCertificate(string value)
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        var qstring = value;
        var decodedStr = MRPLookup.Decrypt1(qstring);
        var splitedString = decodedStr.Split('-');
        var Regd_type = splitedString[0];
        var regd_id = splitedString[1];
        var db = "";
        var qual_db = "";
        //string regdtype=
        switch (Regd_type)
        {
            case "RRE":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "FRS":
                db = "pisl_fresh_registration_mst";
                qual_db = "pisl_fresh_regi_qual_mst";
                break;

            case "PROV":
                db = "pisl_prov_registration_mst";
                qual_db = "pisl_prov_regi_qual_mst";
                break;

            default:
                Message = "This certificate cannnot be verified";
                break;

        }
        var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
        if (check_Doctordata.Rows.Count > 0)
        {
            string CaseID = check_Doctordata.Rows[0]["ID"].ToString();
            DataTable dt_Documents = dal.GetList("" + qual_db + "", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='PIC'");
            DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + CaseID + "' AND doc='Sign' ");

        }
        else
        {
            Message = "This Entry Cannot be Verified";
        }
        return Json("", JsonRequestBehavior.AllowGet);
    }
    public ActionResult letterverify()
    {
        List<dynamic> lst = new List<dynamic>();
        string Message = "";
        bool hasKeys = Request.QueryString.HasKeys();
        if (hasKeys)
        {

            var qstring = Request.QueryString["letter"];
            string Regd_type = "";
            string regd_id = "";
            string ID = "";
            var decodedstr = MRPLookup.Decrypt1(Request.QueryString["letter"]);
            var splitedString = decodedstr.Split('-');
            ID = splitedString[0];
            Regd_type = splitedString[1];
            regd_id = splitedString[2];
            //var decodedStr = MRPLookup.Decrypt1(qstring);
            //var splitedString = decodedStr.Split('-');
            // Regd_type = splitedString[0];
            // regd_id = splitedString[1];
            var db = "";
            var qual_db = "";
            //string regdtype=
            //switch ()
            //{
            //    case "RRE":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "FRS":
            //        db = "pisl_fresh_registration_mst";
            //        qual_db = "pisl_fresh_regi_qual_mst";
            //        break;

            //    case "PROV":
            //        db = "pisl_prov_registration_mst";
            //        qual_db = "pisl_prov_regi_qual_mst";
            //        break;

            //    default:
            //        Message = "This certificate cannnot be verified";
            //        break;

            //}
            var letter_type = "";
            var check_Doctordata = dal.GetList("pisl_temp_registrations", "ID,date_approved,drg_from,Name=(case when (Middle_Name is null or  Middle_Name='') then First_Name+' '+Last_Name when (Middle_Name is null or  Middle_Name='') and (Last_Name is null or Last_Name='') then First_Name else First_Name+' '+Middle_Name+' '+Last_Name end)", "ID='" + ID + "' and Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
            if (check_Doctordata.Rows.Count > 0)
            {
                switch (check_Doctordata.Rows[0]["drg_from"].ToString())
                {
                    case "noc":
                        letter_type = "No Objection Certificate";
                        break;

                    case "gdst":
                        letter_type = "Good Standing Certificate";
                        break;
                }
                ViewBag.lettertype = letter_type;
                ViewBag.Name = check_Doctordata.Rows[0]["Name"].ToString();
                DataTable dt_qual = dal.GetList("pisl_fresh_regi_qual_mst", "*", "Regd_Type='" + Regd_type + "' AND Regd_ID= '" + regd_id + "'");
                DataTable doc_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='PIC'");
                DataTable sign_details = dal.GetList("pisl_upload_details", "*", "ID = '" + ID + "' AND doc='Sign'");
                if (!string.IsNullOrEmpty(check_Doctordata.Rows[0]["date_approved"].ToString()))
                {
                    ViewBag.DateApproved = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).ToString("dd MMMM,yyyy");
                    ViewBag.expiry = Convert.ToDateTime(check_Doctordata.Rows[0]["date_approved"]).AddDays(-1).AddMonths(6).ToString("dd MMMM, yyyy");
                }
                ViewBag.qual = dt_qual;
                ViewBag.pic = DelhimedicalcouncilORG.helper.AWSS3.AWSGetImageUrl(ID, doc_details.Rows[0]["doc_name"].ToString());
                ViewBag.sign = sign_details.Rows[0]["doc_name"].ToString();
                Message = "success";
            }
            else
            {
                Message = "This Entry Cannot be Verified";
            }
        }
        else
        {
            Message = "You are Not Authorized to View this Page!!";
        }

        //return Json("", JsonRequestBehavior.AllowGet);
        ViewBag.msg = Message;
        return View();
    }
    public ActionResult Regi_search()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public ActionResult search_ur_dr()
    {

        return View();
    }
    public ActionResult regi_search_submit(string Regid, string Types)
    {
        try
        {


            string regid = Request.QueryString["Regd_ID"];
            string type = Request.QueryString["Type"]; ;
            //string type = frm["type"].Trim();
            //string regid = frm["regid"].Trim();
            string colname = "*";
            string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "' ORDER BY S_No DESC";
            DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
            if (dt.Rows.Count > 0)
            {
                DateTime ddob = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                DateTime dapproved = Convert.ToDateTime(dt.Rows[0]["date_approved"].ToString());
                DateTime dexpiry = Convert.ToDateTime(dt.Rows[0]["Expiry_Date"].ToString());
                ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                ViewBag.dateapproved = dapproved.ToShortDateString();
                ViewBag.expirydate = dexpiry.ToShortDateString();
                ViewBag.dob = ddob.ToShortDateString();
                ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


                DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
                if (result_remarks.Rows.Count > 0)
                {
                    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    {
                        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    }
                }
                DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
                if (qualificationdt.Rows.Count > 0)
                {
                    ViewBag.qualdata = qualificationdt;
                }

            }
            return View();
        }
        catch (Exception ex)
        {
            return View();
        }
    }
    public ActionResult regi_search_submits(FormCollection frm)
    {

        string clientCaptcha = frm["CL_CAPCHA"].ToString();
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;

            return Json("-1");
        }
        string msg = "";
        //string type = Regd_ID;
        //string regid = Type;
        string type = frm["type"].Trim();
        string regid = frm["regid"].Trim();
        string colname = "*";
        string conditions = "Regd_ID='" + regid.Trim() + "' and Regd_Type='" + type + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst ", colname, conditions);
        if (dt.Rows.Count > 0)
        {
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            DataTable result_remarks = dal.GetList("pisl_remarks", "*", conditions);
            if (result_remarks.Rows.Count > 0)
            {
                for (int i = 0; i < result_remarks.Rows.Count; i++)
                {
                    ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                }
            }
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", conditions);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult search_ur_dr_submit(FormCollection frm)
    {
        try
        {



            string First_Name = Request.QueryString["First_Name"];
            string Last_Name = frm["Last_Name"];
            string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
            string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
            string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
            string Mobile = Request.QueryString["Mobile"];
            string Email = Request.QueryString["Email"];

            if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Last_Name) && !string.IsNullOrEmpty(Corr_Add_Line_1) && !string.IsNullOrEmpty(Corr_Add_Line_2) && !string.IsNullOrEmpty(Corr_Add_Pincode) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    // string tablename = "pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM "
                    //     + " on PTR.Regd_ID = PPRM.Regd_ID and PTR.Regd_Type=PPRM.Regd_Type where PPRM.Regd_Type = '" + Session["Regd_Type"].ToString() + "' and "
                    //     + "PPRM.Regd_ID = '" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc";
                    // string colname = "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type,FORMAT(PPRM.date_approved,'dd-MM-yyyy') as 'date_approved'";
                    // //dtRegistrationDetails = dal.GetList("pisl_temp_registrations PTR join pisl_prov_registration_mst PPRM on PTR.Regd_ID=PPRM.Regd_ID where PPRM.Regd_Type='" + Session["Regd_Type"].ToString() + "' and PPRM.Regd_ID='" + Session["Regd_ID"].ToString() + "' order by PPRM.Regd_ID desc", "top 1 PTR.ID,PTR.Regd_ID,PTR.Regd_Type,PTR.Final_Status,PPRM.Expiry_Date,PTR.drg_from,PTR.type", "");
                    //DataTable dtRegistrationDetails = dal.GetList(tablename, colname, "");
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Mobile='" + Mobile + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}

                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else if (!string.IsNullOrEmpty(First_Name) && !string.IsNullOrEmpty(Mobile) && !string.IsNullOrEmpty(Email))
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "Email='" + Email + "' and Mobile='" + Mobile + "' and Email='" + Email + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                //  string condtions = "First_Name='" + First_Name.Trim() + "' or Last_Name='" + Last_Name + "' or Mobile='" + Mobile + "' or Email='" + Email + "'";
                string condtions = "First_Name='" + First_Name.Trim() + "'";
                DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
                if (dt.Rows.Count > 0)
                {
                    //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
                    ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
                    ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
                    ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
                    ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
                    ViewBag.dob = dt.Rows[0]["DOB"].ToString();
                    ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
                    ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();
                    ViewBag.dt_search_ur_doc = dt;

                    //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
                    //if (result_remarks.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < result_remarks.Rows.Count; i++)
                    //    {
                    //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
                    //    }
                    //}
                    string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
                    DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", "");
                    if (qualificationdt.Rows.Count > 0)
                    {
                        ViewBag.qualdata = qualificationdt;
                    }
                    //foreach (System.Data.DataRow row in ViewBag.qualdata.Rows)
                    //{

                    //}

                    //string msg = "1";
                    //return Json(msg, JsonRequestBehavior.AllowGet);
                }
            }


            return View();
        }
        catch (Exception ex)
        {
            return View();

        }
    }


    public ActionResult search_ur_dr_submit2(FormCollection frm)
    {
        string msg = "";
        string First_Name = frm["First_Name"];
        string Last_Name = frm["Last_Name"];
        string Corr_Add_Line_1 = frm["Corr_Add_Line_1"];
        string Corr_Add_Line_2 = frm["Corr_Add_Line_2"];
        string Corr_Add_Pincode = frm["Corr_Add_Pincode"];
        string Mobile = frm["Mobile"];
        string Email = frm["Email"];

        string condtions = "First_Name='" + First_Name.Trim() + "'";
        DataTable dt = dal.GetList("pisl_fresh_registration_mst", "*", condtions);
        if (dt.Rows.Count > 0)
        {
            //ViewBag.txt_RegistrationType = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_RegistrationNo = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_registrationDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_ExpiryDate = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            //ViewBag.txt_firstName = Convert.ToString(dtpfrm.Rows[0][""]);
            ViewBag.regid = dt.Rows[0]["Regd_ID"].ToString();
            ViewBag.type = dt.Rows[0]["Regd_Type"].ToString();
            ViewBag.dateapproved = dt.Rows[0]["date_approved"].ToString();
            ViewBag.expirydate = dt.Rows[0]["Expiry_Date"].ToString();
            ViewBag.dob = dt.Rows[0]["DOB"].ToString();
            ViewBag.doctorname = dt.Rows[0]["First_Name"].ToString() + ' ' + dt.Rows[0]["Middle_Name"].ToString() + ' ' + dt.Rows[0]["Last_Name"].ToString();
            ViewBag.address = dt.Rows[0]["Corr_Add_Line_1"].ToString() + ", " + dt.Rows[0]["Corr_Add_Line_2"].ToString() + "." + dt.Rows[0]["Corr_Add_State"].ToString() + "-" + dt.Rows[0]["Corr_Add_Pincode"].ToString();


            //DataTable result_remarks = dal.GetList("pisl_remarks", "*", condtions);
            //if (result_remarks.Rows.Count > 0)
            //{
            //    for (int i = 0; i < result_remarks.Rows.Count; i++)
            //    {
            //        ViewBag.Remarks = result_remarks.Rows[0]["Remarks"].ToString();
            //    }
            //}
            string condtions2 = "Regd_ID='" + dt.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt.Rows[0]["Regd_Type"].ToString() + "'";
            DataTable qualificationdt = dal.GetList("pisl_fresh_regi_qual_mst ", "*", condtions2);
            if (qualificationdt.Rows.Count > 0)
            {
                ViewBag.qualdata = qualificationdt;
            }
            msg = "1";
        }
        else
        {
            msg = "Not Data Found";
        }


        return Json(msg, JsonRequestBehavior.AllowGet);
    }
    public ActionResult cme()
    {
        return View();
    }
    public ActionResult status_comp2021()
    {
        return View();
    }

    public ActionResult ForgetEmailPasswordProv()
    {
        Session["CAPTCHA"] = GetRandomText();
        return View();
    }
    public dynamic getForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB)
    {
        //select pu.First_Name,pu.Last_Name,pu.email,pu.Mobile from pisl_users as pu inner join pisl_prov_regi_qual_mst as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type where pu.Regd_ID = 18430 and pu.DOB = '1991-10-26' and pfq.passing_date = 2016 and pfq.quali_course = 'M.B.B.S.'
        List<dynamic> OBJ = new List<dynamic>();
        string dob = lk.convertdate1(txt_DOB);
        try
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else {
                db = "pisl_fresh_regi_qual_mst";
            }

            DataTable dt1 = dal.GetList("pisl_users as pu inner join "+db+" as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType.ToUpper() + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                OBJ.Add(MRPLookup.Convert_DatatableToList(dt1).ToList());
                return Json(OBJ, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        catch (Exception)
        {

            return null;
        }
        
    }

    public string otpForgetEmailmobProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail)
    {
        string message = string.Empty;
        string dob = lk.convertdate1(txt_DOB);
        string db = "";
        if (txtRegType.ToUpper() == "PROV")
        {
            db = "pisl_prov_regi_qual_mst";
        }
        else
        {
            db = "pisl_fresh_regi_qual_mst";
        }
        DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
        if (dt1.Rows.Count > 0)
        {
            MailFormat mf = new MailFormat();
            string code = MRPLookup.RandamStringGenerator1();
            Session["provotp"] = code;
            string mailBody = "Your OTP is: " + code + ". DMC";
            string sendmailStatus= MRPLookup.sendMail(txtEmail.Trim(), "DMC | OTP Verification", mailBody, "", "");


            //string mailBody = mf.SendCodeOnMail(dt1.Rows[0]["First_Name"].ToString(), code);
            //string sendmailStatus = MRPLookup.sendMail(txtEmail.Trim(),"Reset Password Code" + System.DateTime.Now + "", mailBody, "", "");
            if (sendmailStatus != "Technical issue! Please try agiain")
            {
                message = "OTP has been been sent to your Email Id and Mobile. Check Your inbox.";

            }
            else
            {
                message = sendmailStatus;
            }


            return message;
        }
        return "Some thing went wrong...!";
    }

    public string submitForgetEmailPasswordProv(string txtregid, string txtRegType, string txtmbbsyear, string txt_DOB,string txtEmail, string txtMobileNo,string CaptchaCaseID,string txtCode)
    {
        int updPassword = 1;
        string message = string.Empty;
        string clientCaptcha = CaptchaCaseID;
        string serverCaptcha = Session["CAPTCHA"].ToString();
        if (Session["provotp"].ToString()!=txtCode)
        {
            return "Otp incorrect";
        }

        if (!clientCaptcha.Equals(serverCaptcha))
        {
            ViewBag.ShowCAPTCHA = serverCaptcha;
            message = "Sorry, please write exact Captcha as written below.";
            // return message;
        }
        else
        {
            string db = "";
            if (txtRegType.ToUpper() == "PROV")
            {
                db = "pisl_prov_regi_qual_mst";
            }
            else
            {
                db = "pisl_fresh_regi_qual_mst";
            }
            string dob = lk.convertdate1(txt_DOB);
            DataTable dt1 = dal.GetList("pisl_users as pu inner join " + db + " as pfq on pu.Regd_ID = pfq.Regd_ID and pu.Regd_Type = pfq.Regd_Type", "pu.First_Name,pu.Last_Name,pu.email,pu.Mobile,pu.Regd_ID,pu.Regd_Type", "pu.Regd_ID ='" + txtregid + "' and pu.Regd_Type ='" + txtRegType + "' and pu.DOB = " + dob + " and pfq.passing_date =" + txtmbbsyear + " and pfq.quali_type = 'Basic Qualification'");
            if (dt1.Rows.Count > 0)
            {
                if (Convert.ToString(dt1.Rows[0]["Regd_ID"]) != "" && Convert.ToString(dt1.Rows[0]["Regd_Type"]) != "")
                {
                      string colValue = "Email='" + txtEmail.Trim() + "',Mobile='" + txtMobileNo.Trim() + "',date_updated='" + lk.GetDateTime() + "'";
                      updPassword = dal.Updation("pisl_users", colValue, "Regd_ID='"+dt1.Rows[0]["Regd_ID"].ToString()+ "' and Regd_Type='"+ dt1.Rows[0]["Regd_Type"].ToString() + "'");
               
                   
                     var tblCurrentStatuscolomns = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                     var Currentupdatestatuss = dal.Updation("pisl_temp_registrations", tblCurrentStatuscolomns, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");

                    var tblCurrentStatuscolomns1 = "email='" + txtEmail.Trim() + "', Mobile='" + txtMobileNo.Trim() + "'";
                    var Currentupdatestatuss1 = dal.Updation("pisl_fresh_registration_mst", tblCurrentStatuscolomns1, "Regd_ID='" + dt1.Rows[0]["Regd_ID"].ToString() + "' and Regd_Type='" + dt1.Rows[0]["Regd_Type"].ToString() + "'");



                    message = "Your Email and Mobile Changed successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                    //MRPLookup.SendSMS("forgot_pwd", mobile, firstName, lastName, "", "", txtEmail, txtPassword, "", "", "", "");
                   // Send SMS and mail for password reset.
                }
                else
                {
                    message = "Please try after some time";
                }
            }
            else
            {
                message = "Data Not found..!";
            }
        }
        return message;
    }
    public string sendOTP(string EmailId)
    {
        string message = "";
        string cond = "email='" + EmailId + "'";
        DataTable dtLogin = dal.GetList("pisl_users", "*", cond);
        if (dtLogin.Rows.Count > 0)
        {
            string mobile = dtLogin.Rows[0]["Mobile"].ToString();
            Session["otp"] = GetRandomText();
            string OTP = Session["otp"].ToString();
            //string mailBody = mf.Signup(txt_FirstName, txt_Email, "", hash);
            string mailBody = "Your OTP is: " + OTP + ". DMC";
            MRPLookup.sendMail(EmailId.Trim(), "DMC | OTP Verification", mailBody, "", "");
            //MRPLookup.SendSMS(txt_ContactNo.Trim(), message.Trim());
            MRPLookup.SendSMS("otp", mobile.Trim(), "", "", OTP, "", "", "", "", "", "", "");
            message = "Please check your email or Mobile for OTP";
        }
        else
        {
            message = "Email not found, Please enter a valid email";
        }
        return message;
    }

    public ActionResult ChangePassward(FormCollection frm)
    {
        string Result = "";
        if (frm["txtOTP"].ToString() == Session["OTP"].ToString())
        {
            if (frm["txt_password"].Length >= 8 && frm["txt_password"].Length <= 18)
            {
                Regex regexObj = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,15}$");
                Boolean foundMatch = regexObj.IsMatch(frm["txt_password"]);
                if (foundMatch == true)
                {
                    string where = "email='" + frm["txt_email"] + "'";// and Mobile='"+ frm["txt_contactno"] + "'";
                    DataTable dt_dr_details = dal.GetList("pisl_users", "*", where);
                    if (dt_dr_details != null)
                    {
                        if (dt_dr_details.Rows.Count > 0)
                        {
                            string pass = Encrypt(frm["txt_password"].Trim());
                            string col = " password='" + pass + "'";
                            var update = dal.Updation("pisl_users", col, "email='" + dt_dr_details.Rows[0]["email"].ToString() + "'");
                            if (update == 0)
                            {
                                string hostName = Dns.GetHostName();
                                string IP = Dns.GetHostByName(hostName).AddressList[0].ToString();
                                string colName = "activity,email,password,ip,system,description,date";
                                string colValue = "'Change Passs','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + frm["txt_password"].ToString().Trim() + "','" + IP + "','" + dt_dr_details.Rows[0]["email"].ToString() + "','" + pass + "',getdate()";
                                int ins = dal.insertion("tbl_activity", colName, colValue);
                                string message = "Your password has been reset successfully";// and sent to your mobile number - " + mobile + " and Pass: " + new_password + "";
                                MRPLookup.SendSMS("forgot_pwd", dt_dr_details.Rows[0]["Mobile"].ToString(), dt_dr_details.Rows[0]["First_Name"].ToString(), dt_dr_details.Rows[0]["Last_Name"].ToString(), "", "", dt_dr_details.Rows[0]["email"].ToString(), frm["txt_password"].ToString().Trim(), "", "", "", "");
                                Result = "0";
                            }
                            else
                            {
                                Result = "Somthing wrong Error !";
                            }
                        }
                        else
                        {
                            Result = "This is not registered email please check.";
                        }
                    }
                }
                else
                {
                    Result = "Please Enter alpha-numeric Password!! e.g Pass@1234 password must contain one sepecial character";
                }
            }
            else
            {
                Result = "Password Length must between 8 to 18 letters";
            }
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
    public ActionResult verifyOTP(string otp)
    {
        string Result = "";
        if (otp == Session["otp"].ToString())
        {
            Result = "DONE";
        }
        else
        {
            Result = "Enter OTP is Wrong!";
        }
        return Json(Result, JsonRequestBehavior.AllowGet);
    }
}
}
    }
}`,

    ];

    return snippets[Math.floor(Math.random() * snippets.length)];
};

export default generateRandomCode;